{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","hasMethodName":["readObjectFieldAsHash-IterImpl-JsonIterator","readObjectFieldAsSlice-IterImpl-JsonIterator","skipArray-IterImpl-JsonIterator","skipObject-IterImpl-JsonIterator","skipString-IterImpl-JsonIterator","skipUntilBreak-IterImpl-JsonIterator","skipNumber-IterImpl-JsonIterator","readSlice-IterImpl-JsonIterator","nextToken-IterImpl-JsonIterator","readByte-IterImpl-JsonIterator","readAny-IterImpl-JsonIterator","skipFixedBytes-IterImpl-JsonIterator-int","loadMore-IterImpl-JsonIterator","readStringSlowPath-IterImpl-JsonIterator-int","updateStringCopyBound-IterImpl-JsonIterator-int","readInt-IterImpl-JsonIterator-byte","readLong-IterImpl-JsonIterator-byte","readDouble-IterImpl-JsonIterator"]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"readObjectFieldAsHash-IterImpl-JsonIterator","callMethodNameReferTo":{},"num":198,"succs":[[47,1],[48,49,50,5,2],[3,55],[49,57,56,4,5],[61,5],[6,66],[7,76],[15,8,85],[87,9,86,78,16],[90,10],[98,11],[99,13,100,12,92],[101,16],[14,102],[15,104],[79,8,89],[17,107],[114,18],[49,115,22,116,19],[119,20],[121,49,22,120,21],[22,123],[128,23,127],[29,24,27,31,28,30,33,26,25],[25],[26],[],[28],[],[46,35],[32],[],[],[17,0,22,7,6,16,5],[52,35],[],[34,1,35,59],[1,3,35,36],[35,37],[38,35,40],[35,39],[35,40,42],[77,80],[52,41],[18,41,59,43],[44,18,41,20],[],[2],[34,51,53],[],[54],[],[],[133,134,132,131,30,26,25,130],[],[4],[60,58,36],[54],[],[],[164,165,162,30,26,163,25,166],[62,63,37,64],[],[65],[65],[],[72],[69,68,70],[91,92],[],[67],[70],[73,69,74],[69],[75],[],[81],[38],[77,80],[77,78],[77,79],[77,83,82],[77],[38,84],[],[13,9,14,10],[],[88,39],[],[],[93],[40,80],[91],[91,95,94],[91],[96,80],[40,97],[],[12],[],[54],[],[103,67,68],[],[106,105,70],[],[75],[110,108,109],[111,41],[],[112,113,42],[],[],[75],[19],[117,43,53],[118],[],[],[21],[122,44,60],[118],[],[126,124,125,45],[],[65],[65],[],[71,129],[],[131],[],[52,138],[],[135],[139,127,53],[52],[52,136],[],[140,141],[142,136],[143,89],[],[144,137],[],[146,172],[179,147],[148,180],[149,156,150,152,159,154],[156,150,152,159,181,154],[152,151,189],[190],[189,154,153],[191],[156,189,155],[192],[157,158,189],[193],[194],[160,189,161],[161,195],[182,60,127],[163],[],[171,59],[],[146,145],[59],[169,59,167],[170,168,59],[174,173],[],[175],[167],[170,173],[177,176,173],[173],[178,167],[],[147,148],[183],[174,168],[149,181],[184,185,181],[181],[187,186],[168,188],[174,89],[],[],[],[],[],[],[],[170,196,109],[197,169],[]],"attribute":["If Stmt ","Binary Expr NOT_EQUALS ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Expression Stmt ","Expression Stmt ","For Stmt ","Binary Expr LESS ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Break Stmt ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","Method Call Expr ","If Stmt ","Binary Expr NOT_EQUALS ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Method Call Expr ","Method Declaration Throws ","PUBLIC","STATIC","FINAL","Primitive Type int ","Simple Name readObjectFieldAsHash ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Simple Name lang ","Name Expr iter ","Void Type ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Simple Name demo ","Class Or Interface Type JsonIterator ","Block Stmt ","Method Call Expr ","NOT_EQUALS","Char Literal Expr ''' ","Name Expr compType ","Simple Name iter ","Method Declaration Throws ","'''","Block Stmt ","Method Call Expr ","Char Literal Expr ''' ","Simple Name addMethod ","Simple Name iter ","Method Declaration Throws ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Name Expr hash ","Name Expr c ","Simple Name hash ","Name Expr hash ","Name Expr hash ","Variable Declarator long hash = ","Primitive Type long ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name i ","Name Expr i ","Name Expr i ","Class Or Interface Type T ","Variable Declarator int i = ","Primitive Type int ","Simple Name addMethod ","Simple Name head ","Block Stmt ","LESS","Simple Name toBoolean ","Simple Name tail ","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Array Access Expr i ","Field Access Expr ","Simple Name buf ","Block Stmt ","EQUALS","Char Literal Expr ''' ","break;","Assign Expr XOR ","XOR","Assign Expr MULTIPLY ","MULTIPLY","Integer Literal Expr Note Zero  ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Binary Expr PLUS ","Simple Name head ","PLUS","Integer Literal Expr Note Zero  ","Block Stmt ","Method Call Expr ","Name Expr obj ","Simple Name jsoniter ","':'","Block Stmt ","Method Call Expr ","Char Literal Expr ':' ","Simple Name nextToken ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","ReturnStmt","Cast Expr ","Primitive Type int ","Primitive Type byte ","Simple Name readByte ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Return Stmt ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Array Access Expr iter.head++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Field Access Expr ","Simple Name head ","Expression Stmt ","For Stmt ","Expression Stmt ","Switch Stmt ","Name Expr c ","Name Expr valueType ","Char Literal Expr ' ' ","Switch Entry Stmt ","Char Literal Expr 'n' ","Switch Entry Stmt ","Char Literal Expr 'r' ","Switch Entry Stmt ","Char Literal Expr 't' ","Continue Stmt ","Switch Entry Stmt ","Expression Stmt ","Return Stmt ","Primitive Type byte ","Simple Name nextToken ","Parameter final JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Char Literal Expr 'r' ","Integer Literal Expr Note Zero  ","Name Expr i ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Field Access Expr ","Char Literal Expr 'n' ","Block Stmt ","Variable Declaration Expr ","Simple Name c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","SwitchEntryStmt","' '","'n'","'r'","'t'","continue;","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head "]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"readObjectFieldAsSlice-IterImpl-JsonIterator","callMethodNameReferTo":{},"num":171,"succs":[[1,21],[2,30],[32,33,3,31,4],[38,4],[5,23,43],[11,13,6,15,9,10,12,8,7],[7],[8],[],[10],[],[20,17],[14],[],[],[0,1,4],[17,28],[],[17,16,35],[17,2,18],[],[24],[16],[22],[25,26,22],[22],[27,29,16],[],[],[55,58,6,59,57,12,8,7,56],[3],[36,34,18],[],[37],[],[],[136,137,134,12,8,135,7,138],[],[41,40,19,39],[],[42],[42],[],[],[45,71],[32,47,46,72,73],[77,47],[81,48],[51,90,49],[50,91,84,51,92],[96],[52,53,54],[100,53],[54,111],[29,115,43],[56],[],[28,70],[],[47,44,48],[28,35],[45,28,60],[28,61],[28,62],[28,62],[64,28],[28,65],[66,28,68],[82,84,49,85],[63,67],[],[46],[75,36,74,60],[76],[],[],[],[80,79,61,78],[],[42],[42],[86],[83,62],[],[82],[82,84,49],[82,87,88],[82],[83,62,89],[],[50],[],[93,94],[95],[],[],[63,98,99,97],[],[42],[42],[105,103,102,101,104],[64,106],[],[65,107],[66,108],[110,109,85],[],[],[],[],[95],[112,68,113],[67,114],[],[],[69,116],[],[118,144],[151,119],[120,152],[121,128,122,124,131,126],[128,122,124,131,153,126],[124,123,162],[163],[162,125,126],[164],[128,162,127],[165],[129,130,162],[166],[167],[132,162,133],[133,168],[154,36,43],[135],[],[143,35],[],[118,117],[35],[141,35,139],[142,140,35],[146,145],[],[147],[139],[142,145],[149,148,145],[145],[150,139],[],[120,119],[155],[146,140],[121,153],[156,157,153],[153],[159,158],[140,160],[146,161],[],[],[],[],[],[],[],[],[142,169,113],[170,141],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Return Stmt ","Method Declaration Throws ","PUBLIC","STATIC","FINAL","Class Or Interface Type Slice ","Simple Name readObjectFieldAsSlice ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name field ","Name Expr cache ","Variable Declarator Slice field = ","Class Or Interface Type Slice ","Method Call Expr ","Simple Name readSlice ","Simple Name iter ","Method Declaration Throws ","Block Stmt ","Method Call Expr ","NOT_EQUALS","Char Literal Expr ':' ","Simple Name nextToken ","Simple Name iter ","Method Declaration Throws ","':'","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","ReturnStmt","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Class Or Interface Type Slice ","Simple Name readSlice ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Simple Name size ","Null Literal Expr ","Name Expr iter ","Void Type ","Name Expr end ","Void Type ","Class Or Interface Type JsonIterator ","Block Stmt ","Method Call Expr ","Char Literal Expr ''' ","Name Expr IterImpl ","Simple Name nextToken ","'''","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Simple Name end ","Name Expr IterImplString ","Primitive Type int ","Name Expr end ","Expression Stmt ","Primitive Type int ","Method Call Expr ","Simple Name findSliceEnd ","Block Stmt ","EQUALS","Unary Expr - ","Integer Literal Expr Note Zero  ","MINUS","IntegerLiteralExpr","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Field Access Expr ","Binary Expr MINUS ","Parameter IOException e ","Simple Name buf ","Simple Name head ","MINUS","Integer Literal Expr Note Zero  ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Simple Name head ","Field Access Expr ","Simple Name reusableSlice ","Expression Stmt ","For Stmt ","Expression Stmt ","Switch Stmt ","Name Expr c ","Name Expr valueType ","Char Literal Expr ' ' ","Switch Entry Stmt ","Char Literal Expr 'n' ","Switch Entry Stmt ","Char Literal Expr 'r' ","Switch Entry Stmt ","Char Literal Expr 't' ","Continue Stmt ","Switch Entry Stmt ","Expression Stmt ","Return Stmt ","Primitive Type byte ","Simple Name nextToken ","Parameter final JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Char Literal Expr 'r' ","Integer Literal Expr Note Zero  ","Name Expr i ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Field Access Expr ","Char Literal Expr 'n' ","Block Stmt ","Variable Declaration Expr ","Simple Name c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","POSTFIX_INCREMENT","SwitchEntryStmt","' '","'n'","'r'","'t'","continue;","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head "]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"skipArray-IterImpl-JsonIterator","callMethodNameReferTo":{},"num":148,"succs":[[1,48],[57,3,24,2],[3,63],[68,59,67,25,4],[5,6,12,16],[106,61,6,16,12],[8,10,71,11,7,9],[72],[73,9],[10,80],[11,84],[24,25,90],[15,14,71,13],[91],[15,92],[24,25,90],[18,71,17,23,19],[93],[94,19],[96,20],[97,98,21,52,23],[100,22],[26,105,23],[24,25,90],[3,60,70],[108],[31,30,32,33,28,27,35,29],[28],[],[30],[],[37,47],[34],[],[],[1,25,0],[44,37],[],[44,37,36],[44,37,38],[44,37,41,39],[58,62,61],[40,82],[40,42],[45,40,43],[62],[44],[],[53],[50,52],[],[49,50],[51,50],[54,55,50],[50],[56],[],[4],[36],[58,45,62],[58,59,62],[58,60,62],[58,41,43],[58,65,64],[58],[36,66],[],[],[69,38],[],[],[],[],[74,76,75],[40,77],[],[41,79,78],[],[],[56],[81,83,42],[],[],[120,123,122,119,32,28,27,121],[85,62,75],[86,88,87],[43,89],[],[56],[],[],[],[49,70],[],[51,95],[],[21,22],[],[99],[],[101,75,102],[44,103],[45,104,78],[],[56],[],[107,39],[],[110,109,46,111],[],[112],[112],[],[129,114],[117,137,115],[97,138,116,117,132],[141],[118],[145],[120],[],[128,82],[],[113,114],[82],[124,82],[127,124,125,82],[132,115,130],[],[133],[131,124],[],[130],[135,134,130],[130],[136,131,124],[],[116],[139,140],[56],[],[144,143,125,142],[],[112],[112],[127,75,146],[147,126],[]],"attribute":["Return Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Switch Stmt ","Array Access Expr i ","Switch Entry Stmt ","Char Literal Expr ''' ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Break Stmt ","Switch Entry Stmt ","Char Literal Expr '[' ","Expression Stmt ","Break Stmt ","Switch Entry Stmt ","Char Literal Expr ']' ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Break Stmt ","Unary Expr ++ ","Throw Stmt ","Method Declaration Throws ","STATIC","FINAL","Char Literal Expr 't' ","Simple Name skipArray ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Char Literal Expr 'n' ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Name Expr level ","Simple Name level ","Name Expr level ","Primitive Type short ","Marker Annotation Expr @Override ","Primitive Type int ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Parameter IOException e ","Primitive Type int ","Field Access Expr ","Simple Name head ","LESS","Field Access Expr ","Simple Name tail ","POSTFIX_INCREMENT","SwitchEntryStmt","'''","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Binary Expr PLUS ","Name Expr iter ","PLUS","Name Expr i ","Method Call Expr ","Simple Name skipString ","Simple Name iter ","Method Declaration Throws ","Assign Expr ASSIGN ","Binary Expr MINUS ","Field Access Expr ","MINUS","Integer Literal Expr Note Zero  ","Simple Name head ","break;","'['","Name Expr decoder ","']'","Unary Expr -- ","POSTFIX_DECREMENT","Block Stmt ","EQUALS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Assign Expr ASSIGN ","Field Access Expr ","Binary Expr PLUS ","Simple Name head ","Integer Literal Expr Note Zero  ","ReturnStmt","Field Access Expr ","Simple Name buf ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Block Stmt ","Expression Stmt ","Void Type ","Simple Name skipString ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Integer Literal Expr Note Zero  ","Name Expr iter ","Name Expr dArr ","Name Expr end ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Primitive Type int ","Name Expr IterImplSkip ","Name Expr end ","Variable Declarator int end = ","Primitive Type int ","Method Call Expr ","Simple Name findStringEnd ","Block Stmt ","Unary Expr - ","Integer Literal Expr Note Zero  ","MINUS","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Array Access Expr d++ ","Simple Name head "]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"skipObject-IterImpl-JsonIterator","callMethodNameReferTo":{},"num":148,"succs":[[48,1],[3,57,2,24],[63,3],[25,59,67,4,68],[5,16,12,6],[106,16,12,61,6],[11,71,10,7,9,8],[72],[73,9],[10,80],[84,11],[25,90,24],[14,71,13,15],[91],[92,15],[25,90,24],[18,17,23,71,19],[93],[94,19],[96,20],[97,21,52,23,98],[22,100],[23,26,105],[25,90,24],[60,3,70],[108],[30,29,33,35,31,32,28,27],[28],[],[30],[],[37,47],[34],[],[],[1,25,0],[44,37],[],[44,36,37],[44,38,37],[44,41,37,39],[58,61,62],[40,82],[42,40],[43,45,40],[62],[44],[],[53],[52,50],[],[50,49],[51,50],[50,54,55],[50],[56],[],[4],[36],[45,58,62],[59,58,62],[58,60,62],[43,58,41],[64,58,65],[58],[66,36],[],[],[69,38],[],[],[],[],[74,76,75],[77,40],[],[78,41,79],[],[],[56],[81,42,83],[],[],[120,123,122,119,32,28,27,121],[85,62,75],[86,88,87],[43,89],[],[56],[],[],[],[70,49],[],[51,95],[],[22,21],[],[99],[],[101,102,75],[44,103],[104,45,78],[],[56],[],[107,39],[],[111,46,109,110],[],[112],[112],[],[129,114],[117,137,115],[97,138,116,117,132],[141],[118],[145],[120],[],[128,82],[],[113,114],[82],[124,82],[127,124,125,82],[132,115,130],[],[133],[131,124],[],[130],[135,134,130],[130],[136,131,124],[],[116],[139,140],[56],[],[144,143,125,142],[],[112],[112],[127,75,146],[147,126],[]],"attribute":["Expression Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Switch Stmt ","Array Access Expr i ","Switch Entry Stmt ","Char Literal Expr ''' ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Break Stmt ","Switch Entry Stmt ","Char Literal Expr '{' ","Expression Stmt ","Break Stmt ","Switch Entry Stmt ","Char Literal Expr '}' ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Break Stmt ","Unary Expr ++ ","Throw Stmt ","Method Declaration Throws ","STATIC","FINAL","Void Type ","Simple Name skipObject ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Name Expr level ","Simple Name level ","Name Expr level ","Name Expr level ","Variable Declarator int level = ","Primitive Type int ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Field Access Expr ","Simple Name head ","LESS","Field Access Expr ","Simple Name tail ","POSTFIX_INCREMENT","SwitchEntryStmt","'''","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Binary Expr PLUS ","Simple Name head ","PLUS","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name skipString ","Simple Name iter ","Method Declaration Throws ","Assign Expr ASSIGN ","Binary Expr MINUS ","Field Access Expr ","MINUS","Integer Literal Expr Note Zero  ","Simple Name head ","break;","'{'","Unary Expr ++ ","'}'","Unary Expr -- ","POSTFIX_DECREMENT","Block Stmt ","EQUALS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Assign Expr ASSIGN ","Field Access Expr ","Binary Expr PLUS ","Simple Name head ","Integer Literal Expr Note Zero  ","ReturnStmt","Field Access Expr ","Simple Name buf ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Block Stmt ","Expression Stmt ","Void Type ","Simple Name skipString ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Integer Literal Expr Note Zero  ","Name Expr iter ","Name Expr dArr ","Name Expr end ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Primitive Type int ","Name Expr IterImplSkip ","Name Expr end ","Variable Declarator int end = ","Primitive Type int ","Method Call Expr ","Simple Name findStringEnd ","Block Stmt ","Unary Expr - ","Integer Literal Expr Note Zero  ","MINUS","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Array Access Expr d++ ","Simple Name head "]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"skipString-IterImpl-JsonIterator","callMethodNameReferTo":{"28":"src/main/java/com/jsoniter/IterImplSkip.java?findStringEnd-IterImplSkip-JsonIterator"},"num":45,"succs":[[22,1],[4,30,2],[31,32,3,4,25],[36],[5],[41],[10,15,13,9,12,8,7,11],[8],[],[10],[],[21,17],[14],[],[],[0,1],[17],[],[16,17],[20,16,18,17],[25,2,23],[],[26],[24,16],[],[23],[28,27,23],[23],[29,24,16],[],[3],[],[33,34],[35],[],[],[39,38,18,37],[],[40],[40],[],[20,43,42],[44,19],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Block Stmt ","Expression Stmt ","Method Declaration Throws ","STATIC","FINAL","Void Type ","Simple Name skipString ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Integer Literal Expr Note Zero  ","Simple Name iter ","Name Expr iter ","Name Expr dArr ","Name Expr end ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Primitive Type int ","Name Expr IterImplSkip ","Name Expr end ","Variable Declarator int end = ","Primitive Type int ","Method Call Expr ","Simple Name findStringEnd ","Block Stmt ","EQUALS","Unary Expr - ","Integer Literal Expr Note Zero  ","MINUS","IntegerLiteralExpr","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Assign Expr ASSIGN ","Array Access Expr d++ ","ASSIGN","Simple Name head "]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"skipUntilBreak-IterImpl-JsonIterator","callMethodNameReferTo":{},"num":64,"succs":[[1,2,8,29],[34,2],[39,38,3,31,9],[4,42],[50,5],[44,6,51,8],[54,7],[10,58,8],[32,2,41],[59],[15,13,17,16,12,11,14,19],[12],[],[14],[],[28,21],[18],[],[],[0,9],[24,21],[],[24,20,21],[24,22,21],[23,25,21],[30,33],[24,27],[24],[],[4,3],[20],[25,30],[30,31],[30,32],[30,35,36],[30],[37,20],[],[],[40,22],[],[],[45],[23,33],[43],[47,46,43],[43],[33,48],[23,49],[],[6,7],[53,52],[],[],[25,55,56],[24,57],[],[],[],[60,56,61],[26,62],[63,27],[],[]],"attribute":["For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","Method Declaration ","Array Access Expr c ","Expression Stmt ","Return Stmt ","Unary Expr ++ ","Expression Stmt ","Method Declaration Throws ","STATIC","FINAL","Void Type ","Simple Name skipUntilBreak ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Block Stmt ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Field Access Expr ","Name Expr eLen ","LESS","Field Access Expr ","Simple Name tail ","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name c ","Class Or Interface Type T ","Variable Declarator byte c = ","Name Expr left ","Array Access Expr i ","Field Access Expr ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplSkip ","Simple Name breaks ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Simple Name head ","ReturnStmt","Assign Expr ASSIGN ","Simple Name fillCache ","Field Access Expr ","Simple Name head ","Name Expr keys "]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"skipNumber-IterImpl-JsonIterator","callMethodNameReferTo":{},"num":99,"succs":[[35,1],[44,2,3,13],[3,49],[14,4,54,53,46],[57,5],[6,68],[7,69,70,71,9],[8,81],[85,13],[10,86],[11,13,87,62],[90,12],[13,93,38,16],[3,47,56],[15,94],[39,93,16],[20,21,19,25,22,18,17,23],[18],[],[20],[],[34,27],[24],[],[],[14,15,1,0],[30,27],[],[30,26,27],[30,27,28],[29,27,31],[45,48],[30,33],[30],[],[40],[37,38],[],[36],[36,38],[42,37,41],[37],[43],[],[4,5,9],[26],[45,31],[45,46],[45,47],[51,50,45],[45],[52,26],[],[],[28,55],[],[],[63],[29,48],[58],[59,58],[60,58],[61,58],[58,65,64],[58],[66,48],[67,29],[],[7,8],[72,70,73],[],[74,61,79],[59,74,75],[60,74,77],[],[76],[],[78],[],[80],[],[36,83,82],[],[84],[],[],[11,12],[88,89],[],[],[91,82,31],[30,92],[],[],[96,82,95],[97,32],[33,98],[],[]],"attribute":["Expression Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","If Stmt ","Binary Expr OR ","Expression Stmt ","Class Or Interface Type List ","If Stmt ","Array Access Expr c ","Expression Stmt ","Return Stmt ","Unary Expr ++ ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","STATIC","FINAL","Primitive Type boolean ","Simple Name skipNumber ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Name Expr dotFound ","Simple Name dotFound ","Name Expr dotFound ","Simple Name typeName ","Variable Declarator boolean dotFound = ","Primitive Type boolean ","Boolean Literal Expr false ","false","Block Stmt ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Simple Name nextToken ","Simple Name head ","LESS","Field Access Expr ","Simple Name tail ","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name c ","Name Expr c ","Name Expr c ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Name Expr type ","Array Access Expr i ","Field Access Expr ","Simple Name buf ","Block Stmt ","Binary Expr OR ","OR","Binary Expr EQUALS ","Binary Expr EQUALS ","Binary Expr EQUALS ","EQUALS","Char Literal Expr '.' ","'.'","Char Literal Expr 'e' ","'e'","Char Literal Expr 'E' ","'E'","Assign Expr ASSIGN ","ASSIGN","Boolean Literal Expr true ","true","continue;","Block Stmt ","Field Access Expr ","Name Expr IterImplSkip ","Simple Name breaks ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","ReturnStmt","Assign Expr ASSIGN ","Field Access Expr ","Field Access Expr ","Simple Name head ","Simple Name tail "]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"readSlice-IterImpl-JsonIterator","callMethodNameReferTo":{"35":"src/main/java/com/jsoniter/IterImpl.java?nextToken-IterImpl-JsonIterator","55":"src/main/java/com/jsoniter/IterImplString.java?findSliceEnd-IterImplString-JsonIterator"},"num":139,"succs":[[1,34],[36,3,2,35,37],[43,3],[48,4],[7,57,5],[6,58,51,7,59],[63],[8,9,10],[67,9],[10,78],[11,83,82],[15,19,12,21,17,18,14,13,16],[13],[14],[],[16],[],[23,33],[20],[],[],[3,0,4],[23,40],[],[1,23,22],[23,24],[23,25],[23,25],[27,23],[23,28],[29,23,31],[49,51,5,52],[26,30],[],[2],[39,41,38,22],[],[42],[],[],[],[104,105,102,18,103,14,13,106],[],[46,45,24,44],[],[47],[47],[],[53],[50,25],[],[49],[49,51,5],[49,54,55],[49],[50,25,56],[],[6],[],[60,61],[62],[],[],[26,65,66,64],[],[47],[47],[70,72,69,71,68],[27,73],[],[28,74],[29,75],[77,76,52],[],[],[],[],[62],[79,31,80],[30,81],[],[],[],[32,84],[],[86,112],[119,87],[88,120],[89,96,90,92,99,94],[96,90,92,99,121,94],[92,91,130],[131],[130,93,94],[132],[96,130,95],[133],[97,98,130],[134],[135],[100,130,101],[101,136],[122,41,82],[103],[],[111,40],[],[86,85],[40],[109,40,107],[110,108,40],[114,113],[],[115],[107],[110,113],[116,117,113],[113],[118,107],[],[88,87],[123],[114,108],[89,121],[124,125,121],[121],[127,126],[108,128],[114,129],[],[],[],[],[],[],[],[],[110,137,80],[138,109],[]],"attribute":["If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","PUBLIC","STATIC","FINAL","Class Or Interface Type Slice ","Simple Name readSlice ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Simple Name size ","Null Literal Expr ","Name Expr iter ","Void Type ","Name Expr end ","Void Type ","Class Or Interface Type JsonIterator ","Block Stmt ","Method Call Expr ","NOT_EQUALS","Char Literal Expr ''' ","Name Expr IterImpl ","Simple Name nextToken ","Simple Name iter ","Method Declaration Throws ","'''","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Simple Name end ","Name Expr IterImplString ","Primitive Type int ","Name Expr end ","Expression Stmt ","Primitive Type int ","Method Call Expr ","Simple Name findSliceEnd ","Block Stmt ","EQUALS","Unary Expr - ","Integer Literal Expr Note Zero  ","MINUS","IntegerLiteralExpr","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Field Access Expr ","Binary Expr MINUS ","Parameter IOException e ","Simple Name buf ","Simple Name head ","MINUS","Integer Literal Expr Note Zero  ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Simple Name head ","ReturnStmt","Field Access Expr ","Simple Name reusableSlice ","Expression Stmt ","For Stmt ","Expression Stmt ","Switch Stmt ","Name Expr c ","Name Expr valueType ","Char Literal Expr ' ' ","Switch Entry Stmt ","Char Literal Expr 'n' ","Switch Entry Stmt ","Char Literal Expr 'r' ","Switch Entry Stmt ","Char Literal Expr 't' ","Continue Stmt ","Switch Entry Stmt ","Expression Stmt ","Return Stmt ","Primitive Type byte ","Simple Name nextToken ","Parameter final JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Char Literal Expr 'r' ","Integer Literal Expr Note Zero  ","Name Expr i ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Field Access Expr ","Char Literal Expr 'n' ","Block Stmt ","Variable Declaration Expr ","Simple Name c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","POSTFIX_INCREMENT","SwitchEntryStmt","' '","'n'","'r'","'t'","continue;","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head "]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"nextToken-IterImpl-JsonIterator","callMethodNameReferTo":{},"num":62,"succs":[[1,33],[40,2],[3,41],[4,11,5,14,7,9],[11,5,14,7,42,9],[7,6,51],[52],[51,9,8],[53],[11,51,10],[54],[12,13,51],[55],[56],[15,51,16],[16,57],[43,17,61],[22,24,20,23,21,19,18,26],[19],[],[21],[],[32,28],[25],[],[],[1,0],[28],[],[30,28,27],[31,29,28],[35,34],[],[36],[27],[31,34],[37,38,34],[34],[39,27],[],[2,3],[44],[35,29],[4,42],[45,46,42],[42],[48,47],[29,49],[35,50],[],[],[],[],[],[],[],[],[31,58,59],[60,30],[],[],[]],"attribute":["Expression Stmt ","For Stmt ","Expression Stmt ","Switch Stmt ","Name Expr c ","Name Expr valueType ","Char Literal Expr ' ' ","Switch Entry Stmt ","Char Literal Expr 'n' ","Switch Entry Stmt ","Char Literal Expr 'r' ","Switch Entry Stmt ","Char Literal Expr 't' ","Continue Stmt ","Switch Entry Stmt ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","STATIC","FINAL","Primitive Type byte ","Simple Name nextToken ","Parameter final JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Char Literal Expr 'r' ","Integer Literal Expr Note Zero  ","Name Expr i ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Field Access Expr ","Char Literal Expr 'n' ","Block Stmt ","Variable Declaration Expr ","Simple Name c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","POSTFIX_INCREMENT","SwitchEntryStmt","' '","'n'","'r'","'t'","continue;","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Simple Name head ","ReturnStmt"]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"readByte-IterImpl-JsonIterator","callMethodNameReferTo":{},"num":23,"succs":[[9,7,5,4,6,2,1,3],[2],[],[4],[],[12,14],[8],[],[],[10],[16,15,0],[12],[],[12,11],[],[],[17,18],[19,11],[20,21],[],[22,13],[],[]],"attribute":["Method Declaration Throws ","STATIC","FINAL","Primitive Type byte ","Simple Name readByte ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","ReturnStmt","Array Access Expr iter.head++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Field Access Expr ","POSTFIX_INCREMENT","Simple Name head "]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"readAny-IterImpl-JsonIterator","callMethodNameReferTo":{"115":"src/main/java/com/jsoniter/any/Any.java?wrap-Any-int","148":"src/main/java/com/jsoniter/any/Any.java?lazyObject-Any-byte[]-int-int","166":"src/main/java/com/jsoniter/any/Any.java?lazyLong-Any-byte[]-int-int","136":"src/main/java/com/jsoniter/any/Any.java?lazyArray-Any-byte[]-int-int","106":"src/main/java/com/jsoniter/any/Any.java?wrap-Any-int","91":"src/main/java/com/jsoniter/any/Any.java?lazyString-Any-byte[]-int-int","124":"src/main/java/com/jsoniter/any/Any.java?wrap-Any-int","159":"src/main/java/com/jsoniter/any/Any.java?lazyDouble-Any-byte[]-int-int"},"num":551,"succs":[[65,1],[2,76],[8,20,28,12,3,24,16,4],[8,77,20,28,12,24,4,16],[84,5,6,7],[85],[86,7],[8,91,90,34],[11,84,10,9],[98],[99,11],[12,106,34,90],[14,84,15,13],[111],[112,15],[34,90,16,115],[17,18,84,19],[120],[121,19],[20,124,34,90],[21,84,22,23],[131],[132,23],[24,136,90,34],[27,84,26,25],[143],[27,144],[148,28,34,90],[29,84],[32,155,30],[32,59,31,156,158],[159,34,90],[33],[166,34,90],[35,39,37,40,38,43,36,41],[36],[190],[38],[],[64,45],[42],[],[],[0,2,1],[45],[],[44,45,82],[46,45,88],[45,47],[48,45],[49,102,45],[102,50,45],[51,102,45],[134,52,45],[53,45],[54,45],[146,45,55],[45,56],[57,45],[58,157,45],[59,45,30],[60,45,30],[59,45,30],[61,62,45,30],[],[72],[44],[66],[66,67],[68,66],[66,69],[66,69,70],[66,74,73],[66],[44,75],[],[78],[46],[77,80,79],[77],[83,46,81],[],[],[193,194,191,40,190,192,36,195],[],[],[87,89,47],[],[],[235,238,237,234,40,190,36,236],[],[95,94,67,92,93],[],[],[96,48],[97,49],[],[],[],[50,101,100,104],[],[105,103],[],[],[269,270,35,265,268,267,40,266,36],[],[107,108,109],[],[],[110],[],[],[51,113,114,104],[],[105,103],[118,117,116],[],[],[119],[],[],[123,52,104,122],[],[105,103],[125,126,127],[],[],[129,128],[],[130],[],[],[53,135,133],[],[],[308,307,40,309,190,36,310,306],[139,138,68,140,137],[],[],[54,141],[142,55],[],[],[],[145,147,56],[],[],[403,402,405,406,40,404,190,36],[152,150,149,69,151],[],[],[153,57],[154,58],[],[],[31],[],[],[483,484,486,40,482,190,36,485],[70,162,161,160,163],[],[],[60,164],[165,61],[],[],[169,168,71,167,170],[],[],[171,62],[172,63],[],[],[174,201],[208,175],[176,209],[177,184,178,180,187,182],[184,178,180,187,210,182],[180,179,84],[219],[84,181,182],[220],[184,84,183],[221],[185,186,84],[222],[223],[188,84,189],[189,224],[211,83,90],[],[192],[],[200,82],[],[174,173],[82],[198,82,196],[199,197,82],[203,202],[],[204],[196],[199,202],[205,206,202],[202],[207,196],[],[175,176],[212],[203,197],[177,210],[214,213,210],[210],[216,215],[197,217],[203,218],[],[],[],[],[],[],[],[199,225,226],[227,198],[],[],[244,229],[232,252,230],[253,254,231,232,247],[257],[233],[262],[235],[],[243,88],[],[228,229],[88],[239,88],[242,239,240,88],[247,245,230],[],[248],[246,239],[],[245],[250,249,245],[245],[251,246,239],[],[231],[],[255,256],[105],[],[260,259,240,258],[],[261],[261],[],[242,226,263],[264,241],[],[266],[],[102,273],[103,274],[],[275],[272,102],[103],[],[],[276],[272,277,278],[271,279],[],[],[281,322],[330,283,304,282],[283,336],[341,332,305,340,284],[285,286,292,296],[370,334,286,292,296],[288,290,84,287,291,289],[85],[343,289],[290,349],[291,351],[304,305,357],[295,294,84,293],[131],[295,358],[304,305,357],[298,84,297,303,299],[359],[360,299],[362,300],[253,363,301,326,303],[365,302],[135,90,303],[304,305,357],[283,333,218],[372],[307],[],[134,321],[],[281,305,280],[318,134],[318,134,311],[318,134,312],[318,134,315,313],[331,335,334],[314,88],[314,316],[319,314,317],[335],[318],[],[327],[326,324],[],[323,324],[325,324],[328,324,329],[324],[105],[284],[311],[331,319,335],[331,332,335],[331,333,335],[331,315,317],[331,338,337],[331],[311,339],[],[],[342,312],[],[344,345,226],[314,346],[315,348,347],[],[],[105],[350,89,316],[],[352,335,226],[353,355,354],[317,356],[],[105],[],[],[323,218],[],[325,361],[],[301,302],[364],[],[366,226,367],[318,368],[319,369,347],[],[105],[371,313],[],[374,373,320,375],[],[261],[261],[418,377],[379,426,378,400],[432,379],[401,428,340,436,380],[381,392,388,382],[460,392,388,430,382],[387,84,386,385,383,384],[85],[438,385],[386,443],[445,387],[401,357,400],[390,84,389,391],[143],[450,391],[401,357,400],[394,393,399,84,395],[451],[452,395],[453,396],[253,397,422,399,454],[398,455],[399,147,90],[401,357,400],[429,379,218],[462],[403],[],[146,417],[],[377,401,376],[414,146],[414,407,146],[414,408,146],[414,146,411,409],[427,430,431],[410,88],[412,410],[413,415,410],[431],[414],[],[423],[422,420],[],[420,419],[421,420],[420,424,425],[420],[105],[380],[407],[415,427,431],[428,427,431],[429,427,431],[413,427,411],[433,427,434],[427],[435,407],[],[437,408],[],[439,440,226],[410,441],[347,411,442],[],[105],[444,412,89],[],[446,431,226],[447,448,354],[413,449],[105],[],[218,419],[],[421,361],[398,397],[364],[457,456,226],[414,458],[459,415,347],[],[105],[461,409],[],[465,416,463,464],[],[261],[261],[495,467],[503,468,469,479],[469,508],[480,470,512,340,505],[514,471],[472,525],[473,526,527,528,475],[474,537],[223,479],[476,539],[477,479,540,519],[543,478],[479,90,158,498],[469,506,218],[481,546],[499,90,158],[483],[],[494,157],[],[480,481,467,466],[490,157],[490,487,157],[490,157,488],[489,157,491],[504,507],[490,493],[490],[],[500],[497,498],[],[496],[496,498],[502,497,501],[497],[119],[470,471,475],[487],[504,491],[504,505],[504,506],[510,509,504],[504],[511,487],[],[488,513],[],[520],[489,507],[515],[516,515],[517,515],[518,515],[515,522,521],[515],[523,507],[524,489],[],[473,474],[529,527,530],[],[253,518,535],[516,253,531],[517,253,533],[532],[],[534],[],[536],[],[496,538,226],[110],[477,478],[541,542],[],[],[544,226,491],[490,545],[],[548,226,547],[549,492],[493,550],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Switch Stmt ","Name Expr c ","Switch Entry Stmt ","Char Literal Expr ''' ","Expression Stmt ","Return Stmt ","Switch Entry Stmt ","Char Literal Expr 't' ","Expression Stmt ","Return Stmt ","Switch Entry Stmt ","Char Literal Expr 'f' ","Expression Stmt ","Return Stmt ","Switch Entry Stmt ","Char Literal Expr 'n' ","Expression Stmt ","Return Stmt ","Switch Entry Stmt ","Char Literal Expr '[' ","Expression Stmt ","Return Stmt ","Switch Entry Stmt ","Char Literal Expr '{' ","Expression Stmt ","Return Stmt ","Switch Entry Stmt ","If Stmt ","Method Call Expr ","Return Stmt ","Block Stmt ","Return Stmt ","Method Declaration Throws ","PUBLIC","STATIC","Class Or Interface Type Any ","Simple Name readAny ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Class Or Interface Type Class ","Name Expr start ","Name Expr start ","Name Expr start ","Name Expr start ","Name Expr start ","Variable Declarator int start = ","Primitive Type int ","Field Access Expr ","Simple Name head ","Variable Declaration Expr ","Simple Name c ","Variable Declarator byte c = ","Name Expr code ","Method Call Expr ","Simple Name nextToken ","Simple Name iter ","Method Declaration Throws ","SwitchEntryStmt","'''","Method Call Expr ","Simple Name skipString ","Simple Name iter ","Method Declaration Throws ","ReturnStmt","Method Call Expr ","Name Expr Any ","Simple Name lazyString ","Field Access Expr ","Field Access Expr ","Simple Name buf ","Simple Name head ","'t'","Method Call Expr ","Simple Name skipFixedBytes ","Integer Literal Expr Note Zero  ","Simple Name iter ","Simple Name n ","Method Declaration Throws ","IntegerLiteralExpr","Method Call Expr ","Name Expr sIx ","Simple Name wrap ","Boolean Literal Expr true ","true","'f'","Method Call Expr ","Array Access Expr sIx++ ","Integer Literal Expr Note Zero  ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Boolean Literal Expr false ","false","'n'","Method Call Expr ","Simple Name skipFixedBytes ","Integer Literal Expr Note Zero  ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Cast Expr ","Class Or Interface Type Object ","Null Literal Expr ","NullLiteralExpr","'['","Method Call Expr ","Simple Name skipArray ","Simple Name iter ","Method Declaration Throws ","Method Call Expr ","Name Expr Any ","Simple Name lazyArray ","Field Access Expr ","Field Access Expr ","Simple Name buf ","Simple Name head ","'{'","Method Call Expr ","Simple Name skipObject ","Simple Name iter ","Method Declaration Throws ","Method Call Expr ","Name Expr Any ","Simple Name lazyObject ","Field Access Expr ","Field Access Expr ","Simple Name buf ","Simple Name head ","Block Stmt ","Simple Name skipNumber ","Simple Name iter ","Method Declaration Throws ","Method Call Expr ","Name Expr Any ","Simple Name lazyDouble ","Field Access Expr ","Field Access Expr ","Simple Name buf ","Simple Name head ","Method Call Expr ","Name Expr Any ","Simple Name lazyLong ","Field Access Expr ","Field Access Expr ","Simple Name buf ","Simple Name head ","Expression Stmt ","For Stmt ","Expression Stmt ","Switch Stmt ","Name Expr c ","Name Expr valueType ","Char Literal Expr ' ' ","Switch Entry Stmt ","Char Literal Expr 'n' ","Switch Entry Stmt ","Char Literal Expr 'r' ","Switch Entry Stmt ","Char Literal Expr 't' ","Continue Stmt ","Switch Entry Stmt ","Expression Stmt ","Return Stmt ","FINAL","Primitive Type byte ","Simple Name nextToken ","Parameter final JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Char Literal Expr 'r' ","Integer Literal Expr Note Zero  ","Name Expr i ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Field Access Expr ","Char Literal Expr 'n' ","Block Stmt ","Variable Declaration Expr ","Simple Name c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","POSTFIX_INCREMENT","' '","'n'","'r'","'t'","continue;","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Simple Name head ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Block Stmt ","Expression Stmt ","Void Type ","Simple Name skipString ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Integer Literal Expr Note Zero  ","Name Expr iter ","Name Expr dArr ","Name Expr end ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Primitive Type int ","Name Expr IterImplSkip ","Name Expr end ","Variable Declarator int end = ","Primitive Type int ","Method Call Expr ","Simple Name findStringEnd ","Block Stmt ","EQUALS","Unary Expr - ","Integer Literal Expr Note Zero  ","MINUS","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Assign Expr ASSIGN ","Array Access Expr d++ ","Simple Name head ","Void Type ","Simple Name skipFixedBytes ","Parameter JsonIterator iter ","Parameter int n ","Class Or Interface Type IOException ","Block Stmt ","Primitive Type byte ","Name Expr n ","Class Or Interface Type JsonIterator ","Primitive Type int ","Expression Stmt ","Assign Expr PLUS ","Field Access Expr ","PLUS","Simple Name head ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Switch Stmt ","Array Access Expr i ","Switch Entry Stmt ","Char Literal Expr ''' ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Break Stmt ","Switch Entry Stmt ","Char Literal Expr '[' ","Expression Stmt ","Break Stmt ","Switch Entry Stmt ","Char Literal Expr ']' ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Break Stmt ","Unary Expr ++ ","Throw Stmt ","Char Literal Expr 't' ","Simple Name skipArray ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Char Literal Expr 'n' ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Name Expr level ","Simple Name level ","Name Expr level ","Primitive Type short ","Marker Annotation Expr @Override ","Primitive Type int ","Integer Literal Expr Note Zero  ","Block Stmt ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Parameter IOException e ","Primitive Type int ","Field Access Expr ","Simple Name head ","LESS","Field Access Expr ","Simple Name tail ","Assign Expr ASSIGN ","Field Access Expr ","Binary Expr PLUS ","Name Expr iter ","PLUS","Name Expr i ","Method Call Expr ","Simple Name skipString ","Assign Expr ASSIGN ","Binary Expr MINUS ","Field Access Expr ","MINUS","Integer Literal Expr Note Zero  ","Simple Name head ","break;","Name Expr decoder ","']'","Unary Expr -- ","POSTFIX_DECREMENT","Block Stmt ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Assign Expr ASSIGN ","Field Access Expr ","Binary Expr PLUS ","Simple Name head ","Integer Literal Expr Note Zero  ","Field Access Expr ","Simple Name buf ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Expression Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Switch Stmt ","Array Access Expr i ","Switch Entry Stmt ","Char Literal Expr ''' ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Break Stmt ","Switch Entry Stmt ","Char Literal Expr '{' ","Expression Stmt ","Break Stmt ","Switch Entry Stmt ","Char Literal Expr '}' ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Break Stmt ","Unary Expr ++ ","Throw Stmt ","Void Type ","Simple Name skipObject ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Name Expr level ","Simple Name level ","Name Expr level ","Name Expr level ","Variable Declarator int level = ","Primitive Type int ","Integer Literal Expr Note Zero  ","Block Stmt ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Field Access Expr ","Simple Name head ","Field Access Expr ","Simple Name tail ","Assign Expr ASSIGN ","Field Access Expr ","Binary Expr PLUS ","Simple Name head ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name skipString ","Assign Expr ASSIGN ","Binary Expr MINUS ","Field Access Expr ","Integer Literal Expr Note Zero  ","Simple Name head ","Unary Expr ++ ","'}'","Unary Expr -- ","Block Stmt ","Integer Literal Expr Zero  ","Assign Expr ASSIGN ","Field Access Expr ","Binary Expr PLUS ","Simple Name head ","Integer Literal Expr Note Zero  ","Field Access Expr ","Simple Name buf ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Expression Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","If Stmt ","Binary Expr OR ","Expression Stmt ","Class Or Interface Type List ","If Stmt ","Array Access Expr c ","Expression Stmt ","Return Stmt ","Unary Expr ++ ","Expression Stmt ","Return Stmt ","Primitive Type boolean ","Simple Name skipNumber ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Name Expr dotFound ","Simple Name dotFound ","Name Expr dotFound ","Simple Name typeName ","Variable Declarator boolean dotFound = ","Primitive Type boolean ","Boolean Literal Expr false ","Block Stmt ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Simple Name nextToken ","Simple Name head ","Field Access Expr ","Simple Name tail ","Variable Declaration Expr ","Simple Name c ","Name Expr c ","Name Expr c ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Name Expr type ","Array Access Expr i ","Field Access Expr ","Simple Name buf ","Block Stmt ","Binary Expr OR ","OR","Binary Expr EQUALS ","Binary Expr EQUALS ","Binary Expr EQUALS ","Char Literal Expr '.' ","'.'","Char Literal Expr 'e' ","'e'","Char Literal Expr 'E' ","'E'","Assign Expr ASSIGN ","Boolean Literal Expr true ","Block Stmt ","Field Access Expr ","Name Expr IterImplSkip ","Simple Name breaks ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Field Access Expr ","Field Access Expr ","Simple Name head ","Simple Name tail "]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"skipFixedBytes-IterImpl-JsonIterator-int","callMethodNameReferTo":{},"num":22,"succs":[[8,10,1,3,6,5,7,4,2],[2],[],[4],[],[15,13],[14,16],[9],[],[],[17],[13,12],[14],[],[],[],[],[18],[12,19,20],[11,21],[],[]],"attribute":["Method Declaration Throws ","PUBLIC","STATIC","Void Type ","Simple Name skipFixedBytes ","Parameter JsonIterator iter ","Parameter int n ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Primitive Type byte ","Name Expr n ","Simple Name iter ","Simple Name n ","Class Or Interface Type JsonIterator ","Primitive Type int ","Expression Stmt ","Assign Expr PLUS ","Field Access Expr ","PLUS","Simple Name head "]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"loadMore-IterImpl-JsonIterator","callMethodNameReferTo":{},"num":17,"succs":[[10,8,1,5,7,3,6,2,4],[2],[3],[],[5],[],[12,13],[9],[],[],[11],[0,14,15],[],[],[],[16],[]],"attribute":["Method Declaration Throws ","PUBLIC","STATIC","FINAL","Primitive Type boolean ","Simple Name loadMore ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","Class Or Interface Type JsonIterator ","Simple Name iter ","ReturnStmt","Boolean Literal Expr false ","false"]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"readStringSlowPath-IterImpl-JsonIterator-int","callMethodNameReferTo":{"293":"src/main/java/com/jsoniter/IterImplString.java?translateHex-IterImplString-byte","309":"src/main/java/com/jsoniter/IterImplString.java?translateHex-IterImplString-byte","299":"src/main/java/com/jsoniter/IterImplString.java?translateHex-IterImplString-byte","317":"src/main/java/com/jsoniter/IterImplString.java?translateHex-IterImplString-byte"},"num":630,"succs":[[1,176,109,175],[177,2],[3,4,185],[4,197],[187,202,201,108,5],[6,204],[7,248],[10,206,249,250,8],[9,252],[10,111,165,256],[66,257,11],[249,66,258,207,12],[13,260],[31,42,37,15,27,19,23,64,14,39,35],[31,42,37,15,27,19,23,64,208,11,39,35],[18,17,16,265],[266],[267,18],[84,108,270],[20,265,22,21],[271],[272,22],[84,108,270],[24,265,26,25],[275],[276,26],[84,108,270],[29,30,265,28],[279],[30,280],[84,108,270],[32,34,265,33],[283],[34,284],[84,108,270],[37,265,36],[251],[265,38,39],[287],[40,265,41],[259],[84,108,270],[43,265,44,45,63],[288],[45,289],[52,329,46],[52,47,331,332,333],[335,50,48],[49,178,50],[336,63],[51],[63,340],[53,59,343],[59,54,330,345,344],[57,55,347],[57,56,178,180],[348,63],[58],[350,63],[60],[353,61],[178,55,179,63,62],[354,63],[84,108,270],[265,65],[84,357],[362,67],[364,68,363,365,102],[370,69],[72,378,70],[380,249,72,71,379],[84,383],[73,74],[394,74],[75,77,402],[249,403,404,77,76],[84,407],[79,84,78],[79,425],[433,80,82],[249,81,434,82,435],[84,438],[83],[84,463],[467,85],[86,238,469,468,102],[470,87],[468,239,88,471],[89,476],[483,90],[249,484,91,167,94],[92,488],[503,93],[514,94],[517,95],[531,96],[249,532,97,169,100],[98,536],[550,99],[561,100],[101,564],[577,4],[103,578],[249,171,107,104,579],[105,583],[106,598],[107,609],[4,612],[619],[110,624,625],[626],[118,120,116,112,122,115,119,114,113,117],[113],[114],[],[116],[],[173,124],[174,166],[121],[],[],[0],[161,124],[],[161,124,123],[161,125,124],[128,161,124,126],[188,186],[127],[127,129],[127,130],[127,131],[127,132],[127,133],[127],[127,135],[127,136],[127,137],[127,138],[127,139],[140,127,90],[127,141,90],[127,142,90],[127,143,145,90],[489,490],[144,147],[477],[146],[96,146,148],[149,96,146],[150,146,96],[151,146,96,153],[537,538],[152,136,155,134,135],[477,147],[154],[103,154,156],[103,154,157],[103,154,158],[103,154,159],[162,160,154],[240,205],[161],[161,163],[172,166],[],[172,165,166],[167,172,147,166],[168],[168,155,169,165],[170],[162,170,171],[],[],[1,108,2],[623,109],[181],[61],[178,48],[55,178],[182,178,183],[178],[184],[],[10,6,107,102,5],[123],[196,186],[187,186],[128,186],[189,186],[190,186],[191,186],[192,186],[128,186],[194,186],[193,195,194,186],[198,199,186],[186],[200,123],[],[],[125,203],[],[241],[188,126],[205],[206,205],[189,129,205,207,11],[208,14,11],[209,11],[210,11],[211,11],[212,11],[213,132,216,217,130,191,218,215,133,192,131,193,190,11],[],[],[],[],[214,11],[214,46,219,11],[214,220,11],[205,11,207],[205,222,67,11],[225,226,70,205,11,67],[70,223,205,11,67],[371],[70,205,223,11,67],[230,75,231,70,205,11,67,229],[227,75,70,205,67,11],[371],[395],[227,233,75,70,205,67,11],[234,75,70,237,235,236,205,80,67,11],[232,75,70,205,80,11,67],[371],[395],[426],[232,75,70,205,11,67],[238,75,70,205,85,11,67],[228,75,221,224,239,70,205,11,67,85],[242,205,243],[205],[245,244],[126,246],[188,247],[],[],[9,8],[],[251],[],[253,128,254],[127,255],[],[],[],[13,12],[259],[],[261,208,254],[263,262],[264,129],[189,247],[],[],[],[209,254,268],[269],[],[],[],[273,210,254],[274],[],[],[211,254,277],[278],[],[],[212,254,281],[282],[],[],[285,213,254],[286],[],[],[],[290,214,254],[293,291,292],[294,292,295],[],[218,324,325],[297,296,292],[316],[298],[308],[299,301,300],[302,215,303],[],[307],[],[305,304],[306,130],[190,247],[],[],[310,309,300],[216,311,312],[307],[],[314,313],[315,131],[191,247],[],[318,317,300],[320,217,319],[307],[],[322,321],[323,132],[192,247],[],[],[327,326],[328,133],[193,247],[],[47],[46],[],[],[334,219],[],[49],[337,338],[],[339],[],[341,179,254],[342],[],[54],[],[220,346],[],[56],[349,254,180],[184],[351,352],[],[339],[62],[356,355],[],[339],[360,359,134,358],[],[339],[292,221,361],[339],[68,69],[366],[],[369],[367,222,368],[],[307],[],[114,372],[230,226,135,235,194],[374,373,371],[371],[376,375],[135,377],[194,247],[],[71],[381],[307],[367,382,223],[307],[224,384,254],[386,385,292],[387],[392],[389,300,388],[390],[307],[391,367,225],[307],[367,226,393],[307],[396,114],[136,231,195,236],[395,398,397],[395],[399,400],[136,401],[195,247],[],[76],[405],[307],[367,227,406],[307],[408,228,254],[409,410,292],[292,412,411],[423],[413],[418],[414,415,300],[416],[307],[367,417,229],[307],[420,419,300],[421],[307],[367,230,422],[307],[367,424,231],[307],[427,114],[196,237,137],[428,429,426],[426],[430,431],[432,137],[196,247],[],[81],[436],[307],[367,232,437],[307],[233,254,439],[440,292,441],[442,292,443],[461],[445,292,444],[456],[446],[451],[448,447,300],[449],[307],[367,234,450],[307],[452,453,300],[454],[307],[367,455,235],[307],[457,458,300],[459],[307],[367,460,236],[307],[367,462,237],[307],[138,466,465,464],[],[339],[339],[101,89,86,95,94,88,100],[],[307],[472],[307],[475,473,139,474],[],[339],[339],[478,114],[240],[477,480,479],[477],[240,481,482],[],[307],[92,91,93],[485,486],[140,487],[],[],[491],[141],[489],[493,489,492],[489],[495,494],[],[],[499,497,498],[501,500],[],[307],[502,141],[],[],[509,505,508,507,504,506,490],[],[],[142,510],[369],[369],[512,511],[],[143,513],[],[],[515,254,145],[516,144],[],[519,518,254],[520,521],[524,523],[146,522],[168,247],[],[],[525],[527,292,526],[528],[307],[530,529,147],[],[307],[98,99,97],[533,534],[535,148],[],[],[539],[149],[537],[537,541,540],[537],[543,542],[],[],[545,546,498],[547,548],[307],[549,149],[],[],[555,553,554,552,551,556,538],[],[],[150,557],[369],[369],[559,558],[],[560,151],[],[],[562,153,254],[563,152],[],[565,566,254],[568,567],[570,571],[569,154],[170,247],[],[],[572],[574,573,292],[575],[307],[367,576,155],[307],[],[104,105,106],[580,581],[156,582],[],[],[587],[157],[584],[584,585],[584,588,589],[584],[590,591],[],[],[594,498,593],[596,595],[307],[597,157],[],[],[600,602,603,601,585,604,599],[],[],[158,605],[369],[369],[607,606],[],[608,159],[],[],[610,586,254],[160,611],[],[613,614,254],[616,615],[162,618],[161,617],[172,247],[],[],[620,621,163,622],[],[339],[339],[110],[],[],[628,164,627,629],[],[339],[339]],"attribute":["Try Stmt ","Expression Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Switch Stmt ","Name Expr bc ","Switch Entry Stmt ","Char Literal Expr 'b' ","Expression Stmt ","Break Stmt ","Switch Entry Stmt ","Char Literal Expr 't' ","Expression Stmt ","Break Stmt ","Switch Entry Stmt ","Char Literal Expr 'n' ","Expression Stmt ","Break Stmt ","Switch Entry Stmt ","Char Literal Expr 'f' ","Expression Stmt ","Break Stmt ","Switch Entry Stmt ","Char Literal Expr 'r' ","Expression Stmt ","Break Stmt ","Switch Entry Stmt ","Char Literal Expr ''' ","Switch Entry Stmt ","Char Literal Expr '/' ","Switch Entry Stmt ","Char Literal Expr '' ","Break Stmt ","Switch Entry Stmt ","Char Literal Expr 'u' ","Expression Stmt ","If Stmt ","Method Call Expr ","If Stmt ","Name Expr isExpectingLowSurrogate ","Throw Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","If Stmt ","Name Expr isExpectingLowSurrogate ","Expression Stmt ","Block Stmt ","Throw Stmt ","Block Stmt ","If Stmt ","Name Expr isExpectingLowSurrogate ","Throw Stmt ","Break Stmt ","Switch Entry Stmt ","Throw Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Block Stmt ","Throw Stmt ","If Stmt ","Binary Expr GREATER_EQUALS ","If Stmt ","Binary Expr GREATER_EQUALS ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Continue Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Parameter IndexOutOfBoundsException e ","Throw Stmt ","Method Declaration Throws ","PUBLIC","STATIC","FINAL","Primitive Type int ","Simple Name readStringSlowPath ","Parameter JsonIterator iter ","Parameter int j ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr head ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr newBuf ","Name Expr iter ","Name Expr sup ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr newBuf ","Name Expr iter ","Name Expr sup ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr bc ","Name Expr iter ","Name Expr iter ","Name Expr j ","Simple Name j ","Name Expr j ","Name Expr j ","Name Expr j ","Name Expr j ","Name Expr j ","Name Expr j ","Class Or Interface Type JsonIterator ","Primitive Type int ","Block Stmt ","Catch Clause ","Variable Declaration Expr ","Simple Name isExpectingLowSurrogate ","Name Expr isExpectingLowSurrogate ","Name Expr isExpectingLowSurrogate ","Variable Declarator boolean isExpectingLowSurrogate = ","Primitive Type boolean ","Boolean Literal Expr false ","false","Block Stmt ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Field Access Expr ","Simple Name head ","LESS","Field Access Expr ","Simple Name tail ","Variable Declaration Expr ","Simple Name bc ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Name Expr IterImplString ","Name Expr IterImplString ","Name Expr IterImplString ","Name Expr IterImplString ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Name Expr u2 ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Name Expr u2 ","Name Expr u3 ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Name Expr u2 ","Name Expr u3 ","Name Expr u4 ","Name Expr bc ","Name Expr bc ","Name Expr bc ","Variable Declarator int bc = ","Primitive Type int ","Array Access Expr i++ ","Simple Name toString ","Unary Expr ++ ","Simple Name buf ","POSTFIX_INCREMENT","Block Stmt ","EQUALS","Simple Name key ","'''","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Simple Name head ","ReturnStmt","Block Stmt ","Char Literal Expr '' ","''","Assign Expr ASSIGN ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","SwitchEntryStmt","'b'","Assign Expr ASSIGN ","Char Literal Expr 'b' ","'b'","break;","'t'","Assign Expr ASSIGN ","Char Literal Expr 't' ","'t'","'n'","Assign Expr ASSIGN ","Char Literal Expr 'n' ","'n'","'f'","Assign Expr ASSIGN ","Char Literal Expr 'f' ","'f'","'r'","Assign Expr ASSIGN ","Char Literal Expr 'r' ","'r'","'/'","'u'","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Method Call Expr ","Binary Expr PLUS ","Enclosed Expr ","Enclosed Expr ","Enclosed Expr ","Binary Expr LEFT_SHIFT ","Method Call Expr ","LEFT_SHIFT","Integer Literal Expr Note Zero  ","Simple Name translateHex ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","IntegerLiteralExpr","Binary Expr LEFT_SHIFT ","Method Call Expr ","Integer Literal Expr Note Zero  ","Simple Name translateHex ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Binary Expr LEFT_SHIFT ","Method Call Expr ","Integer Literal Expr Note Zero  ","Simple Name translateHex ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Simple Name translateHex ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Name Expr Character ","Name Expr Character ","Simple Name isHighSurrogate ","Cast Expr ","Primitive Type char ","Block Stmt ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","String Literal Expr Not Empty  ","StringLiteralExpr","Assign Expr ASSIGN ","Boolean Literal Expr true ","true","Block Stmt ","Simple Name isLowSurrogate ","Cast Expr ","Primitive Type char ","Block Stmt ","Assign Expr ASSIGN ","Boolean Literal Expr false ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","String Literal Expr Not Empty  ","Block Stmt ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Block Stmt ","Enclosed Expr ","NOT_EQUALS","Integer Literal Expr Zero  ","Binary Expr BINARY_AND ","BINARY_AND","Integer Literal Expr Note Zero  ","Zero IntegerLiteralExpr","Variable Declaration Expr [FINAL] ","Simple Name u2 ","Variable Declarator int u2 = ","Primitive Type int ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Enclosed Expr ","Integer Literal Expr Note Zero  ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Assign Expr ASSIGN ","Binary Expr PLUS ","Enclosed Expr ","Enclosed Expr ","Binary Expr LEFT_SHIFT ","Enclosed Expr ","Integer Literal Expr Note Zero  ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Variable Declaration Expr [FINAL] ","Simple Name u3 ","Variable Declarator int u3 = ","Primitive Type int ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Enclosed Expr ","Integer Literal Expr Note Zero  ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Enclosed Expr ","Enclosed Expr ","Enclosed Expr ","Binary Expr LEFT_SHIFT ","Enclosed Expr ","Integer Literal Expr Note Zero  ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Binary Expr LEFT_SHIFT ","Enclosed Expr ","Integer Literal Expr Note Zero  ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Variable Declaration Expr [FINAL] ","Simple Name u4 ","Variable Declarator int u4 = ","Primitive Type int ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Enclosed Expr ","Integer Literal Expr Note Zero  ","Binary Expr BINARY_AND ","Simple Name next ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Enclosed Expr ","Binary Expr PLUS ","Enclosed Expr ","Enclosed Expr ","Enclosed Expr ","Binary Expr LEFT_SHIFT ","Enclosed Expr ","Integer Literal Expr Note Zero  ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Binary Expr LEFT_SHIFT ","Enclosed Expr ","Integer Literal Expr Note Zero  ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Binary Expr LEFT_SHIFT ","Enclosed Expr ","Integer Literal Expr Note Zero  ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Block Stmt ","GREATER_EQUALS","Integer Literal Expr Note Zero  ","Throw Stmt ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Variable Declaration Expr [FINAL] ","Simple Name sup ","Variable Declarator int sup = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","Block Stmt ","Field Access Expr ","Field Access Expr ","Simple Name length ","Simple Name reusableChars ","Variable Declaration Expr ","Simple Name newBuf ","Name Expr newBuf ","Variable Declarator char[] newBuf = ","Array Type 1 ","Array Creation Expr char Array Creation Level Not Empty ","Primitive Type char ","Array Creation Level Dimension NotEmpty ","Binary Expr MULTIPLY ","Field Access Expr ","MULTIPLY","Integer Literal Expr Note Zero  ","Field Access Expr ","Simple Name length ","Simple Name reusableChars ","Method Call Expr ","Name Expr System ","Simple Name arraycopy ","Field Access Expr ","Integer Literal Expr Zero  ","Integer Literal Expr Zero  ","Field Access Expr ","Simple Name reusableChars ","Field Access Expr ","Simple Name length ","Simple Name reusableChars ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name reusableChars ","Assign Expr ASSIGN ","Array Access Expr j++ ","Cast Expr ","Field Access Expr ","Unary Expr ++ ","Simple Name reusableChars ","Primitive Type char ","Enclosed Expr ","Binary Expr PLUS ","Enclosed Expr ","Integer Literal Expr Note Zero  ","Binary Expr UNSIGNED_RIGHT_SHIFT ","UNSIGNED_RIGHT_SHIFT","Integer Literal Expr Note Zero  ","Block Stmt ","Field Access Expr ","Field Access Expr ","Simple Name length ","Simple Name reusableChars ","Variable Declaration Expr ","Simple Name newBuf ","Name Expr newBuf ","Variable Declarator char[] newBuf = ","Array Type 1 ","Array Creation Expr char Array Creation Level Not Empty ","Primitive Type char ","Array Creation Level Dimension NotEmpty ","Binary Expr MULTIPLY ","Field Access Expr ","Integer Literal Expr Note Zero  ","Field Access Expr ","Simple Name length ","Simple Name reusableChars ","Method Call Expr ","Name Expr System ","Simple Name arraycopy ","Field Access Expr ","Integer Literal Expr Zero  ","Integer Literal Expr Zero  ","Field Access Expr ","Simple Name reusableChars ","Field Access Expr ","Simple Name length ","Simple Name reusableChars ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name reusableChars ","Assign Expr ASSIGN ","Array Access Expr j++ ","Cast Expr ","Field Access Expr ","Unary Expr ++ ","Simple Name reusableChars ","Primitive Type char ","Enclosed Expr ","Binary Expr PLUS ","Enclosed Expr ","Integer Literal Expr Note Zero  ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","continue;","Block Stmt ","Field Access Expr ","Field Access Expr ","Simple Name length ","Simple Name reusableChars ","Variable Declaration Expr ","Simple Name newBuf ","Name Expr newBuf ","Simple Name format ","Variable Declarator char[] newBuf = ","Array Type 1 ","Array Creation Expr char Array Creation Level Not Empty ","Primitive Type char ","Array Creation Level Dimension NotEmpty ","Binary Expr MULTIPLY ","Field Access Expr ","Integer Literal Expr Note Zero  ","Field Access Expr ","Simple Name length ","Simple Name reusableChars ","Method Call Expr ","Name Expr System ","Simple Name arraycopy ","Field Access Expr ","Integer Literal Expr Zero  ","Integer Literal Expr Zero  ","Field Access Expr ","Simple Name reusableChars ","Field Access Expr ","Simple Name length ","Simple Name reusableChars ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name reusableChars ","Assign Expr ASSIGN ","Array Access Expr j++ ","Cast Expr ","Field Access Expr ","Unary Expr ++ ","Simple Name reusableChars ","Primitive Type char ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  "]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"updateStringCopyBound-IterImpl-JsonIterator-int","callMethodNameReferTo":{},"num":15,"succs":[[5,3,1,6,4,2,7],[2],[],[4],[],[12,11],[10,13],[8],[9,0,14],[10],[],[],[],[],[]],"attribute":["Method Declaration ","PUBLIC","STATIC","Primitive Type int ","Simple Name updateStringCopyBound ","Parameter final JsonIterator iter ","Parameter final int bound ","Block Stmt ","Return Stmt ","Name Expr bound ","Simple Name bound ","Class Or Interface Type JsonIterator ","Simple Name iter ","Primitive Type int ","ReturnStmt"]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"readInt-IterImpl-JsonIterator-byte","callMethodNameReferTo":{"471":"src/main/java/com/jsoniter/IterImplForStreaming.java?readIntSlowPath-IterImplForStreaming-JsonIterator-int","169":"src/main/java/com/jsoniter/IterImplForStreaming.java?assertNotLeadingZero-IterImplForStreaming-JsonIterator"},"num":474,"succs":[[104,1],[165,2],[166,5,167,3,107],[4,169],[173,5,59,172],[174,6],[166,175,7,108,8],[178,8],[9,183],[186,58,185,184,10],[11,193],[208,12],[13,220],[221,14,166,16,211],[224,15],[228,59,16,172],[17,230],[18,244],[22,166,233,245,19],[248,20],[21,251],[22,59,257,172],[258,23],[271,24],[28,272,166,25,261],[26,275],[278,27],[28,59,285,172],[29,286],[299,30],[289,166,300,34,31],[32,303],[306,33],[59,34,316,172],[35,317],[36,330],[166,37,40,331,320],[38,334],[39,337],[59,40,350,172],[351,41],[364,42],[43,166,46,365,354],[368,44],[371,45],[46,59,387,172],[47,388],[48,401],[166,391,49,52,402],[405,50],[51,408],[427,59,52,172],[53,428],[54,441],[463,55],[466,56],[467,431,166,57,58],[58,59,172,470],[59,172,471],[62,67,64,66,61,69,65,60,63],[61],[],[63],[],[102,71],[103,101],[68],[],[],[1,5,58,0,8],[71],[],[71,70],[71,72],[71,73],[9,74,71],[9,75,71],[9,71,78,76],[195,194],[9,77],[9,79,77,81],[196,194],[9,80],[9,84,82,80],[197,194],[9,83],[9,83,85,87],[198,194],[9,86],[9,86,90,88],[194,199],[9,89],[9,91,89,93],[200,194],[92,9],[9,92,96,94],[201,194],[9,95],[9,95,97],[95,98],[101],[],[],[],[160],[100,106],[],[105],[105,107],[105,108],[112,111,105],[105,109],[209,211],[110],[116,110,117,115],[113,110],[209,112],[233,231],[114],[122,114,120,121,123],[114,118],[116,209],[117,231],[259,261],[119],[130,128,126,129,127,119],[124,119],[209,121],[122,231],[123,259],[289,287],[125],[134,135,136,125,138,137,133],[131,125],[209,127],[128,231],[129,259],[130,287],[318,320],[132],[147,146,143,141,142,145,144,132],[139,132],[134,209],[135,231],[136,259],[287,137],[318,138],[352,354],[140],[157,153,150,140,154,152,155,156,151],[148,140],[209,142],[143,231],[144,259],[287,145],[146,318],[147,352],[391,389],[149],[149,158],[161,105,162],[105],[100,163],[164,106],[],[4,3],[],[168],[],[171,70,170],[],[],[],[168],[7],[177,176],[],[],[180,179,72,181],[],[182],[182],[],[53,46,29,55,10,41,12,22,28,54,17,40,47,23,16,34,11,35,52],[187,188,189],[],[192],[190,73],[],[74,191],[],[],[],[204],[75],[194],[78,194],[81,194],[84,194],[194,87],[90,194],[194,93],[96,194],[202,194],[206,194,205],[194],[75,207],[],[212],[210,195,76],[],[209],[209,214,213],[209],[216,215],[210,217],[195,218],[],[219,76],[],[14,15],[223,222],[],[],[225,78,226],[227,77],[],[],[109,229],[],[234],[196,79,232],[],[231],[235,236,231],[231],[238,237],[232,239],[240,241],[],[79,242],[243,196],[],[],[19,20,21],[246,247],[],[],[81,226,249],[250,80],[],[110,252,226],[112,253,254],[256,111,255],[],[],[192],[113,229],[262],[197,82,260],[],[259],[264,263,259],[259],[265,266],[267,260],[269,268],[],[270,82],[197,243],[],[25,26,27],[273,274],[],[],[276,84,226],[83,277],[],[114,226,279],[117,254,280],[282,254,281],[283,255,115],[116,284,255],[192],[192],[118,229],[290],[85,198,288],[],[287],[292,291,287],[287],[293,294],[295,288],[297,296],[],[298,85],[243,198],[],[32,33,31],[302,301],[],[],[226,87,304],[305,86],[],[307,226,119],[123,254,308],[310,309,254],[254,311,312],[122,315,255],[120,255,313],[121,314,255],[192],[192],[192],[124,229],[321],[319,199,88],[],[318],[323,322,318],[318],[325,324],[319,326],[328,327],[],[88,329],[243,199],[],[39,38,37],[332,333],[],[],[335,90,226],[336,89],[],[338,125,226],[130,254,339],[340,341,254],[342,254,343],[349,129,255],[345,344,254],[348,128,255],[126,346,255],[347,127,255],[192],[192],[192],[192],[131,229],[355],[353,91,200],[],[352],[352,357,356],[352],[359,358],[353,360],[362,361],[],[91,363],[243,200],[],[43,45,44],[366,367],[],[],[369,226,93],[92,370],[],[372,226,132],[254,373,138],[254,375,374],[376,254,377],[386,137,255],[378,254,379],[136,385,255],[254,381,380],[135,384,255],[255,133,382],[134,383,255],[192],[192],[192],[192],[192],[139,229],[392],[201,94,390],[],[389],[389,394,393],[389],[396,395],[397,390],[398,399],[],[94,400],[201,243],[],[51,50,49],[403,404],[],[],[406,96,226],[407,95],[],[409,140,226],[147,254,410],[254,411,412],[414,413,254],[146,426,255],[415,254,416],[425,145,255],[418,254,417],[424,144,255],[420,419,254],[143,255,423],[421,141,255],[422,142,255],[192],[192],[192],[192],[192],[192],[148,229],[432],[202,430,97],[],[429],[433,434,429],[429],[435,436],[437,430],[438,439],[],[440,97],[202,243],[],[442,149,226],[157,254,443],[444,445,254],[254,447,446],[462,156,255],[448,449,254],[461,155,255],[254,451,450],[460,154,255],[453,254,452],[153,459,255],[455,454,254],[458,152,255],[150,456,255],[457,255,151],[192],[192],[192],[192],[192],[192],[192],[203,464,226],[465,98],[],[57],[469,468],[],[],[229,158],[99,159,473,472],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Return Stmt ","Method Declaration Throws ","STATIC","FINAL","Primitive Type int ","Simple Name readInt ","Parameter final JsonIterator iter ","Parameter final byte c ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr next ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr c ","Simple Name c ","Class Or Interface Type JsonIterator ","Primitive Type byte ","Variable Declaration Expr ","Simple Name ind ","Name Expr IterImplNumber ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind5 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind5 ","Name Expr ind6 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind5 ","Name Expr ind6 ","Name Expr ind7 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind5 ","Name Expr ind6 ","Name Expr ind7 ","Name Expr ind8 ","Name Expr ind ","Name Expr ind ","Variable Declarator int ind = ","Primitive Type int ","Array Access Expr c ","Field Access Expr ","Simple Name intDigits ","Block Stmt ","EQUALS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name assertNotLeadingZero ","ReturnStmt","Integer Literal Expr Zero  ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Block Stmt ","Binary Expr MINUS ","GREATER","Integer Literal Expr Note Zero  ","Field Access Expr ","MINUS","Field Access Expr ","Simple Name tail ","Simple Name head ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Field Access Expr ","Simple Name head ","Variable Declaration Expr ","Simple Name ind2 ","Name Expr IterImplNumber ","Name Expr ind2 ","Variable Declarator int ind2 = ","Primitive Type int ","Array Access Expr iter.buf[i] ","Field Access Expr ","Array Access Expr i ","Simple Name intDigits ","Field Access Expr ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Continue Stmt ","ASSIGN","Simple Name head ","Unary Expr - ","MINUS","Variable Declaration Expr ","Simple Name ind3 ","Name Expr IterImplNumber ","Class Or Interface Type Byte ","Variable Declarator int ind3 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","PREFIX_INCREMENT","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr MULTIPLY ","PLUS","MULTIPLY","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind4 ","Name Expr IterImplNumber ","Name Expr ind4 ","Variable Declarator int ind4 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind5 ","Name Expr IterImplNumber ","Name Expr ind5 ","Variable Declarator int ind5 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind6 ","Name Expr IterImplNumber ","Name Expr ind6 ","Variable Declarator int ind6 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind7 ","Name Expr IterImplNumber ","Name Expr ind7 ","Variable Declarator int ind7 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind8 ","Name Expr IterImplNumber ","Name Expr ind8 ","Variable Declarator int ind8 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind9 ","Name Expr IterImplNumber ","Name Expr ind9 ","Variable Declarator int ind9 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Unary Expr - ","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name readIntSlowPath "]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"readLong-IterImpl-JsonIterator-byte","callMethodNameReferTo":{"471":"src/main/java/com/jsoniter/IterImplForStreaming.java?readLongSlowPath-IterImplForStreaming-JsonIterator-long","169":"src/main/java/com/jsoniter/IterImplForStreaming.java?assertNotLeadingZero-IterImplForStreaming-JsonIterator"},"num":474,"succs":[[104,1],[2,165],[166,3,107,167,5],[4,169],[59,173,172,5],[174,6],[8,166,175,108,7],[8,178],[183,9],[10,58,185,184,186],[193,11],[12,208],[220,13],[221,166,14,211,16],[15,224],[228,59,16,172],[230,17],[244,18],[166,233,19,22,245],[20,248],[21,251],[59,257,22,172],[258,23],[24,271],[166,261,272,28,25],[275,26],[278,27],[59,285,172,28],[29,286],[30,299],[166,300,34,31,289],[32,303],[33,306],[59,34,316,172],[35,317],[36,330],[40,166,37,331,320],[38,334],[39,337],[59,40,350,172],[351,41],[364,42],[166,354,365,43,46],[368,44],[371,45],[59,387,46,172],[47,388],[48,401],[166,49,402,52,391],[405,50],[408,51],[59,52,172,427],[428,53],[441,54],[55,463],[466,56],[166,58,467,57,431],[59,58,470,172],[59,471,172],[64,63,67,65,62,69,66,61,60],[61],[],[63],[],[102,71],[101,103],[68],[],[],[8,0,1,58,5],[71],[],[70,71],[71,72],[71,73],[74,71,9],[71,9,75],[76,71,9,78],[194,195],[77,9],[77,79,81,9],[196,194],[80,9],[80,84,9,82],[197,194],[83,9],[83,85,87,9],[198,194],[86,9],[86,88,90,9],[199,194],[9,89],[91,93,9,89],[200,194],[9,92],[94,96,9,92],[201,194],[95,9],[95,9,97],[95,98],[101],[],[],[],[160],[100,106],[],[105],[107,105],[108,105],[111,112,105],[109,105],[211,209],[110],[116,117,115,110],[113,110],[209,112],[233,231],[114],[121,123,114,120,122],[114,118],[116,209],[117,231],[261,259],[119],[119,129,128,130,126,127],[124,119],[121,209],[231,122],[123,259],[289,287],[125],[136,137,133,135,125,138,134],[131,125],[209,127],[231,128],[259,129],[130,287],[318,320],[132],[147,144,132,142,141,145,143,146],[132,139],[209,134],[135,231],[136,259],[137,287],[138,318],[354,352],[140],[156,157,152,154,155,151,140,153,150],[148,140],[142,209],[231,143],[144,259],[145,287],[318,146],[147,352],[389,391],[149],[149,158],[162,161,105],[105],[163,100],[164,106],[],[4,3],[],[168],[],[170,70,171],[],[],[],[168],[7],[177,176],[],[],[179,180,72,181],[],[182],[182],[],[10,29,35,55,40,52,12,46,16,41,54,28,53,23,47,34,22,17,11],[187,189,188],[],[192],[190,73],[],[74,191],[],[],[],[204],[75],[194],[78,194],[81,194],[84,194],[87,194],[90,194],[93,194],[96,194],[202,194],[206,194,205],[194],[207,75],[],[212],[76,210,195],[],[209],[213,209,214],[209],[216,215],[210,217],[218,195],[],[219,76],[],[14,15],[222,223],[],[],[78,226,225],[227,77],[],[],[109,229],[],[234],[196,232,79],[],[231],[235,231,236],[231],[238,237],[232,239],[241,240],[],[242,79],[196,243],[],[],[21,20,19],[246,247],[],[],[81,226,249],[80,250],[],[252,110,226],[254,253,112],[256,111,255],[],[],[192],[113,229],[262],[197,260,82],[],[259],[264,263,259],[259],[265,266],[260,267],[268,269],[],[82,270],[197,243],[],[26,25,27],[274,273],[],[],[84,276,226],[83,277],[],[114,279,226],[117,280,254],[282,254,281],[283,255,115],[284,116,255],[192],[192],[118,229],[290],[288,198,85],[],[287],[291,287,292],[287],[293,294],[288,295],[296,297],[],[298,85],[198,243],[],[33,31,32],[302,301],[],[],[304,87,226],[86,305],[],[119,226,307],[123,308,254],[254,310,309],[254,312,311],[315,122,255],[120,313,255],[121,255,314],[192],[192],[192],[124,229],[321],[88,199,319],[],[318],[323,318,322],[318],[325,324],[326,319],[327,328],[],[88,329],[243,199],[],[38,39,37],[333,332],[],[],[90,335,226],[89,336],[],[125,338,226],[254,130,339],[341,254,340],[342,254,343],[349,129,255],[345,344,254],[128,348,255],[346,255,126],[347,255,127],[192],[192],[192],[192],[131,229],[355],[200,91,353],[],[352],[356,357,352],[352],[358,359],[360,353],[361,362],[],[91,363],[200,243],[],[45,43,44],[367,366],[],[],[369,93,226],[370,92],[],[132,372,226],[138,254,373],[254,375,374],[254,377,376],[137,386,255],[254,378,379],[136,255,385],[254,380,381],[135,255,384],[133,382,255],[255,383,134],[192],[192],[192],[192],[192],[229,139],[392],[94,201,390],[],[389],[394,389,393],[389],[396,395],[397,390],[398,399],[],[94,400],[243,201],[],[49,50,51],[404,403],[],[],[406,96,226],[95,407],[],[140,226,409],[147,410,254],[411,412,254],[414,413,254],[426,146,255],[415,254,416],[425,145,255],[418,254,417],[144,424,255],[419,254,420],[423,143,255],[141,255,421],[422,142,255],[192],[192],[192],[192],[192],[192],[148,229],[432],[202,430,97],[],[429],[433,434,429],[429],[436,435],[430,437],[439,438],[],[440,97],[202,243],[],[442,149,226],[157,443,254],[254,445,444],[254,446,447],[156,462,255],[449,254,448],[155,461,255],[450,254,451],[154,460,255],[453,452,254],[459,255,153],[454,455,254],[152,458,255],[456,255,150],[151,457,255],[192],[192],[192],[192],[192],[192],[192],[203,226,464],[465,98],[],[57],[469,468],[],[],[158,229],[159,472,473,99],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Return Stmt ","Method Declaration Throws ","STATIC","FINAL","Primitive Type long ","Simple Name readLong ","Parameter final JsonIterator iter ","Parameter final byte c ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr c ","Simple Name c ","Class Or Interface Type JsonIterator ","Primitive Type byte ","Variable Declaration Expr ","Simple Name ind ","Name Expr IterImplNumber ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind5 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind5 ","Name Expr ind6 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind5 ","Name Expr ind6 ","Name Expr ind7 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind5 ","Name Expr ind6 ","Name Expr ind7 ","Name Expr ind8 ","Name Expr ind ","Name Expr ind ","Variable Declarator long ind = ","Primitive Type long ","Array Access Expr c ","Field Access Expr ","Simple Name intDigits ","Block Stmt ","EQUALS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name assertNotLeadingZero ","ReturnStmt","Integer Literal Expr Zero  ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Block Stmt ","Binary Expr MINUS ","GREATER","Integer Literal Expr Note Zero  ","Field Access Expr ","MINUS","Name Expr valueType ","Simple Name tail ","Simple Name head ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Field Access Expr ","Simple Name head ","Variable Declaration Expr ","Simple Name ind2 ","Name Expr IterImplNumber ","Name Expr ind2 ","Variable Declarator int ind2 = ","Primitive Type int ","Array Access Expr iter.buf[i] ","Field Access Expr ","Array Access Expr i ","Simple Name intDigits ","Field Access Expr ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Simple Name head ","Unary Expr - ","MINUS","Variable Declaration Expr ","Simple Name ind3 ","Name Expr IterImplNumber ","Name Expr ind3 ","Variable Declarator int ind3 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","PREFIX_INCREMENT","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr MULTIPLY ","PLUS","MULTIPLY","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind4 ","Name Expr IterImplNumber ","Name Expr ind4 ","Variable Declarator int ind4 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind5 ","Name Expr IterImplNumber ","Name Expr ind5 ","Variable Declarator int ind5 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind6 ","Name Expr IterImplNumber ","Name Expr ind6 ","Variable Declarator int ind6 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Marker Annotation Expr @Override ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind7 ","Name Expr IterImplNumber ","Name Expr ind7 ","Variable Declarator int ind7 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind8 ","Name Expr IterImplNumber ","Name Expr ind8 ","Variable Declarator int ind8 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind9 ","Name Expr IterImplNumber ","Name Expr ind9 ","Variable Declarator int ind9 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Unary Expr - ","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name readLongSlowPath "]}
{"fileName":"src/main/java/com/jsoniter/IterImpl.java","version":"0.9.22","methodName":"readDouble-IterImpl-JsonIterator","callMethodNameReferTo":{"246":"src/main/java/com/jsoniter/IterImplForStreaming.java?readDoubleSlowPath-IterImplForStreaming-JsonIterator","154":"src/main/java/com/jsoniter/IterImplForStreaming.java?readDoubleSlowPath-IterImplForStreaming-JsonIterator","237":"src/main/java/com/jsoniter/IterImplForStreaming.java?readDoubleSlowPath-IterImplForStreaming-JsonIterator","94":"src/main/java/com/jsoniter/IterImplNumber.java?readLong-IterImplNumber-JsonIterator","206":"src/main/java/com/jsoniter/IterImplForStreaming.java?readDoubleSlowPath-IterImplForStreaming-JsonIterator"},"num":707,"succs":[[75,1],[2,82,31,83],[3,85,84],[86,4],[5,96],[98,6,99,7,97],[7,89,34,102],[103,8],[115,9,25],[98,10,116,105,25],[118,11],[12,122],[13,129],[14,137],[150,15],[151,98,139,17,16],[154,17,34,102],[157,18],[19,160],[171,20,22],[174,22,173,21,175],[193,34,102,27],[23,24],[203,24],[206,34,102,27],[26],[91,34,102,27],[28,209],[174,211,210,29],[234,30],[34,102,237],[242,32,241],[243,33],[246,34,102],[37,39,41,38,43,40,36,35],[36],[],[38],[],[74,45],[42],[],[],[0,1],[45],[],[45,44],[46,45],[45,47],[48,45],[61,45,49],[50,45],[51,45],[45,52],[53,45],[45,147,54],[55,45],[45,56],[45,57],[60,58,45,20],[76,77,20],[58,20,59],[50,45],[62,45],[45,63],[45,64],[65,45],[66,45],[28,69,45,67],[76],[28,68],[70,68,72],[76,69],[71],[],[78],[60,44],[76],[76,80,79],[76],[44,81],[],[2],[31,240],[3,8,7,4],[27],[92],[46,88],[],[90,87],[89,87],[89,87],[94,93,87],[87],[46,95,88],[],[6],[100,47],[],[48,101],[],[],[],[108],[50,49],[104,107],[104,53,105,54,9],[106,148,9],[109,104,110],[104],[111,112],[49,113],[50,114],[],[],[10,11,13,12,19,17,14,18],[117],[],[119,120],[121,51],[],[],[125],[52],[123],[123,126,127],[123],[128,52],[],[106,131,130],[],[132,133],[53,134],[135,120],[],[136,54],[],[143],[55,107],[138],[142,141,138],[139,138],[140],[145,138,144],[138],[149,55,107,146],[],[],[],[310,309,312,311,308,40,313,36,35],[16],[152,153],[],[],[155,156,56],[],[],[158,130,140],[141,159],[],[165],[124,57],[161],[162,161,164],[20,163,161],[166,167,161],[161],[124,169,168],[170,57],[],[],[21],[20],[174,177,176],[],[181,188,187],[179,178,162],[182,163,181],[],[180],[],[],[183,184],[185,186],[],[],[],[189],[192],[77,190,169],[58,191],[],[],[90,195,194],[],[196],[142,197,198],[],[199,200],[],[201,164],[172,202],[],[60,130,204],[205,59],[],[61,208,207],[],[],[30,29],[212,181,213],[216],[62,214],[63,215],[],[],[217,218,219],[98,220,221],[],[98,228,227],[222,223],[226],[224,64],[65,225],[],[],[],[229,230],[233],[231,66],[232,67],[],[],[],[235,69,130],[68,236],[],[70,239,238],[],[],[33,32],[],[],[244,130,72],[245,71],[],[247,73,248],[],[],[346,250],[251,407],[98,252,349,408,254],[253,409],[149,412,102,254],[413,255],[98,257,414,350,256],[257,417],[422,258],[259,178,307,423,424],[429,260],[261,444],[456,262],[457,98,263,447,265],[264,460],[149,463,265,102],[464,266],[478,267],[98,268,467,271,479],[269,482],[270,485],[149,490,271,102],[491,272],[273,504],[98,494,505,277,274],[508,275],[511,276],[149,518,277,102],[278,519],[279,532],[98,533,283,280,522],[281,536],[282,539],[149,283,549,102],[284,550],[285,563],[98,289,564,553,286],[287,567],[288,570],[149,289,583,102],[584,290],[597,291],[98,587,598,292,295],[601,293],[604,294],[149,620,295,102],[296,621],[297,634],[98,298,301,635,624],[638,299],[641,300],[149,301,102,660],[661,302],[674,303],[304,696],[699,305],[98,307,700,306,664],[149,307,703,102],[149,704,102],[309],[],[344,147],[148,345],[],[257,249,250,307,254],[147],[314,147],[147,315],[147,316],[317,147,258],[147,258,318],[319,147,258,321],[430,431],[320,258],[324,320,322,258],[432,430],[323,258],[323,327,258,325],[433,430],[326,258],[326,330,328,258],[434,430],[329,258],[329,333,331,258],[435,430],[258,332],[334,336,258,332],[436,430],[258,335],[337,339,258,335],[437,430],[338,258],[338,258,340],[338,341],[148],[],[],[402],[343,348],[],[347],[349,347],[350,347],[353,354,347],[351,347],[447,445],[352],[358,359,352,357],[355,352],[445,354],[467,465],[356],[363,365,356,362,364],[356,360],[358,445],[359,465],[494,492],[361],[361,372,371,370,369,368],[366,361],[363,445],[465,364],[365,492],[522,520],[367],[378,379,380,367,375,377,376],[373,367],[445,369],[465,370],[492,371],[372,520],[551,553],[374],[389,386,374,384,383,387,385,388],[374,381],[445,376],[377,465],[378,492],[379,520],[380,551],[587,585],[382],[394,398,399,396,397,393,382,392,395],[390,382],[384,445],[465,385],[386,492],[387,520],[551,388],[389,585],[622,624],[391],[391,400],[404,347,403],[347],[405,343],[406,348],[],[253,252],[180],[410,314,411],[],[],[180],[256],[416,415],[],[],[418,419,315,420],[],[421],[421],[],[278,259,304,284,289,301,261,265,295,303,290,277,302,272,283,296,271,266,260],[425,426,169],[192],[427,316],[317,428],[],[],[440],[318],[430],[321,430],[324,430],[327,430],[330,430],[333,430],[336,430],[339,430],[438,430],[442,430,441],[430],[443,318],[],[448],[319,446,431],[],[445],[449,445,450],[445],[452,451],[446,453],[454,431],[],[455,319],[],[263,264],[458,459],[],[],[321,130,461],[462,320],[],[351,159],[468],[432,466,322],[],[465],[469,465,470],[465],[472,471],[466,473],[475,474],[],[476,322],[432,477],[],[],[270,269,268],[480,481],[],[],[324,130,483],[323,484],[],[486,352,130],[194,487,354],[489,353,488],[],[192],[355,159],[495],[433,493,325],[],[492],[497,496,492],[492],[498,499],[493,500],[501,502],[],[325,503],[433,477],[],[275,276,274],[507,506],[],[],[327,509,130],[326,510],[],[356,512,130],[359,513,194],[515,194,514],[516,357,488],[517,358,488],[192],[192],[360,159],[523],[521,434,328],[],[520],[524,520,525],[520],[526,527],[521,528],[529,530],[],[531,328],[434,477],[],[282,280,281],[535,534],[],[],[537,330,130],[329,538],[],[361,540,130],[365,541,194],[194,543,542],[194,544,545],[548,364,488],[362,546,488],[363,488,547],[192],[192],[192],[366,159],[554],[331,435,552],[],[551],[556,551,555],[551],[558,557],[559,552],[560,561],[],[331,562],[477,435],[],[287,288,286],[566,565],[],[],[333,568,130],[332,569],[],[367,571,130],[194,572,372],[574,194,573],[575,194,576],[582,371,488],[578,577,194],[370,581,488],[579,488,368],[580,488,369],[192],[192],[192],[192],[373,159],[588],[436,334,586],[],[585],[589,590,585],[585],[591,592],[593,586],[594,595],[],[334,596],[436,477],[],[294,292,293],[600,599],[],[],[602,336,130],[603,335],[],[374,605,130],[380,194,606],[194,608,607],[194,610,609],[379,619,488],[194,611,612],[378,488,618],[613,194,614],[377,488,617],[375,615,488],[488,616,376],[192],[192],[192],[192],[192],[159,381],[625],[337,623,437],[],[622],[627,622,626],[622],[629,628],[630,623],[631,632],[],[337,633],[477,437],[],[298,299,300],[637,636],[],[],[639,339,130],[338,640],[],[382,642,130],[389,643,194],[644,645,194],[647,646,194],[659,388,488],[648,194,649],[658,387,488],[651,194,650],[386,657,488],[652,194,653],[656,385,488],[383,488,654],[655,384,488],[192],[192],[192],[192],[192],[192],[390,159],[665],[438,663,340],[],[662],[666,667,662],[662],[668,669],[663,670],[672,671],[],[673,340],[438,477],[],[675,391,130],[399,676,194],[194,678,677],[194,679,680],[398,695,488],[682,194,681],[397,694,488],[683,194,684],[396,693,488],[686,685,194],[692,488,395],[687,688,194],[394,691,488],[689,488,392],[393,690,488],[192],[192],[192],[192],[192],[192],[192],[439,697,130],[698,341],[],[306],[702,701],[],[],[400,159],[401,705,706,342],[],[]],"attribute":["Expression Stmt ","Try Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Binary Expr NOT_EQUALS ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr AND ","Return Stmt ","Block Stmt ","Expression Stmt ","Return Stmt ","Block Stmt ","Return Stmt ","If Stmt ","Binary Expr AND ","Expression Stmt ","Return Stmt ","Parameter JsonException e ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","STATIC","FINAL","Primitive Type double ","Simple Name readDouble ","Parameter final JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr oldHead ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr oldHead ","Name Expr iter ","Name Expr iter ","Name Expr oldHead ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name oldHead ","Name Expr oldHead ","Variable Declarator int oldHead = ","Primitive Type int ","Field Access Expr ","Simple Name head ","Block Stmt ","Catch Clause ","Block Stmt ","Block Stmt ","Variable Declaration Expr ","Simple Name value ","Name Expr IterImplNumber ","Name Expr value ","Name Expr value ","Name Expr value ","Variable Declarator long value = ","Primitive Type long ","Method Call Expr ","Simple Name readLong ","Block Stmt ","Field Access Expr ","EQUALS","Field Access Expr ","Simple Name head ","Simple Name tail ","ReturnStmt","Variable Declaration Expr ","Simple Name c ","Name Expr c ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Array Access Expr iter.head ","Field Access Expr ","Field Access Expr ","Simple Name buf ","Simple Name head ","Block Stmt ","Char Literal Expr '.' ","'.'","Unary Expr ++ ","Field Access Expr ","POSTFIX_INCREMENT","Simple Name head ","Variable Declaration Expr ","Simple Name start ","Name Expr start ","Variable Declarator int start = ","Primitive Type int ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","ASSIGN","Array Access Expr iter.head++ ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Field Access Expr ","Simple Name head ","Variable Declaration Expr ","Simple Name decimalPart ","Name Expr decimalPart ","Name Expr decimalPart ","Name Expr decimalPart ","Name Expr decimalPart ","Variable Declarator long decimalPart = ","Primitive Type long ","Method Call Expr ","Simple Name readLong ","Simple Name iter ","Simple Name c ","Method Declaration Throws ","Block Stmt ","Field Access Expr ","Name Expr Long ","Simple Name MIN_VALUE ","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name readDoubleSlowPath ","Assign Expr ASSIGN ","Unary Expr - ","MINUS","Variable Declaration Expr ","Simple Name decimalPlaces ","Name Expr decimalPlaces ","Name Expr decimalPlaces ","Name Expr decimalPlaces ","Variable Declarator int decimalPlaces = ","Primitive Type int ","Binary Expr MINUS ","Field Access Expr ","MINUS","Simple Name head ","Block Stmt ","Name Expr IterImplNumber ","Binary Expr AND ","AND","Binary Expr LESS ","Binary Expr GREATER ","Binary Expr LESS ","GREATER","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","LESS","Field Access Expr ","Field Access Expr ","Simple Name length ","Name Expr IterImplNumber ","Simple Name POW10 ","Enclosed Expr ","Integer Literal Expr Note Zero  ","Binary Expr MINUS ","Field Access Expr ","Simple Name head ","IntegerLiteralExpr","Binary Expr PLUS ","PLUS","Enclosed Expr ","Binary Expr DIVIDE ","DIVIDE","Cast Expr ","Primitive Type double ","Array Access Expr decimalPlaces ","Field Access Expr ","Simple Name POW10 ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name readDoubleSlowPath ","Block Stmt ","Binary Expr LESS ","Enclosed Expr ","Field Access Expr ","Field Access Expr ","Simple Name head ","Simple Name tail ","Binary Expr OR ","Binary Expr EQUALS ","OR","Binary Expr EQUALS ","Array Access Expr iter.head ","Char Literal Expr 'e' ","Field Access Expr ","Field Access Expr ","Simple Name buf ","Simple Name head ","'e'","Array Access Expr iter.head ","Char Literal Expr 'E' ","Field Access Expr ","Field Access Expr ","Simple Name buf ","Simple Name head ","'E'","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name readDoubleSlowPath ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name readDoubleSlowPath ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Return Stmt ","Primitive Type long ","Simple Name readLong ","Parameter final JsonIterator iter ","Parameter final byte c ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr c ","Class Or Interface Type JsonIterator ","Primitive Type byte ","Variable Declaration Expr ","Simple Name ind ","Name Expr IterImplNumber ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind5 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind5 ","Name Expr ind6 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind5 ","Name Expr ind6 ","Name Expr ind7 ","Name Expr ind ","Name Expr ind ","Name Expr ind ","Name Expr ind2 ","Name Expr ind3 ","Name Expr ind4 ","Name Expr ind5 ","Name Expr ind6 ","Name Expr ind7 ","Name Expr ind8 ","Name Expr ind ","Name Expr ind ","Variable Declarator long ind = ","Primitive Type long ","Array Access Expr c ","Field Access Expr ","Simple Name intDigits ","Block Stmt ","Integer Literal Expr Zero  ","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name assertNotLeadingZero ","Integer Literal Expr Zero  ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Block Stmt ","Binary Expr MINUS ","Integer Literal Expr Note Zero  ","Field Access Expr ","Name Expr valueType ","Simple Name tail ","Simple Name head ","Variable Declaration Expr ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Field Access Expr ","Simple Name head ","Variable Declaration Expr ","Simple Name ind2 ","Name Expr IterImplNumber ","Name Expr ind2 ","Variable Declarator int ind2 = ","Primitive Type int ","Array Access Expr iter.buf[i] ","Field Access Expr ","Array Access Expr i ","Simple Name intDigits ","Field Access Expr ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind3 ","Name Expr IterImplNumber ","Name Expr ind3 ","Variable Declarator int ind3 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","PREFIX_INCREMENT","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr MULTIPLY ","MULTIPLY","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind4 ","Name Expr IterImplNumber ","Name Expr ind4 ","Variable Declarator int ind4 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind5 ","Name Expr IterImplNumber ","Name Expr ind5 ","Variable Declarator int ind5 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind6 ","Name Expr IterImplNumber ","Name Expr ind6 ","Variable Declarator int ind6 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Marker Annotation Expr @Override ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind7 ","Name Expr IterImplNumber ","Name Expr ind7 ","Variable Declarator int ind7 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind8 ","Name Expr IterImplNumber ","Name Expr ind8 ","Variable Declarator int ind8 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Unary Expr - ","Variable Declaration Expr ","Simple Name ind9 ","Name Expr IterImplNumber ","Name Expr ind9 ","Variable Declarator int ind9 = ","Primitive Type int ","Array Access Expr iter.buf[++i] ","Field Access Expr ","Array Access Expr ++i ","Simple Name intDigits ","Field Access Expr ","Unary Expr ++ ","Simple Name buf ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr PLUS ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Binary Expr MULTIPLY ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Block Stmt ","Field Access Expr ","Name Expr IterImplNumber ","Simple Name INVALID_CHAR_FOR_NUMBER ","Unary Expr - ","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name readLongSlowPath "]}
