{"fileName":"src/main/java/com/jsoniter/extra/Base64FloatSupport.java","version":"0.9.22","hasMethodName":["enableEncodersAndDecoders-Base64FloatSupport-","enableDecoders-Base64FloatSupport-","readLongBits-Base64FloatSupport-JsonIterator","writeLongBits-Base64FloatSupport-long-JsonStream"]}
{"fileName":"src/main/java/com/jsoniter/extra/Base64FloatSupport.java","version":"0.9.22","methodName":"enableEncodersAndDecoders-Base64FloatSupport-","callMethodNameReferTo":{"131":"src/main/java/com/jsoniter/extra/Base64.java?encodeLongBits-Base64-long-JsonStream","195":"src/main/java/com/jsoniter/any/Any.java?wrap-Any-int","231":"src/main/java/com/jsoniter/extra/Base64.java?encodeLongBits-Base64-long-JsonStream","74":"src/main/java/com/jsoniter/extra/Base64.java?encodeLongBits-Base64-long-JsonStream","95":"src/main/java/com/jsoniter/any/Any.java?wrap-Any-int","175":"src/main/java/com/jsoniter/extra/Base64.java?encodeLongBits-Base64-long-JsonStream"},"num":443,"succs":[[1,18],[2,3],[3,19],[23,4],[28,5],[6,31],[100,7],[8,134],[200],[12,13,14,11,10,15],[11],[12],[],[14],[],[0,6,3,8,7,5,4],[95,9,77,94],[195,9,178,94],[2],[21,20],[],[22],[],[25,24,26],[],[],[27],[],[30,29],[],[240,238,11,239,10],[35,34,32,33],[],[],[36],[37],[],[],[42,47,39,40,45,41,43,44,10],[],[41],[],[52,49],[51,53],[46],[],[],[56,55,54],[49],[],[51],[],[],[],[57],[64],[74],[60],[48],[58],[58,62,61],[58],[48,63],[],[67],[59],[65],[65,69,68],[65],[71,72,70],[],[],[73,59],[],[75,66,76,50],[],[],[81,80,82,79,78,10],[],[80],[],[85,84],[16,86],[84],[],[],[87,16],[90],[83],[88],[92,91,88],[88],[93,83],[],[],[98,96,77,97],[],[],[99,89,84],[],[102,103,104,101],[],[],[105],[106],[],[],[110,109,114,111,44,112,10,113,108],[],[110],[],[116,119],[118,120],[],[121,122],[116],[],[118],[],[],[],[123],[131],[126],[115],[124],[124,128,127],[124],[130,115,129],[],[],[125,117,133,132],[],[],[138,135,136,137],[],[],[139],[140],[],[],[145,146,144,44,147,10,143,148,142],[],[144],[],[153,150],[152,154],[],[156,155,157],[150],[],[152],[],[],[],[158],[165],[175],[161],[149],[159],[162,159,163],[159],[164,149],[],[168],[160],[166],[169,166,170],[166],[173,172,171],[],[],[174,160],[],[177,151,167,176],[],[],[182,181,180,179,10,183],[],[181],[],[185,186],[187,17],[185],[],[],[188],[191],[184],[189],[193,189,192],[189],[184,194],[],[198,77,197,196],[],[],[199,190,84],[],[202,204,203,201],[],[],[205],[206],[],[],[208,213,210,44,212,10,214,209,211],[],[210],[],[219,216],[220,218],[],[222,221],[216],[],[218],[],[],[],[223],[231],[226],[215],[224],[228,227,224],[224],[230,229,215],[],[],[225,217,233,232],[],[],[235,249],[297,236],[237,343],[393],[239],[],[237,235,236,234],[30,256,289,94],[30,256,94,295],[304,30,335,94],[304,341,30,94],[30,350,94,381],[30,389,350,94],[400,30,431,94],[400,439,30,94],[253,251,250,252],[],[],[254],[255],[],[],[260,258,257,259,261,262,44,10],[],[259],[],[268,264],[],[270,269,271],[264],[],[263,264],[265,264],[265,266,264],[],[272],[280],[283,285,284],[276],[263,274],[],[273],[278,277,273],[273],[263,279,274],[],[265,282,281],[],[],[275,286,287],[241],[242],[],[288],[],[292,290,291],[],[],[294,293,266],[],[],[267,296],[],[301,300,299,298],[],[],[302],[303],[],[],[310,306,305,307,309,44,10,308],[],[307],[],[312,316],[],[319,317,318],[312],[],[312,311],[312,313],[312,313,314],[],[320],[328],[333,331,332],[324],[322,311],[],[321],[325,321,326],[321],[322,327,311],[],[329,313,330],[],[],[334,323,286],[243],[244],[288],[337,338,336],[],[],[339,340,314],[],[],[315,342],[],[346,347,344,345],[],[],[348],[349],[],[],[355,356,351,354,44,10,352,353],[],[353],[],[358,362],[],[365,363,364],[358],[],[358,357],[358,359],[358,360,359],[],[366],[374],[378,377,379],[370],[368,357],[],[367],[372,367,371],[367],[368,357,373],[],[375,359,376],[],[],[369,380,286],[245],[246],[288],[383,382],[],[385,386,384],[],[],[388,360,387],[],[],[390,391],[],[361,392],[],[397,396,395,394],[],[],[398],[399],[],[],[401,405,403,404,44,10,402,406],[],[403],[],[408,412],[],[414,413,415],[408],[],[407,408],[409,408],[409,410,408],[],[416],[424],[427,429,428],[420],[407,418],[],[417],[421,417,422],[417],[407,423,418],[],[409,425,426],[],[],[430,419,286],[247],[248],[288],[433,432],[],[436,435,434],[],[],[410,438,437],[],[],[440,441],[],[442,411],[]],"attribute":["If Stmt ","Name Expr enabled ","Throw Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","STATIC","SYNCHRONIZED","Void Type ","Simple Name enableEncodersAndDecoders ","Block Stmt ","Return Stmt ","Return Stmt ","Block Stmt ","Object Creation Expr JsonException Optional.empty Optional.empty ","Simple Name CodegenAccess ","String Literal Expr Not Empty  ","StringLiteralExpr","Return Stmt ","Name Expr enabled ","ASSIGN","Boolean Literal Expr true ","true","Method Call Expr ","Simple Name enableDecoders ","Method Declaration ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerTypeEncoder ","Class Expr Double.class ","Object Creation Expr Encoder.ReflectionEncoder Optional.empty Optional.empty ","Class Or Interface Type Double ","Class Or Interface Type ReflectionEncoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Void Type ","Simple Name encode ","Parameter Object obj ","Parameter JsonStream stream ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr obj ","Simple Name obj ","Name Expr stream ","Simple Name stream ","Class Or Interface Type Object ","Class Or Interface Type JsonStream ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Simple Name number ","Name Expr number ","Variable Declarator Double number = ","Class Or Interface Type Double ","Class Or Interface Type jsoniter ","Class Or Interface Type Double ","Variable Declaration Expr ","Simple Name iter ","Name Expr bits ","Variable Declarator long bits = ","Primitive Type long ","Method Call Expr ","Name Expr Double ","Simple Name doubleToRawLongBits ","Method Call Expr ","Simple Name doubleValue ","Method Call Expr ","Simple Name append ","Simple Name encodeLongBits ","Method Declaration ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name wrap ","Parameter Object obj ","Block Stmt ","Name Expr obj ","Simple Name obj ","Class Or Interface Type Object ","Expression Stmt ","Variable Declaration Expr ","Simple Name number ","Name Expr number ","Variable Declarator Double number = ","Break Stmt ","Cast Expr ","Class Or Interface Type Double ","ReturnStmt","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name doubleValue ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerTypeEncoder ","Class Expr double.class ","Object Creation Expr Encoder.DoubleEncoder Optional.empty Optional.empty ","Primitive Type double ","Class Or Interface Type DoubleEncoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Void Type ","Simple Name encodeDouble ","Parameter double obj ","Parameter JsonStream stream ","Class Or Interface Type IOException ","Block Stmt ","Name Expr obj ","Simple Name obj ","Name Expr stream ","Simple Name stream ","Primitive Type double ","Class Or Interface Type JsonStream ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Name Expr keys ","Name Expr bits ","Variable Declarator long bits = ","Primitive Type long ","Method Call Expr ","Name Expr Double ","Simple Name doubleToRawLongBits ","Method Call Expr ","Simple Name toLong ","Simple Name encodeLongBits ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerTypeEncoder ","Class Expr Float.class ","Object Creation Expr Encoder.ReflectionEncoder Optional.empty Optional.empty ","Name Expr cache ","Class Or Interface Type ReflectionEncoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Void Type ","Simple Name encode ","Parameter Object obj ","Parameter JsonStream stream ","Class Or Interface Type IOException ","Block Stmt ","Name Expr obj ","Simple Name obj ","Name Expr stream ","Simple Name stream ","Name Expr mapped ","Class Or Interface Type JsonStream ","Throw Stmt ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","String Literal Expr Not Empty  ","Name Expr number ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type Float ","Cast Expr ","Class Or Interface Type Float ","Variable Declaration Expr ","Simple Name bits ","Name Expr bits ","Variable Declarator long bits = ","Primitive Type long ","Method Call Expr ","Name Expr Double ","Simple Name doubleToRawLongBits ","Method Call Expr ","Simple Name doubleValue ","Method Call Expr ","Name Expr Base64 ","Simple Name encodeLongBits ","Method Declaration ","Simple Name fillCache ","Class Or Interface Type Any ","Simple Name wrap ","Parameter Object obj ","Block Stmt ","Name Expr obj ","Simple Name obj ","Class Or Interface Type Object ","Expression Stmt ","Expression Stmt ","Simple Name number ","Name Expr number ","Variable Declarator Float number = ","Class Or Interface Type Float ","Cast Expr ","Class Or Interface Type Float ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name floatValue ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerTypeEncoder ","Class Expr float.class ","Object Creation Expr Encoder.FloatEncoder Optional.empty Optional.empty ","Primitive Type float ","Class Or Interface Type FloatEncoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Simple Name size ","Simple Name encodeFloat ","Parameter float obj ","Parameter JsonStream stream ","Class Or Interface Type IOException ","Block Stmt ","Name Expr obj ","Simple Name obj ","Name Expr stream ","Simple Name stream ","Primitive Type float ","Class Or Interface Type JsonStream ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","String Literal Expr Not Empty  ","Name Expr bits ","Variable Declarator long bits = ","Primitive Type long ","Method Call Expr ","Name Expr Double ","Simple Name doubleToRawLongBits ","Method Call Expr ","Name Expr Base64 ","Simple Name encodeLongBits ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Simple Name dLen ","Simple Name enableDecoders ","Block Stmt ","Return Stmt ","Return Stmt ","Return Stmt ","Return Stmt ","Return Stmt ","Return Stmt ","Return Stmt ","Return Stmt ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerTypeDecoder ","Class Expr Double.class ","Object Creation Expr Decoder Optional.empty Optional.empty ","Class Or Interface Type Double ","Class Or Interface Type Decoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Name Expr sender ","Simple Name logger ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Simple Name iter ","Simple Name keys ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Expression Stmt ","Expression Stmt ","If Stmt ","Variable Declaration Expr ","Simple Name token ","Name Expr CodegenAccess ","Name Expr token ","Variable Declarator byte token = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name unreadByte ","Binary Expr EQUALS ","Block Stmt ","Block Stmt ","EQUALS","Char Literal Expr ''' ","'''","Method Call Expr ","Name Expr Double ","Simple Name longBitsToDouble ","Method Call Expr ","Name Expr Base64 ","Simple Name decodeLongBits ","Binary Expr BINARY_AND ","Simple Name readDouble ","Method Call Expr ","Name Expr JsoniterSpi ","Expression Stmt ","Class Expr double.class ","Object Creation Expr Decoder.DoubleDecoder Optional.empty Optional.empty ","Primitive Type double ","Class Or Interface Type DoubleDecoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Primitive Type double ","Simple Name decodeDouble ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Expression Stmt ","Expression Stmt ","If Stmt ","Variable Declaration Expr ","Simple Name token ","Name Expr CodegenAccess ","Name Expr token ","Variable Declarator byte token = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Method Call Expr ","Name Expr CodegenAccess ","Method Call Expr ","Binary Expr EQUALS ","Block Stmt ","Block Stmt ","Char Literal Expr ''' ","Method Call Expr ","Name Expr Double ","Simple Name longBitsToDouble ","Method Call Expr ","Name Expr Base64 ","Simple Name decodeLongBits ","Method Call Expr ","Simple Name readDouble ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerTypeDecoder ","Class Expr Float.class ","Object Creation Expr Decoder Optional.empty Optional.empty ","Class Or Interface Type Float ","Class Or Interface Type Decoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name decode ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Expression Stmt ","Expression Stmt ","If Stmt ","Variable Declaration Expr ","Simple Name token ","Name Expr CodegenAccess ","Name Expr token ","Variable Declarator byte token = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name unreadByte ","Binary Expr EQUALS ","Block Stmt ","Block Stmt ","Char Literal Expr ''' ","Cast Expr ","Name Expr pType ","Method Call Expr ","Name Expr Double ","Simple Name longBitsToDouble ","Method Call Expr ","Name Expr Base64 ","Simple Name decodeLongBits ","Cast Expr ","Primitive Type float ","Method Call Expr ","Simple Name readDouble ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerTypeDecoder ","Simple Name isConnected ","Object Creation Expr Decoder.FloatDecoder Optional.empty Optional.empty ","Primitive Type float ","Class Or Interface Type FloatDecoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Primitive Type float ","Simple Name decodeFloat ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Expression Stmt ","Expression Stmt ","If Stmt ","Variable Declaration Expr ","Simple Name token ","Name Expr CodegenAccess ","Name Expr token ","Variable Declarator byte token = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name unreadByte ","Binary Expr EQUALS ","Block Stmt ","Block Stmt ","Char Literal Expr ''' ","Cast Expr ","Primitive Type float ","Method Call Expr ","Name Expr Double ","Simple Name longBitsToDouble ","Method Call Expr ","Name Expr Base64 ","Simple Name decodeLongBits ","Cast Expr ","Primitive Type float ","Method Call Expr ","Simple Name readDouble "]}
{"fileName":"src/main/java/com/jsoniter/extra/Base64FloatSupport.java","version":"0.9.22","methodName":"enableDecoders-Base64FloatSupport-","callMethodNameReferTo":{"64":"src/main/java/com/jsoniter/extra/Base64.java?decodeLongBits-Base64-JsonIterator","144":"src/main/java/com/jsoniter/CodegenAccess.java?nextToken-CodegenAccess-JsonIterator","208":"src/main/java/com/jsoniter/extra/Base64.java?decodeLongBits-Base64-JsonIterator","49":"src/main/java/com/jsoniter/CodegenAccess.java?nextToken-CodegenAccess-JsonIterator","98":"src/main/java/com/jsoniter/CodegenAccess.java?nextToken-CodegenAccess-JsonIterator","146":"src/main/java/com/jsoniter/CodegenAccess.java?unreadByte-CodegenAccess-JsonIterator","194":"src/main/java/com/jsoniter/CodegenAccess.java?nextToken-CodegenAccess-JsonIterator","51":"src/main/java/com/jsoniter/CodegenAccess.java?unreadByte-CodegenAccess-JsonIterator","100":"src/main/java/com/jsoniter/CodegenAccess.java?unreadByte-CodegenAccess-JsonIterator","196":"src/main/java/com/jsoniter/CodegenAccess.java?unreadByte-CodegenAccess-JsonIterator","110":"src/main/java/com/jsoniter/extra/Base64.java?decodeLongBits-Base64-JsonIterator","158":"src/main/java/com/jsoniter/extra/Base64.java?decodeLongBits-Base64-JsonIterator"},"num":215,"succs":[[1,18],[69,2],[3,115],[165],[9,7,6,8,5],[6],[],[8],[],[1,3,2,0],[4,25,61,60],[4,25,60,67],[76,4,107,60],[76,113,4,60],[4,122,60,153],[4,122,161,60],[172,4,203,60],[172,211,4,60],[22,19,20,21],[],[],[23],[24],[],[],[29,27,26,28,31,33,30,5],[],[28],[],[39,35],[32],[],[],[41,40,42],[35],[],[34,35],[36,35],[36,37,35],[],[43],[51],[54,56,55],[47],[34,45],[],[44],[49,48,44],[44],[34,50,45],[],[36,53,52],[],[],[46,57,58],[10],[11],[],[59],[],[],[64,62,63],[],[],[66,65,37],[],[],[38,68],[],[73,72,71,70],[],[],[74],[75],[],[],[82,78,77,79,81,30,5,80],[],[79],[],[84,88],[],[91,89,90],[84],[],[84,83],[84,85],[84,85,86],[],[92],[100],[105,103,104],[96],[94,83],[],[93],[97,93,98],[93],[94,99,83],[],[101,85,102],[],[],[106,57,95],[12],[13],[59],[109,110,108],[],[],[111,112,86],[],[],[87,114],[],[118,119,116,117],[],[],[120],[121],[],[],[127,128,123,126,30,5,124,125],[],[125],[],[130,134],[],[137,135,136],[130],[],[130,129],[130,131],[130,132,131],[],[138],[146],[150,149,151],[142],[140,129],[],[139],[144,139,143],[139],[140,145,129],[],[147,131,148],[],[],[141,152,57],[14],[15],[59],[155,154],[],[157,156,158],[],[],[160,132,159],[],[],[162,163],[],[133,164],[],[169,168,167,166],[],[],[170],[171],[],[],[173,177,175,176,30,5,178,174],[],[175],[],[180,184],[],[186,185,187],[180],[],[179,180],[181,180],[181,180,182],[],[188],[196],[199,201,200],[192],[179,190],[],[189],[193,189,194],[189],[179,195,190],[],[181,197,198],[],[],[202,191,57],[16],[17],[59],[205,204],[],[208,207,206],[],[],[182,210,209],[],[],[212,213],[],[214,183],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","STATIC","Simple Name dLen ","Simple Name enableDecoders ","Block Stmt ","Return Stmt ","Return Stmt ","Return Stmt ","Return Stmt ","Return Stmt ","Return Stmt ","Return Stmt ","Return Stmt ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerTypeDecoder ","Class Expr Double.class ","Object Creation Expr Decoder Optional.empty Optional.empty ","Class Or Interface Type Double ","Class Or Interface Type Decoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Name Expr sender ","Simple Name logger ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Simple Name keys ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Expression Stmt ","Expression Stmt ","If Stmt ","Variable Declaration Expr ","Simple Name token ","Name Expr CodegenAccess ","Name Expr token ","Variable Declarator byte token = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name unreadByte ","Binary Expr EQUALS ","Block Stmt ","Block Stmt ","EQUALS","Char Literal Expr ''' ","'''","ReturnStmt","Method Call Expr ","Name Expr Double ","Simple Name longBitsToDouble ","Method Call Expr ","Name Expr Base64 ","Simple Name decodeLongBits ","Binary Expr BINARY_AND ","Simple Name readDouble ","Method Call Expr ","Name Expr JsoniterSpi ","Expression Stmt ","Class Expr double.class ","Object Creation Expr Decoder.DoubleDecoder Optional.empty Optional.empty ","Primitive Type double ","Class Or Interface Type DoubleDecoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Primitive Type double ","Simple Name decodeDouble ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Expression Stmt ","Expression Stmt ","If Stmt ","Variable Declaration Expr ","Simple Name token ","Name Expr CodegenAccess ","Name Expr token ","Variable Declarator byte token = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Method Call Expr ","Name Expr CodegenAccess ","Method Call Expr ","Binary Expr EQUALS ","Block Stmt ","Block Stmt ","Char Literal Expr ''' ","Method Call Expr ","Name Expr Double ","Simple Name longBitsToDouble ","Method Call Expr ","Name Expr Base64 ","Simple Name decodeLongBits ","Method Call Expr ","Simple Name readDouble ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerTypeDecoder ","Class Expr Float.class ","Object Creation Expr Decoder Optional.empty Optional.empty ","Class Or Interface Type Float ","Class Or Interface Type Decoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name decode ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Expression Stmt ","Expression Stmt ","If Stmt ","Variable Declaration Expr ","Simple Name token ","Name Expr CodegenAccess ","Name Expr token ","Variable Declarator byte token = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name unreadByte ","Binary Expr EQUALS ","Block Stmt ","Block Stmt ","Char Literal Expr ''' ","Cast Expr ","Name Expr pType ","Method Call Expr ","Name Expr Double ","Simple Name longBitsToDouble ","Method Call Expr ","Name Expr Base64 ","Simple Name decodeLongBits ","Cast Expr ","Primitive Type float ","Method Call Expr ","Simple Name readDouble ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerTypeDecoder ","Simple Name isConnected ","Object Creation Expr Decoder.FloatDecoder Optional.empty Optional.empty ","Primitive Type float ","Class Or Interface Type FloatDecoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Primitive Type float ","Simple Name decodeFloat ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Expression Stmt ","Expression Stmt ","If Stmt ","Variable Declaration Expr ","Simple Name token ","Name Expr CodegenAccess ","Name Expr token ","Variable Declarator byte token = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name unreadByte ","Binary Expr EQUALS ","Block Stmt ","Block Stmt ","Char Literal Expr ''' ","Cast Expr ","Primitive Type float ","Method Call Expr ","Name Expr Double ","Simple Name longBitsToDouble ","Method Call Expr ","Name Expr Base64 ","Simple Name decodeLongBits ","Cast Expr ","Primitive Type float ","Method Call Expr ","Simple Name readDouble "]}
{"fileName":"src/main/java/com/jsoniter/extra/Base64FloatSupport.java","version":"0.9.22","methodName":"readLongBits-Base64FloatSupport-JsonIterator","callMethodNameReferTo":{"37":"src/main/java/com/jsoniter/spi/Slice.java?data-Slice-","57":"src/main/java/com/jsoniter/spi/Slice.java?head-Slice-","60":"src/main/java/com/jsoniter/spi/Slice.java?tail-Slice-"},"num":78,"succs":[[1,23],[2,32],[39,3],[4,5,50,8],[55,5],[9,6,60,52,59],[63,7],[68,8],[5,62,53],[10,45,77],[14,17,12,15,11,13,16,19],[12],[],[14],[],[21,22],[18],[],[],[9,1,0,3,2],[21],[],[],[28],[20],[24],[27,24,25],[26,24],[30,29,24],[24],[20,31],[],[35],[25],[33],[37,36,33],[33],[38,25],[],[46],[41,43,44,42],[40,44],[],[64],[],[40],[47,48,44],[44],[49],[],[6,7],[26],[51,54],[52,51],[51,53],[57,51,56],[51],[26,58],[],[],[61,27],[],[],[65],[34,54],[66,64,67],[64],[34,54],[40,69,70],[],[71,72,73],[41,75,74],[],[43,42],[],[76],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","Return Stmt ","Method Declaration Throws ","PRIVATE","STATIC","Primitive Type long ","Simple Name readLongBits ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Null Literal Expr ","Simple Name iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name slice ","Name Expr slice ","Name Expr slice ","Name Expr slice ","Variable Declarator Slice slice = ","Class Or Interface Type Slice ","Method Call Expr ","Simple Name readStringAsSlice ","Variable Declaration Expr ","Simple Name data ","Name Expr iter ","Variable Declarator byte[] data = ","Simple Name append ","Method Call Expr ","Simple Name data ","Variable Declaration Expr ","Class Or Interface Type Map ","Name Expr val ","Name Expr DEC ","Name Expr b ","Simple Name val ","Name Expr val ","Variable Declarator long val = ","Primitive Type long ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Block Stmt ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name head ","LESS","Method Call Expr ","Simple Name tail ","POSTFIX_INCREMENT","Name Expr JsonIteratorPool ","Simple Name i ","Variable Declarator byte b = ","Primitive Type byte ","Array Access Expr i ","Assign Expr ASSIGN ","ASSIGN","Binary Expr BINARY_OR ","Binary Expr LEFT_SHIFT ","BINARY_OR","Array Access Expr b ","LEFT_SHIFT","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","ReturnStmt"]}
{"fileName":"src/main/java/com/jsoniter/extra/Base64FloatSupport.java","version":"0.9.22","methodName":"writeLongBits-Base64FloatSupport-long-JsonStream","callMethodNameReferTo":{},"num":529,"succs":[[1,123],[166,2],[184,3],[4,198],[202,5],[6,203,77,204,7],[206,7],[215,8],[9,222],[10,238],[251,11],[254,12],[255,81,13,14,203],[14,256],[15,264],[271,16],[286,17],[298,18],[301,19],[302,85,22,203,20],[21,303],[308,22],[313,23],[320,24],[25,334],[26,345],[348,27],[30,28,349,89,203],[350,29],[30,355],[31,360],[32,367],[380,33],[390,34],[35,393],[93,38,36,203,394],[37,395],[38,400],[405,39],[412,40],[424,41],[433,42],[43,436],[97,47,437,44,203],[438,45],[46,443],[445,47],[48,450],[457,49],[50,468],[476,51],[52,479],[53,101,480,56,203],[54,481],[55,486],[56,488],[57,493],[58,500],[59,510],[60,517],[522,61],[524],[65,68,72,70,64,63,69,67,66],[64],[],[66],[],[121,74],[104,122],[71],[],[],[59,0,30,47,15,56,17,42,22,58,49,4,48,51,31,18,16,40,1,25,9,14,8,10,3,41,7,57,26,11,60,23,50,32,34,38,24,2,39,61,33],[74],[],[76,74],[73,74],[75],[77,75],[75,80],[78,75],[79],[81,79],[84,79],[82,79],[83],[85,83],[83,88],[86,83],[87],[87,89],[87,92],[87,90],[91],[91,93],[91,96],[91,94],[95],[97,95],[100,95],[95,98],[99],[101,99],[104],[],[103,104],[105,104],[104,106],[104,107],[108,104],[109,104],[110,104],[104,111],[104,112],[113,104],[114,104],[115,104],[116,104],[104,117],[118,104],[119,104],[],[],[156],[125,73],[],[124],[126,124],[129,78,124,127],[],[128],[130,128],[133,131,82,128],[],[132],[132,134],[137,132,86,135],[],[136],[136,138],[136,90,141,139],[],[140],[140,142],[145,140,94,143],[],[144],[144,146],[147,144,98,149],[],[148],[148,150],[148,151,102,153],[],[152],[154,152],[157,158,124],[124],[159,125],[161,160],[],[162],[164,73,163],[],[165],[],[176],[126],[167],[167,168],[169,167],[170,167],[167,171],[167,172],[167,173],[167,174],[167,177,178],[167],[179,180],[],[181],[182,183,126],[],[165],[194],[127],[185],[186,185],[187,185],[188,185],[185,189],[185,190],[185,191],[185,192],[196,185,195],[185],[197,127],[],[199,200,75],[],[76,182,201],[165],[6],[],[205],[],[103,186,208,209,207,168],[],[211,210],[214,213],[],[212],[],[],[212],[216,199,128],[129,217],[219,218],[],[220],[78,221,163],[165],[231],[130],[223],[224,223],[225,223],[226,223],[223,227],[228,223],[229,223],[232,223,233],[223],[234,235],[],[236],[182,130,237],[165],[247],[131],[239],[239,240],[239,241],[239,242],[239,243],[239,244],[239,245],[239,248,249],[239],[131,250],[],[199,252,79],[182,253,80],[165],[13],[205],[258,169,224,187,105,257,259,240],[],[261,260],[262,263],[],[212],[],[212],[132,199,265],[266,133],[268,267],[],[269],[82,270,163],[165],[279],[134],[272],[272,273],[272,274],[272,275],[276,272],[277,272],[281,272,280],[272],[283,282],[],[284],[182,134,285],[165],[294],[135],[287],[288,287],[289,287],[290,287],[291,287],[292,287],[295,296,287],[287],[297,135],[],[299,199,83],[182,84,300],[165],[21,20],[205],[305,304,288,225,106,241,273],[],[307,306],[],[212],[170,310,188,309,107],[],[312,311],[],[212],[199,136,314],[137,315],[317,316],[],[318],[319,86,163],[165],[327],[138],[321],[322,321],[323,321],[324,321],[321,325],[328,329,321],[321],[331,330],[],[332],[182,333,138],[165],[341],[139],[335],[336,335],[335,337],[338,335],[339,335],[342,335,343],[335],[344,139],[],[87,199,346],[182,347,88],[165],[28,29],[205],[226,336,322,108,351,289,274,352],[],[353,354],[],[212],[357,171,109,356,242,189],[],[359,358],[],[212],[199,140,361],[362,141],[364,363],[],[365],[90,163,366],[165],[373],[142],[368],[368,369],[370,368],[371,368],[375,368,374],[368],[376,377],[],[378],[182,142,379],[165],[386],[143],[381],[381,382],[383,381],[381,384],[381,387,388],[381],[389,143],[],[91,199,391],[182,92,392],[165],[37,36],[205],[110,323,382,396,397,275,369,337],[],[398,399],[],[212],[243,172,111,190,402,401,290,227],[],[404,403],[],[212],[144,199,406],[145,407],[409,408],[],[410],[94,411,163],[165],[417],[146],[413],[414,413],[413,415],[419,418,413],[413],[421,420],[],[422],[182,146,423],[165],[429],[147],[425],[425,426],[425,427],[425,431,430],[425],[147,432],[],[434,199,95],[182,96,435],[165],[46,44,45],[205],[383,440,370,414,324,439,426,112],[],[441,442],[],[212],[338,291,244,276,113,444,228,173],[],[114,191,447,446],[],[448,449],[],[212],[148,451,199],[452,149],[453,454],[],[455],[456,98,163],[165],[461],[150],[458],[459,458],[462,458,463],[458],[464,465],[],[466],[467,182,150],[165],[472],[151],[469],[469,470],[473,469,474],[469],[151,475],[],[477,199,99],[182,100,478],[165],[53,54,55],[205],[115,427,470,371,459,483,415,482],[],[484,485],[],[212],[116,277,292,229,339,384,325,487],[],[174,489,117,245,192,490],[],[492,491],[],[212],[199,494,152],[153,495],[497,496],[],[498],[102,499,163],[165],[503],[154],[501],[505,501,504],[501],[506,507],[],[508],[182,154,509],[165],[513],[155],[511],[515,511,514],[511],[516,155],[],[118,471,460,502,416,518,512,519],[],[521,520],[],[212],[385,119,428,523,372,340,278,326],[],[526,193,525,175,230,120,246,293],[],[527,528],[],[212]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Method Declaration ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PRIVATE","STATIC","Void Type ","Simple Name writeLongBits ","Parameter long bits ","Parameter JsonStream stream ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr bits ","Simple Name bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Void Type ","Name Expr bits ","Name Expr iter ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Primitive Type long ","Boolean Literal Expr true ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr bits ","Name Expr target ","Simple Name stream ","Name Expr stream ","Name Expr stream ","Name Expr stream ","Name Expr stream ","Name Expr stream ","Name Expr stream ","Name Expr stream ","Name Expr stream ","Name Expr stream ","Name Expr stream ","Expression Stmt ","Name Expr stream ","Name Expr stream ","Name Expr stream ","Name Expr stream ","Name Expr stream ","Primitive Type long ","Class Or Interface Type JsonStream ","Variable Declaration Expr ","Simple Name digit ","Name Expr DIGITS ","Name Expr digit ","Name Expr digit ","Name Expr digit ","Name Expr DIGITS ","Name Expr digit ","Name Expr digit ","Name Expr digit ","Name Expr DIGITS ","Name Expr digit ","Name Expr digit ","Name Expr digit ","Expression Stmt ","Name Expr digit ","Name Expr digit ","Name Expr digit ","Class Or Interface Type String ","Name Expr digit ","Name Expr digit ","Name Expr digit ","Name Expr DIGITS ","Name Expr digit ","Name Expr digit ","Name Expr digit ","Name Expr DIGITS ","Name Expr digit ","Name Expr digit ","Name Expr digit ","Name Expr DIGITS ","Name Expr digit ","Name Expr parts ","Variable Declarator int digit = ","Primitive Type int ","Array Access Expr (int) (bits & 0xff) ","Cast Expr ","Primitive Type int ","Enclosed Expr ","Binary Expr BINARY_AND ","BINARY_AND","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name b2 ","Name Expr b2 ","Name Expr b2 ","Name Expr b2 ","Name Expr b2 ","Name Expr b2 ","Name Expr b2 ","Name Expr b2 ","Name Expr b2 ","Variable Declarator byte b2 = ","Primitive Type byte ","Cast Expr ","Name Expr keys ","Enclosed Expr ","Binary Expr SIGNED_RIGHT_SHIFT ","SIGNED_RIGHT_SHIFT","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name b1 ","Name Expr b1 ","Name Expr b1 ","Name Expr b1 ","Name Expr b1 ","Name Expr b1 ","Name Expr b1 ","Name Expr b1 ","Name Expr b1 ","Variable Declarator byte b1 = ","Name Expr bits ","Cast Expr ","Primitive Type byte ","Assign Expr ASSIGN ","ASSIGN","Binary Expr SIGNED_RIGHT_SHIFT ","Integer Literal Expr Note Zero  ","Block Stmt ","EQUALS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Method Call Expr ","Simple Name write ","Cast Expr ","Cast Expr ","Primitive Type byte ","Char Literal Expr ''' ","'''","Primitive Type byte ","Char Literal Expr ''' ","Assign Expr ASSIGN ","Array Access Expr (int) (bits & 0xff) ","Cast Expr ","Primitive Type int ","Enclosed Expr ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Expression Stmt ","Simple Name b4 ","Name Expr b4 ","Name Expr b4 ","Name Expr b4 ","Name Expr b4 ","Name Expr b4 ","Name Expr b4 ","Name Expr b4 ","Variable Declarator byte b4 = ","Primitive Type byte ","Cast Expr ","Simple Name next ","Enclosed Expr ","Binary Expr SIGNED_RIGHT_SHIFT ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name b3 ","Name Expr b3 ","Name Expr b3 ","Name Expr b3 ","Name Expr b3 ","Name Expr b3 ","Name Expr b3 ","Name Expr b3 ","Variable Declarator byte b3 = ","Name Expr code ","Cast Expr ","Primitive Type byte ","Assign Expr ASSIGN ","Binary Expr SIGNED_RIGHT_SHIFT ","Integer Literal Expr Note Zero  ","Block Stmt ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name write ","Cast Expr ","Cast Expr ","Primitive Type byte ","Char Literal Expr ''' ","Primitive Type byte ","Char Literal Expr ''' ","Method Call Expr ","Array Access Expr (int) (bits & 0xff) ","Cast Expr ","Primitive Type int ","Enclosed Expr ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name b6 ","Name Expr b6 ","Name Expr b6 ","Name Expr b6 ","Name Expr b6 ","Name Expr b6 ","Name Expr b6 ","Variable Declarator byte b6 = ","Primitive Type byte ","Cast Expr ","Simple Name next ","Enclosed Expr ","Binary Expr SIGNED_RIGHT_SHIFT ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name b5 ","Name Expr b5 ","Name Expr b5 ","Name Expr b5 ","Name Expr b5 ","Name Expr b5 ","Name Expr b5 ","Variable Declarator byte b5 = ","Primitive Type byte ","Cast Expr ","Void Type ","Assign Expr ASSIGN ","Binary Expr SIGNED_RIGHT_SHIFT ","Integer Literal Expr Note Zero  ","Block Stmt ","Integer Literal Expr Zero  ","Method Call Expr ","Name Expr clazz ","Cast Expr ","Primitive Type byte ","Char Literal Expr ''' ","Method Call Expr ","Simple Name write ","Cast Expr ","Primitive Type byte ","Char Literal Expr ''' ","Assign Expr ASSIGN ","Array Access Expr (int) (bits & 0xff) ","Parameter StringBuilder lines ","Primitive Type int ","Enclosed Expr ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name b8 ","Name Expr b8 ","Name Expr b8 ","Name Expr b8 ","Name Expr b8 ","Name Expr b8 ","Variable Declarator byte b8 = ","Primitive Type byte ","Cast Expr ","Primitive Type byte ","Enclosed Expr ","Binary Expr SIGNED_RIGHT_SHIFT ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name b7 ","Name Expr b7 ","Name Expr b7 ","Name Expr b7 ","Name Expr b7 ","Name Expr b7 ","Variable Declarator byte b7 = ","Primitive Type long ","Cast Expr ","Primitive Type byte ","Assign Expr ASSIGN ","Binary Expr SIGNED_RIGHT_SHIFT ","Integer Literal Expr Note Zero  ","Block Stmt ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name write ","Cast Expr ","Primitive Type byte ","Char Literal Expr ''' ","Method Call Expr ","Simple Name write ","Cast Expr ","Primitive Type byte ","Char Literal Expr ''' ","Assign Expr ASSIGN ","Array Access Expr (int) (bits & 0xff) ","Cast Expr ","Primitive Type int ","Enclosed Expr ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name b10 ","Name Expr b10 ","Name Expr b10 ","Name Expr b10 ","Name Expr b10 ","Variable Declarator byte b10 = ","Primitive Type byte ","Cast Expr ","Primitive Type byte ","Enclosed Expr ","Binary Expr SIGNED_RIGHT_SHIFT ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name b9 ","Name Expr b9 ","Name Expr b9 ","Name Expr b9 ","Name Expr b9 ","Variable Declarator byte b9 = ","Primitive Type byte ","Cast Expr ","Boolean Literal Expr true ","Assign Expr ASSIGN ","Binary Expr SIGNED_RIGHT_SHIFT ","Integer Literal Expr Note Zero  ","Block Stmt ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name write ","Cast Expr ","Primitive Type byte ","Char Literal Expr ''' ","Method Call Expr ","Simple Name write ","Cast Expr ","Primitive Type byte ","Char Literal Expr ''' ","Assign Expr ASSIGN ","Array Access Expr (int) (bits & 0xff) ","Cast Expr ","Primitive Type int ","Enclosed Expr ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name b12 ","Name Expr b12 ","Name Expr b12 ","Name Expr b12 ","Variable Declarator byte b12 = ","Primitive Type byte ","Cast Expr ","Primitive Type byte ","Enclosed Expr ","Binary Expr SIGNED_RIGHT_SHIFT ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name b11 ","Name Expr b11 ","Name Expr b11 ","Name Expr b11 ","Variable Declarator byte b11 = ","Primitive Type byte ","Cast Expr ","Primitive Type byte ","Assign Expr ASSIGN ","Binary Expr SIGNED_RIGHT_SHIFT ","Integer Literal Expr Note Zero  ","Block Stmt ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name write ","Cast Expr ","Primitive Type byte ","Char Literal Expr ''' ","Method Call Expr ","Simple Name write ","Method Call Expr ","Simple Name write ","Cast Expr ","Primitive Type byte ","Char Literal Expr ''' ","Assign Expr ASSIGN ","Array Access Expr (int) (bits & 0xff) ","Cast Expr ","Primitive Type int ","Enclosed Expr ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name b14 ","Name Expr b14 ","Name Expr eIx ","Variable Declarator byte b14 = ","Primitive Type byte ","Cast Expr ","Primitive Type byte ","Enclosed Expr ","Binary Expr SIGNED_RIGHT_SHIFT ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name b13 ","Name Expr b13 ","Name Expr b13 ","Variable Declarator byte b13 = ","Primitive Type byte ","Cast Expr ","Primitive Type byte ","Assign Expr ASSIGN ","Binary Expr SIGNED_RIGHT_SHIFT ","Integer Literal Expr Note Zero  ","Block Stmt ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name write ","Cast Expr ","Primitive Type byte ","Char Literal Expr ''' ","Method Call Expr ","Simple Name write ","Method Call Expr ","Simple Name write ","Cast Expr ","Primitive Type byte ","Char Literal Expr ''' ","Assign Expr ASSIGN ","Array Access Expr (int) (bits & 0xff) ","Cast Expr ","Primitive Type int ","Enclosed Expr ","Binary Expr BINARY_AND ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Primitive Type int ","Name Expr b16 ","Variable Declarator byte b16 = ","Primitive Type byte ","Cast Expr ","Primitive Type byte ","Enclosed Expr ","Binary Expr SIGNED_RIGHT_SHIFT ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name b15 ","Name Expr b15 ","Variable Declarator byte b15 = ","Primitive Type byte ","Binary Expr NOT_EQUALS ","Primitive Type byte ","Method Call Expr ","Simple Name write ","Cast Expr ","Primitive Type byte ","Char Literal Expr ''' ","Method Call Expr ","Simple Name write ","Method Call Expr ","Simple Name write ","Cast Expr ","Primitive Type byte ","Char Literal Expr ''' "]}
