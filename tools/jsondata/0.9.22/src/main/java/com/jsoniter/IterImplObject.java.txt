{"fileName":"src/main/java/com/jsoniter/IterImplObject.java","version":"0.9.22","hasMethodName":["readObject-IterImplObject-JsonIterator","readObjectCB-IterImplObject-JsonIterator-JsonIterator.ReadObjectCallback-Object"]}
{"fileName":"src/main/java/com/jsoniter/IterImplObject.java","version":"0.9.22","methodName":"readObject-IterImplObject-JsonIterator","callMethodNameReferTo":{"128":"src/main/java/com/jsoniter/IterImpl.java?nextToken-IterImpl-JsonIterator","84":"src/main/java/com/jsoniter/IterImpl.java?nextToken-IterImpl-JsonIterator","100":"src/main/java/com/jsoniter/IterImpl.java?nextToken-IterImpl-JsonIterator","69":"src/main/java/com/jsoniter/IterImpl.java?nextToken-IterImpl-JsonIterator","73":"src/main/java/com/jsoniter/IterImpl.java?skipFixedBytes-IterImpl-JsonIterator-int"},"num":145,"succs":[[1,59],[22,29,3,2,32,7],[22,60,29,3,32,7],[71,5,4,6],[72],[73,6],[34,78,79,7],[18,21,8,9,10,71],[81],[82,10],[11,86],[18,87,88,12,64],[90,13],[14,92],[15,99],[102,101,100,17,16],[106,17],[18,94,34,78],[19,111],[65,21,87,20,112],[21,114,34,78],[22,115],[25,23,71,24,28],[119],[25,120],[127,26],[101,128,27,129,28],[132,28],[29,122,34,78],[31,71,30],[113],[34,32,136,78],[33,71],[137],[39,38,44,35,41,37,40,36,42],[36],[37],[],[39],[],[58,46],[43],[],[],[0,1],[46],[],[45,46],[47,46],[48,46],[49,46],[50,46],[51,15,46],[46,52],[53,46],[54,46],[55,26,46],[56,46],[],[67],[61,45],[],[63,60,48,2],[],[62],[64,62],[65,62],[60,68,69],[60],[61,45,70],[],[],[],[47,75,76,74],[],[],[77],[],[],[80],[],[],[84,83,62],[],[63,48,85],[],[14,12,17,13],[],[89],[],[49,91],[],[95],[50],[93],[93,97,96],[93],[50,98],[],[16],[104,51,103],[],[105],[],[],[],[107,108,52,109],[],[110],[110],[],[20],[113],[],[80],[117,53,118,116],[],[110],[110],[],[123],[54],[121],[125,121,124],[121],[54,126],[],[27],[130,55,131],[105],[],[],[56,135,134,133],[],[110],[110],[80],[139,138,57,140],[],[110],[143,141,142],[110],[],[66,144],[]],"attribute":["Expression Stmt ","Switch Stmt ","Name Expr c ","Switch Entry Stmt ","Char Literal Expr '[' ","Expression Stmt ","Return Stmt ","Switch Entry Stmt ","Primitive Type int ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Throw Stmt ","Switch Entry Stmt ","Char Literal Expr ',' ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Return Stmt ","Switch Entry Stmt ","Char Literal Expr '}' ","Return Stmt ","Switch Entry Stmt ","Throw Stmt ","Method Declaration Throws ","PUBLIC","STATIC","FINAL","Class Or Interface Type String ","Simple Name readObject ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Simple Name User ","Name Expr size ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr Long ","Simple Name User ","Name Expr pool ","Simple Name demo ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name c ","Simple Name jsoniter ","Name Expr c ","Name Expr IterImpl ","Name Expr c ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name writeNull ","SwitchEntryStmt","'n'","Method Call Expr ","Name Expr IterImpl ","Simple Name skipFixedBytes ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","ReturnStmt","Null Literal Expr ","NullLiteralExpr","'{'","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Simple Name nextToken ","Block Stmt ","EQUALS","Char Literal Expr ''' ","'''","Method Call Expr ","Simple Name unreadByte ","Variable Declaration Expr ","Simple Name field ","Name Expr field ","Variable Declarator String field = ","Class Or Interface Type String ","Method Call Expr ","Simple Name readString ","Block Stmt ","Method Call Expr ","NOT_EQUALS","Char Literal Expr ':' ","Simple Name readLong ","Simple Name nextToken ","':'","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Block Stmt ","Char Literal Expr '}' ","'}'","Null Literal Expr ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","','","Variable Declaration Expr ","Simple Name field ","Name Expr field ","Variable Declarator String field = ","Break Stmt ","Method Call Expr ","Simple Name readString ","Block Stmt ","Method Call Expr ","Char Literal Expr ':' ","Name Expr IterImpl ","Simple Name nextToken ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Null Literal Expr ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","PLUS","Simple Name decode_ ","Primitive Type char "]}
{"fileName":"src/main/java/com/jsoniter/IterImplObject.java","version":"0.9.22","methodName":"readObjectCB-IterImplObject-JsonIterator-JsonIterator.ReadObjectCallback-Object","callMethodNameReferTo":{"128":"src/main/java/com/jsoniter/IterImpl.java?nextToken-IterImpl-JsonIterator","162":"src/main/java/com/jsoniter/IterImpl.java?skipFixedBytes-IterImpl-JsonIterator-int","84":"src/main/java/com/jsoniter/IterImpl.java?nextToken-IterImpl-JsonIterator","137":"src/main/java/com/jsoniter/IterImpl.java?nextToken-IterImpl-JsonIterator","92":"src/main/java/com/jsoniter/IterImpl.java?nextToken-IterImpl-JsonIterator","109":"src/main/java/com/jsoniter/IterImpl.java?nextToken-IterImpl-JsonIterator"},"num":172,"succs":[[1,73],[2,86],[28,88,3,87,76],[90,4],[94,5],[88,24,6,95,79],[7,97],[99,8],[108,9],[110,10,109,111,11],[115,11],[120,12],[14,122,121,13],[14,125,33,124],[15,127],[128,88,129,23,16],[17,133],[18,136],[110,20,137,19,138],[20,141],[21,145],[14,22,146,122],[14,148,33,124],[24,33,149,124],[151,25],[88,80,26,27,152],[33,27,154,124],[28,155],[29,159],[88,30,81,160,32],[31,162],[167,33,32,124],[168],[39,43,40,41,34,42,38,36,35,45,37],[35],[36],[],[38],[],[47,68],[69,63],[66,72],[44],[],[],[28,1,0,32],[47],[],[47,46],[47,48],[47,49],[50,47],[51,47,9],[47,52],[58,47,53],[54,47],[47,55],[18,56,47],[57,47],[58,47],[47,59],[60,47],[63],[],[63,62],[66],[],[65,66],[],[71,70],[],[],[],[82],[75,46],[],[74],[2,76,78,48,74],[],[77,2],[77,2,79],[80,77],[83,74,84],[74],[85,46,75],[],[24,3,27,4],[89],[],[],[77,92,91],[],[93,78,48],[],[14,6,7,8,11,23],[96],[],[98,49],[],[104],[50],[100],[103,101,100,55],[102],[100,106,105],[100],[107,50],[],[10],[113,51,112],[],[114],[],[],[],[116,118,117,52],[],[119],[119],[],[13],[65,123,101,53,62],[],[],[],[126],[],[20,17,16],[54,130,131],[132],[],[],[],[134,91,102],[135,55],[],[19],[139,56,140],[114],[],[],[57,143,144,142],[],[119],[119],[22],[103,64,67,58,147],[],[126],[150],[],[26],[153],[],[150],[156,158,59,157],[],[119],[119],[31,30],[161],[],[165,60,163,164],[],[],[166],[],[150],[170,169,61,171],[],[119],[119]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","If Stmt ","Unary Expr ! ","Return Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","If Stmt ","Unary Expr ! ","Return Stmt ","Return Stmt ","For Each Stmt ","Binary Expr EQUALS ","Return Stmt ","Throw Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Return Stmt ","Throw Stmt ","Method Declaration Throws ","PUBLIC","STATIC","FINAL","Primitive Type boolean ","Simple Name readObjectCB ","Parameter JsonIterator iter ","Parameter JsonIterator.ReadObjectCallback cb ","Parameter Object attachment ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Simple Name data ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr cb ","Simple Name cb ","Name Expr cb ","Name Expr attachment ","Simple Name attachment ","Name Expr attachment ","Class Or Interface Type JsonIterator ","Class Or Interface Type ReadObjectCallback ","Class Or Interface Type JsonIterator ","Simple Name ReadObjectCallback ","Class Or Interface Type Object ","Variable Declaration Expr ","Simple Name c ","Name Expr IterImpl ","Integer Literal Expr Zero  ","Name Expr c ","Name Expr IterImpl ","Name Expr c ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Block Stmt ","Name Expr len ","EQUALS","'{'","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Simple Name nextToken ","Block Stmt ","Char Literal Expr ''' ","'''","Method Call Expr ","Simple Name unreadByte ","Variable Declaration Expr ","Simple Name field ","Name Expr field ","Name Expr field ","Name Expr field ","Variable Declarator String field = ","Array Type 1 ","Method Call Expr ","Simple Name readString ","Block Stmt ","Method Call Expr ","NOT_EQUALS","Char Literal Expr ':' ","Name Expr IterImpl ","Simple Name nextToken ","':'","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Name Expr anyEncoder ","StringLiteralExpr","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Simple Name handle ","ReturnStmt","Boolean Literal Expr false ","false","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr IterImpl ","Simple Name nextToken ","','","Assign Expr ASSIGN ","Method Call Expr ","Simple Name readString ","Block Stmt ","Method Call Expr ","Char Literal Expr ':' ","Name Expr IterImpl ","Simple Name nextToken ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Name Expr Double ","Boolean Literal Expr false ","Boolean Literal Expr true ","true","Block Stmt ","Char Literal Expr '}' ","'}'","Boolean Literal Expr true ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Block Stmt ","Char Literal Expr 'n' ","'n'","Method Call Expr ","Name Expr IterImpl ","Simple Name skipFixedBytes ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Boolean Literal Expr true ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  "]}
