{"fileName":"src/main/java/com/jsoniter/IterImplNumber.java","version":"0.9.22","hasMethodName":["readDouble-IterImplNumber-JsonIterator","readFloat-IterImplNumber-JsonIterator","readInt-IterImplNumber-JsonIterator","readLong-IterImplNumber-JsonIterator"]}
{"fileName":"src/main/java/com/jsoniter/IterImplNumber.java","version":"0.9.22","methodName":"readDouble-IterImplNumber-JsonIterator","callMethodNameReferTo":{"38":"src/main/java/com/jsoniter/IterImpl.java?readDouble-IterImpl-JsonIterator","44":"src/main/java/com/jsoniter/IterImpl.java?readDouble-IterImpl-JsonIterator","30":"src/main/java/com/jsoniter/IterImpl.java?nextToken-IterImpl-JsonIterator"},"num":47,"succs":[[1,24],[32,4,2],[33,34,3,4,27],[37,36,7],[6,5],[6,42],[44,36,7],[11,12,15,13,8,17,14,10,9],[9],[10],[],[12],[],[23,19],[16],[],[],[0,1],[19],[],[19,18],[19,18],[20,19,21],[],[10,28],[26,18],[],[25],[29,25,30],[25],[31,26,18],[],[3],[],[35],[],[],[38,39],[20,40,41,7],[],[],[],[43,21],[],[22,46,45,7],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Block Stmt ","Method Call Expr ","Return Stmt ","Method Declaration Throws ","PUBLIC","STATIC","FINAL","Primitive Type double ","Simple Name readDouble ","Parameter final JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr [FINAL] ","Simple Name c ","Name Expr IterImpl ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Block Stmt ","EQUALS","Char Literal Expr '-' ","'-'","ReturnStmt","Unary Expr - ","Method Call Expr ","MINUS","Name Expr IterImpl ","Simple Name readDouble ","Method Call Expr ","Simple Name unreadByte ","Method Call Expr ","Name Expr IterImpl ","Simple Name readDouble "]}
{"fileName":"src/main/java/com/jsoniter/IterImplNumber.java","version":"0.9.22","methodName":"readFloat-IterImplNumber-JsonIterator","callMethodNameReferTo":{"18":"src/main/java/com/jsoniter/IterImplNumber.java?readDouble-IterImplNumber-JsonIterator","53":"src/main/java/com/jsoniter/IterImplNumber.java?readDouble-IterImplNumber-JsonIterator","59":"src/main/java/com/jsoniter/IterImplNumber.java?readDouble-IterImplNumber-JsonIterator"},"num":62,"succs":[[4,5,1,6,7,3,2,10,8],[2],[3],[],[5],[],[14,13],[9],[],[],[11],[16,0,15],[21,13],[],[],[],[18,17],[],[19,20,12,22],[],[],[],[30,31,32,33,1,34,7,3,2],[24,40],[48,25,27],[49,50,26,27,43],[52,15,22],[29,28],[29,57],[59,15,22],[31],[],[21,39],[],[23,24],[21],[21,35],[21,35],[36,21,37],[],[3,44],[42,35],[],[41],[45,41,46],[41],[47,42,35],[],[26],[],[51],[],[53,54],[55,36,56,22],[],[],[],[58,37],[],[38,61,60,22],[],[]],"attribute":["Method Declaration Throws ","PUBLIC","STATIC","FINAL","Binary Expr LESS ","Simple Name serialize ","Parameter final JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","Name Expr iter ","Simple Name iter ","Class Or Interface Type JsonIterator ","ReturnStmt","Cast Expr ","Primitive Type float ","Method Call Expr ","Name Expr IterImplNumber ","Simple Name readDouble ","Simple Name iter ","Method Declaration Throws ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Block Stmt ","Method Call Expr ","Return Stmt ","Primitive Type double ","Simple Name readDouble ","Parameter final JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr [FINAL] ","Simple Name c ","Name Expr IterImpl ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Block Stmt ","EQUALS","Char Literal Expr '-' ","'-'","Unary Expr - ","Method Call Expr ","MINUS","Name Expr IterImpl ","Simple Name readDouble ","Method Call Expr ","Simple Name unreadByte ","Method Call Expr ","Name Expr IterImpl ","Simple Name readDouble "]}
{"fileName":"src/main/java/com/jsoniter/IterImplNumber.java","version":"0.9.22","methodName":"readInt-IterImplNumber-JsonIterator","callMethodNameReferTo":{"35":"src/main/java/com/jsoniter/IterImpl.java?nextToken-IterImpl-JsonIterator","55":"src/main/java/com/jsoniter/IterImpl.java?readInt-IterImpl-JsonIterator-byte","42":"src/main/java/com/jsoniter/IterImpl.java?readInt-IterImpl-JsonIterator-byte","45":"src/main/java/com/jsoniter/IterImpl.java?readByte-IterImpl-JsonIterator"},"num":68,"succs":[[28,1],[2,37,4],[38,39,31,3,4],[42,9,41,10],[5,9,6],[48,6],[57,7],[38,51,8,9,58],[61,9],[66,41,10],[16,18,11,20,15,17,13,12,14],[12],[13],[],[15],[],[22,27],[19],[],[],[1,0],[22],[],[21,22],[22,23],[21,22],[24,25,22],[],[33],[30,21],[],[29],[2,31,29],[34,29,35],[29],[30,36,21],[],[3],[],[40],[],[],[45,43,23,44],[],[],[24,46,47],[],[],[53],[50,32,25],[],[49],[49,51],[49,54,55],[49],[56,50,32,25],[],[8],[60,59],[],[],[62,26,63,64],[],[65],[65],[],[52,67],[]],"attribute":["Return Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Return Stmt ","Method Declaration Throws ","PUBLIC","STATIC","FINAL","Primitive Type int ","Simple Name readInt ","Parameter final JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name c ","Name Expr IterImpl ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Block Stmt ","EQUALS","Char Literal Expr '-' ","'-'","ReturnStmt","Method Call Expr ","Simple Name writeVal ","Simple Name readInt ","Method Call Expr ","Name Expr IterImpl ","Simple Name readByte ","Variable Declaration Expr ","Simple Name val ","Name Expr IterImpl ","Name Expr val ","Class Or Interface Type Any ","Variable Declarator int val = ","Primitive Type int ","Method Call Expr ","Simple Name readInt ","Block Stmt ","Field Access Expr ","Name Expr Integer ","Simple Name MIN_VALUE ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Name Expr iter ","MINUS"]}
{"fileName":"src/main/java/com/jsoniter/IterImplNumber.java","version":"0.9.22","methodName":"readLong-IterImplNumber-JsonIterator","callMethodNameReferTo":{"35":"src/main/java/com/jsoniter/IterImpl.java?nextToken-IterImpl-JsonIterator","55":"src/main/java/com/jsoniter/IterImpl.java?readLong-IterImpl-JsonIterator-byte","42":"src/main/java/com/jsoniter/IterImpl.java?readLong-IterImpl-JsonIterator-byte","45":"src/main/java/com/jsoniter/IterImpl.java?readByte-IterImpl-JsonIterator"},"num":68,"succs":[[28,1],[2,37,4],[38,3,31,39,4],[42,10,41,9],[5,6,9],[6,48],[57,7],[38,8,58,51,9],[61,9],[66,10,41],[18,11,20,17,13,12,16,14,15],[12],[13],[],[15],[],[27,22],[19],[],[],[1,0],[22],[],[21,22],[23,22],[21,22],[25,24,22],[],[33],[30,21],[],[29],[2,29,31],[35,29,34],[29],[30,21,36],[],[3],[],[40],[],[],[45,23,43,44],[],[],[46,47,24],[],[],[53],[25,50,32],[],[49],[49,51],[49,54,55],[49],[50,25,56,32],[],[8],[59,60],[],[],[64,62,26,63],[],[65],[65],[],[52,67],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Return Stmt ","Throw Stmt ","Return Stmt ","Method Declaration Throws ","PUBLIC","STATIC","FINAL","Primitive Type long ","Simple Name readLong ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr desc ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name c ","Name Expr IterImpl ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Block Stmt ","EQUALS","Char Literal Expr '-' ","'-'","ReturnStmt","Method Call Expr ","Name Expr IterImpl ","Simple Name readLong ","Method Call Expr ","Name Expr IterImpl ","Simple Name readByte ","Variable Declaration Expr ","Simple Name val ","Name Expr IterImpl ","Name Expr val ","Name Expr val ","Variable Declarator long val = ","Primitive Type long ","Method Call Expr ","Simple Name readLong ","Block Stmt ","Field Access Expr ","Null Literal Expr ","Simple Name MIN_VALUE ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Name Expr keys ","MINUS"]}
