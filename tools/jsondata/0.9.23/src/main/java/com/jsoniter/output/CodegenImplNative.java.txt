{"fileName":"src/main/java/com/jsoniter/output/CodegenImplNative.java","version":"0.9.23","hasMethodName":["genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean","genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean-boolean","getTypeName-CodegenImplNative-Type","genEnum-CodegenImplNative-Class"]}
{"fileName":"src/main/java/com/jsoniter/output/CodegenImplNative.java","version":"0.9.23","methodName":"genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean","callMethodNameReferTo":{},"num":341,"succs":[[3,8,5,6,2,4,9,7,1],[2],[],[4],[],[11,18],[13,19],[20,15],[21,17],[22],[26,11],[],[13,27],[],[28,15],[],[17,29],[],[],[],[],[],[23],[12,25,10,14,24,31,16],[],[32,30],[],[],[],[],[],[72,71,2,75,74,1,70,73,77,76],[],[113,34],[35,127],[36,144],[146,145,37,51,121],[150,38],[43,39,151,153,152],[40,158],[41,162],[169,42],[43,31,172],[44,173],[45,175,99,174,47],[176,46],[31,172,47],[48,186],[101,51,188,187,49],[50,190],[31,51,172],[52,200],[54,53,107,155],[54,201],[206,55],[56,209],[57,68,221],[223,68,58,212,222],[224,64,59],[106,64,29,60],[61,225],[227,62],[63,234],[242],[65,67,66],[249,66],[253,67],[261],[69],[265],[71],[],[26,108],[109,27],[28,110],[111,29],[112,30],[35,54,51,33,56,34,55],[26],[78,26],[26,79],[26,80],[81,26],[82,26],[26,83],[84,26],[85,26],[82,26],[26,87],[26,86,88],[82,26,89],[27],[27,91],[27,92],[27,93],[94,27,93],[95,27,93],[28],[28,97],[98,28],[44,28,184,99],[100,28],[101,28],[28,184,102],[184,28,102,103],[184,28,102,104],[59,29],[30],[],[],[],[],[],[117],[115],[],[114],[119,114,118],[114],[122,120,121],[123,124],[],[126],[115,125],[],[],[],[138],[129,97],[],[128],[128,132],[130,128],[131],[133,131],[134,131],[135,134,131],[134,131,136],[128,140,139],[128],[141,142],[129,97,143],[],[],[43,37,47],[130,147,148],[149],[],[],[],[40,41,39,42],[116,154,152],[],[98,156,121],[106,155],[],[157],[],[78,160,159],[],[161],[],[164,79,163],[],[166,165,167,91],[],[],[168],[],[171,170,80],[],[161],[],[45,46],[],[],[81,177,178],[],[179,181,180,182,92],[],[],[168],[100,183,185],[],[],[290,288,2,289,1,287],[50,49],[300,189,312],[],[],[82,191,192],[],[194,195,93,193,196],[],[],[168],[198,197,185],[],[184,199],[],[53],[202,131,203],[],[204,205,132],[],[168],[102,133,207,208],[],[],[217],[211,134],[],[210,216],[57,210,212],[57,210,213],[57,210,212],[57,210,214,215],[219,210,218],[210],[211,134,220],[],[58],[],[149],[61,62,63,60],[83,226],[],[229,228,84],[],[230,231,232],[],[],[233,213],[],[85,235,236],[],[94,135,240,238,237,239],[],[],[168],[185,241,103],[],[244,86,243],[],[246,247,245],[],[],[214,248],[],[251,250,87],[],[252,215],[],[255,88,254],[],[256,95,258,259,257,136],[],[],[168],[260,104,185],[],[89,262,263],[],[264,216],[],[266,90,267],[],[96,269,137,271,268,270],[],[],[168],[105,185,272],[],[298,277,274],[291,277,275,299,187],[301,276],[308,185,172],[278,310,282],[293,311,282,279,187],[313,280],[281,320],[329,185,172],[331,285,283],[285,332,284,187,295],[185,333,172],[286],[337],[288],[],[184,297],[273],[184],[291,184,274],[291,184,274],[293,278,184,274],[293,278,184,274],[278,294,184,274,283,295,292],[],[276,275],[],[],[304],[292],[302],[302,306,305],[302],[307,292],[],[303,309],[],[281,279,280],[],[],[316],[294],[314],[314,318,317],[314],[319,294],[],[323],[315],[321],[325,324,321],[321],[327,326],[],[328,315],[],[322,330],[],[284],[],[334,335],[336],[],[],[339,338],[],[340,204,296],[168]],"attribute":["Method Declaration ","PUBLIC","STATIC","Void Type ","Simple Name genWriteOp ","Parameter CodegenResult ctx ","Parameter String code ","Parameter Type valueType ","Parameter boolean isNullable ","Block Stmt ","Name Expr ctx ","Simple Name ctx ","Name Expr code ","Simple Name code ","Name Expr valueType ","Simple Name valueType ","Name Expr isNullable ","Simple Name isNullable ","Class Or Interface Type CodegenResult ","Class Or Interface Type String ","Class Or Interface Type Type ","Primitive Type boolean ","Expression Stmt ","Method Call Expr ","Simple Name genWriteOp ","Boolean Literal Expr true ","Simple Name ctx ","Simple Name code ","Simple Name valueType ","Simple Name isNullable ","Simple Name isCollectionValueNullable ","Method Declaration ","true","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Binary Expr AND ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Simple Name writeTo ","If Stmt ","Instance Of Expr ","Expression Stmt ","Field Access Expr ","If Stmt ","Unary Expr ! ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","If Stmt ","Name Expr isNullable ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Void Type ","Simple Name genWriteOp ","Parameter CodegenResult ctx ","Parameter String code ","Parameter Type valueType ","Parameter boolean isNullable ","Parameter boolean isCollectionValueNullable ","Block Stmt ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr code ","Name Expr code ","Name Expr code ","Name Expr code ","Name Expr code ","Name Expr code ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr isNullable ","Name Expr isCollectionValueNullable ","Class Or Interface Type CodegenResult ","Class Or Interface Type String ","Class Or Interface Type Type ","Primitive Type boolean ","Primitive Type boolean ","Variable Declaration Expr ","Simple Name noIndention ","Name Expr JsoniterSpi ","Name Expr noIndention ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","EQUALS","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name indentionStep ","Simple Name getCurrentConfig ","Zero IntegerLiteralExpr","Variable Declaration Expr ","Simple Name cacheKey ","Name Expr TypeLiteral ","Name Expr cacheKey ","Name Expr cacheKey ","Name Expr cacheKey ","Name Expr cacheKey ","Name Expr cacheKey ","Name Expr cacheKey ","Name Expr cacheKey ","Name Expr cacheKey ","Variable Declarator String cacheKey = ","Class Or Interface Type String ","Method Call Expr ","Method Call Expr ","Simple Name getEncoderCacheKey ","Simple Name create ","Block Stmt ","Method Call Expr ","Null Literal Expr ","Name Expr JsoniterSpi ","Simple Name getEncoder ","NullLiteralExpr","Block Stmt ","Binary Expr AND ","AND","Binary Expr EQUALS ","Unary Expr ! ","LOGICAL_COMPLEMENT","Class Expr String.class ","Class Or Interface Type String ","Method Call Expr ","Simple Name buffer ","Char Literal Expr ''' ","'''","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Simple Name buffer ","Char Literal Expr ''' ","ReturnStmt","Block Stmt ","Name Expr NATIVE_ENCODERS ","Simple Name containsKey ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getTypeName ","Simple Name fieldType ","Method Declaration ","Block Stmt ","InstanceOfExpr","Class Or Interface Type WildcardType ","WildcardType","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getTypeName ","Class Expr Object.class ","Class Or Interface Type Object ","Block Stmt ","Assign Expr ASSIGN ","ASSIGN","Binary Expr PLUS ","PLUS","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr Codegen ","Simple Name getEncoder ","Variable Declaration Expr ","Simple Name generatedSource ","Name Expr Codegen ","Name Expr generatedSource ","Name Expr generatedSource ","Name Expr generatedSource ","Name Expr generatedSource ","Name Expr generatedSource ","Variable Declarator CodegenResult generatedSource = ","Class Or Interface Type CodegenResult ","Method Call Expr ","Simple Name getGeneratedSource ","Block Stmt ","NOT_EQUALS","Null Literal Expr ","Block Stmt ","Method Call Expr ","Simple Name appendBuffer ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr CodegenResult ","Simple Name bufferToWriteOp ","Field Access Expr ","Simple Name prelude ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getTypeName ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr CodegenResult ","Simple Name bufferToWriteOp ","Field Access Expr ","Simple Name epilogue ","Method Call Expr ","Simple Name buffer ","Field Access Expr ","Simple Name prelude ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getTypeName ","Method Call Expr ","Simple Name buffer ","Field Access Expr ","Simple Name epilogue ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getTypeName ","If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Return Stmt ","Block Stmt ","Throw Stmt ","Class Or Interface Type String ","Simple Name getTypeName ","Parameter Type fieldType ","Block Stmt ","Name Expr fieldType ","Name Expr fieldType ","Name Expr fieldType ","Name Expr fieldType ","Name Expr fieldType ","Name Expr fieldType ","Class Or Interface Type Type ","Block Stmt ","Class Or Interface Type Class ","Class","Variable Declaration Expr ","Simple Name clazz ","Name Expr clazz ","Variable Declarator Class clazz = ","Class Or Interface Type Class ","Cast Expr ","Class Or Interface Type Class ","Method Call Expr ","Simple Name getCanonicalName ","Block Stmt ","Class Or Interface Type ParameterizedType ","ParameterizedType","Variable Declaration Expr ","Simple Name pType ","Name Expr pType ","Variable Declarator ParameterizedType pType = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name clazz ","Name Expr clazz ","Variable Declarator Class clazz = ","Class Or Interface Type Class ","Cast Expr ","Class Or Interface Type Class ","Method Call Expr ","Simple Name getRawType ","Method Call Expr ","Simple Name getCanonicalName ","Block Stmt ","Class Or Interface Type WildcardType ","Method Call Expr ","Class Expr Object.class ","Simple Name getCanonicalName ","Class Or Interface Type Object ","Method Call Expr ","Class Or Interface Type JsonException ","Binary Expr PLUS ","String Literal Expr Not Empty  "]}
{"fileName":"src/main/java/com/jsoniter/output/CodegenImplNative.java","version":"0.9.23","methodName":"genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean-boolean","callMethodNameReferTo":{"98":"src/main/java/com/jsoniter/spi/JsoniterSpi.java?getCurrentConfig-JsoniterSpi-","194":"src/main/java/com/jsoniter/output/Codegen.java?getGeneratedSource-Codegen-String","115":"src/main/java/com/jsoniter/spi/TypeLiteral.java?getEncoderCacheKey-TypeLiteral-","116":"src/main/java/com/jsoniter/spi/TypeLiteral.java?create-TypeLiteral-Type","181":"src/main/java/com/jsoniter/output/Codegen.java?getEncoder-Codegen-String-Type","120":"src/main/java/com/jsoniter/spi/JsoniterSpi.java?getEncoder-JsoniterSpi-String","219":"src/main/java/com/jsoniter/output/CodegenResult.java?bufferToWriteOp-CodegenResult-String","204":"src/main/java/com/jsoniter/output/CodegenResult.java?bufferToWriteOp-CodegenResult-String"},"num":316,"succs":[[88,1],[2,102],[119,3],[121,120,4,18,96],[125,5],[10,6,126,128,127],[133,7],[8,137],[144,9],[10,37,147],[11,148],[12,150,72,149,14],[151,13],[37,147,14],[15,161],[74,18,163,162,16],[17,165],[37,18,147],[19,175],[21,81,20,130],[21,176],[181,22],[23,184],[24,35,196],[198,35,25,197,187],[199,31,26],[79,31,80,27],[28,200],[202,29],[30,209],[217],[32,34,33],[224,33],[228,34],[236],[36],[240],[41,42,39,45,44,38,40,47,43,46],[39],[],[41],[],[49,83],[84,63],[70,85],[86,80],[87,82],[21,2,18,0,23,1,22],[49],[],[48,49],[49,50],[49,51],[52,49],[53,49],[49,54],[55,49],[56,49],[53,49],[49,58],[49,59,57],[53,49,60],[63],[],[63,62],[63,64],[63,65],[66,63,65],[67,63,65],[70],[],[70,69],[71,70],[11,70,159,72],[73,70],[74,70],[159,70,75],[159,70,75,76],[70,159,75,77],[26,80],[],[82],[],[],[],[],[],[],[92],[90],[],[89],[94,89,93],[89],[97,95,96],[98,99],[],[101],[90,100],[],[],[],[113],[104,69],[],[103],[103,107],[105,103],[106],[108,106],[109,106],[110,109,106],[109,106,111],[103,115,114],[103],[116,117],[104,69,118],[],[],[10,4,14],[105,122,123],[124],[],[],[],[7,8,6,9],[91,129,127],[],[71,131,96],[79,130],[],[132],[],[48,135,134],[],[136],[],[139,50,138],[],[141,140,142,62],[],[],[143],[],[146,145,51],[],[136],[],[12,13],[],[],[52,152,153],[],[154,156,155,157,64],[],[],[143],[73,158,160],[],[],[265,263,39,264,38,262],[17,16],[275,164,287],[],[],[53,166,167],[],[169,170,65,168,171],[],[],[143],[173,172,160],[],[159,174],[],[20],[177,106,178],[],[179,180,107],[],[143],[75,182,108,183],[],[],[192],[186,109],[],[185,191],[24,185,187],[24,185,188],[24,185,187],[24,185,189,190],[194,185,193],[185],[186,109,195],[],[25],[],[124],[28,29,30,27],[54,201],[],[204,203,55],[],[205,206,207],[],[],[208,188],[],[56,210,211],[],[66,110,215,213,212,214],[],[],[143],[160,216,76],[],[57,219,218],[],[221,222,220],[],[],[223,189],[],[226,225,58],[],[227,190],[],[230,59,229],[],[231,67,233,234,232,111],[],[],[143],[235,77,160],[],[60,237,238],[],[239,191],[],[241,61,242],[],[68,244,112,246,243,245],[],[],[143],[78,160,247],[],[273,249,252],[266,250,252,274,162],[276,251],[283,160,147],[253,285,257],[268,286,257,254,162],[288,255],[256,295],[304,160,147],[306,260,258],[260,307,259,162,270],[160,308,147],[261],[312],[263],[],[159,272],[248],[159],[266,159,249],[266,159,249],[268,253,159,249],[268,253,159,249],[253,269,159,249,258,270,267],[],[251,250],[],[],[279],[267],[277],[277,281,280],[277],[282,267],[],[278,284],[],[256,254,255],[],[],[291],[269],[289],[289,293,292],[289],[294,269],[],[298],[290],[296],[300,299,296],[296],[302,301],[],[303,290],[],[297,305],[],[259],[],[309,310],[311],[],[],[314,313],[],[315,179,271],[143]],"attribute":["Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Binary Expr AND ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Simple Name writeTo ","If Stmt ","Instance Of Expr ","Expression Stmt ","Field Access Expr ","If Stmt ","Unary Expr ! ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","If Stmt ","Name Expr isNullable ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","STATIC","Void Type ","Simple Name genWriteOp ","Parameter CodegenResult ctx ","Parameter String code ","Parameter Type valueType ","Parameter boolean isNullable ","Parameter boolean isCollectionValueNullable ","Block Stmt ","Name Expr ctx ","Simple Name ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr code ","Simple Name code ","Name Expr code ","Name Expr code ","Name Expr code ","Name Expr code ","Name Expr code ","Name Expr valueType ","Simple Name valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr isNullable ","Simple Name isNullable ","Name Expr isCollectionValueNullable ","Simple Name isCollectionValueNullable ","Class Or Interface Type CodegenResult ","Class Or Interface Type String ","Class Or Interface Type Type ","Primitive Type boolean ","Primitive Type boolean ","Variable Declaration Expr ","Simple Name noIndention ","Name Expr JsoniterSpi ","Name Expr noIndention ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","EQUALS","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name indentionStep ","Simple Name getCurrentConfig ","Zero IntegerLiteralExpr","Variable Declaration Expr ","Simple Name cacheKey ","Name Expr TypeLiteral ","Name Expr cacheKey ","Name Expr cacheKey ","Name Expr cacheKey ","Name Expr cacheKey ","Name Expr cacheKey ","Name Expr cacheKey ","Name Expr cacheKey ","Name Expr cacheKey ","Variable Declarator String cacheKey = ","Class Or Interface Type String ","Method Call Expr ","Method Call Expr ","Simple Name getEncoderCacheKey ","Simple Name create ","Block Stmt ","Method Call Expr ","Null Literal Expr ","Name Expr JsoniterSpi ","Simple Name getEncoder ","NullLiteralExpr","Block Stmt ","Binary Expr AND ","AND","Binary Expr EQUALS ","Unary Expr ! ","LOGICAL_COMPLEMENT","Class Expr String.class ","Class Or Interface Type String ","Method Call Expr ","Simple Name buffer ","Char Literal Expr ''' ","'''","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Simple Name buffer ","Char Literal Expr ''' ","ReturnStmt","Block Stmt ","Name Expr NATIVE_ENCODERS ","Simple Name containsKey ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getTypeName ","Simple Name fieldType ","Method Declaration ","Block Stmt ","InstanceOfExpr","Class Or Interface Type WildcardType ","WildcardType","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getTypeName ","Class Expr Object.class ","Class Or Interface Type Object ","Block Stmt ","Assign Expr ASSIGN ","ASSIGN","Binary Expr PLUS ","PLUS","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr Codegen ","Simple Name getEncoder ","Variable Declaration Expr ","Simple Name generatedSource ","Name Expr Codegen ","Name Expr generatedSource ","Name Expr generatedSource ","Name Expr generatedSource ","Name Expr generatedSource ","Name Expr generatedSource ","Variable Declarator CodegenResult generatedSource = ","Class Or Interface Type CodegenResult ","Method Call Expr ","Simple Name getGeneratedSource ","Block Stmt ","NOT_EQUALS","Null Literal Expr ","Block Stmt ","Method Call Expr ","Simple Name appendBuffer ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr CodegenResult ","Simple Name bufferToWriteOp ","Field Access Expr ","Simple Name prelude ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getTypeName ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr CodegenResult ","Simple Name bufferToWriteOp ","Field Access Expr ","Simple Name epilogue ","Method Call Expr ","Simple Name buffer ","Field Access Expr ","Simple Name prelude ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getTypeName ","Method Call Expr ","Simple Name buffer ","Field Access Expr ","Simple Name epilogue ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getTypeName ","If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Return Stmt ","Block Stmt ","Throw Stmt ","Class Or Interface Type String ","Simple Name getTypeName ","Parameter Type fieldType ","Block Stmt ","Name Expr fieldType ","Name Expr fieldType ","Name Expr fieldType ","Name Expr fieldType ","Name Expr fieldType ","Name Expr fieldType ","Class Or Interface Type Type ","Block Stmt ","Class Or Interface Type Class ","Class","Variable Declaration Expr ","Simple Name clazz ","Name Expr clazz ","Variable Declarator Class clazz = ","Class Or Interface Type Class ","Cast Expr ","Class Or Interface Type Class ","Method Call Expr ","Simple Name getCanonicalName ","Block Stmt ","Class Or Interface Type ParameterizedType ","ParameterizedType","Variable Declaration Expr ","Simple Name pType ","Name Expr pType ","Variable Declarator ParameterizedType pType = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name clazz ","Name Expr clazz ","Variable Declarator Class clazz = ","Class Or Interface Type Class ","Cast Expr ","Class Or Interface Type Class ","Method Call Expr ","Simple Name getRawType ","Method Call Expr ","Simple Name getCanonicalName ","Block Stmt ","Class Or Interface Type WildcardType ","Method Call Expr ","Class Expr Object.class ","Simple Name getCanonicalName ","Class Or Interface Type Object ","Method Call Expr ","Class Or Interface Type JsonException ","Binary Expr PLUS ","String Literal Expr Not Empty  "]}
{"fileName":"src/main/java/com/jsoniter/output/CodegenImplNative.java","version":"0.9.23","methodName":"getTypeName-CodegenImplNative-Type","callMethodNameReferTo":{},"num":77,"succs":[[29,4,1],[21,4,2,31,30],[33,3],[41,14,40],[5,43,9],[24,44,9,6,30],[46,7],[8,53],[62,14,40],[64,12,10],[12,65,11,30,26],[14,67,40],[13],[71],[20,18,19,16,15,17],[16],[],[18],[],[22,28],[0],[22],[],[21,22,1],[21,22,1],[24,5,22,1],[24,5,22,1],[5,25,22,10,1,26,23],[],[3,2],[32,66,45],[],[],[36],[23],[34],[34,38,37],[34],[39,23],[],[],[35,42],[],[8,6,7],[],[],[49],[25],[47],[47,51,50],[47],[52,25],[],[56],[48],[54],[58,57,54],[54],[60,59],[],[61,48],[],[55,63],[],[11],[],[],[68,69],[70],[],[],[73,72],[],[74,75,27],[76],[],[]],"attribute":["If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Return Stmt ","Block Stmt ","Throw Stmt ","Method Declaration ","PUBLIC","STATIC","Class Or Interface Type String ","Simple Name getTypeName ","Parameter Type fieldType ","Block Stmt ","Name Expr fieldType ","Simple Name fieldType ","Name Expr fieldType ","Name Expr fieldType ","Name Expr fieldType ","Name Expr fieldType ","Name Expr fieldType ","Class Or Interface Type Type ","Block Stmt ","InstanceOfExpr","Class Or Interface Type Class ","Class","Variable Declaration Expr ","Simple Name clazz ","Name Expr clazz ","Variable Declarator Class clazz = ","Class Or Interface Type Class ","Cast Expr ","Class Or Interface Type Class ","ReturnStmt","Method Call Expr ","Simple Name getCanonicalName ","Block Stmt ","Class Or Interface Type ParameterizedType ","ParameterizedType","Variable Declaration Expr ","Simple Name pType ","Name Expr pType ","Variable Declarator ParameterizedType pType = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name clazz ","Name Expr clazz ","Variable Declarator Class clazz = ","Class Or Interface Type Class ","Cast Expr ","Class Or Interface Type Class ","Method Call Expr ","Simple Name getRawType ","Method Call Expr ","Simple Name getCanonicalName ","Block Stmt ","Class Or Interface Type WildcardType ","WildcardType","Method Call Expr ","Class Expr Object.class ","Simple Name getCanonicalName ","Class Or Interface Type Object ","Method Call Expr ","Class Or Interface Type JsonException ","Binary Expr PLUS ","String Literal Expr Not Empty  ","PLUS","StringLiteralExpr"]}
{"fileName":"src/main/java/com/jsoniter/output/CodegenImplNative.java","version":"0.9.23","methodName":"genEnum-CodegenImplNative-Class","callMethodNameReferTo":{"64":"src/main/java/com/jsoniter/output/CodegenResult.java?append-CodegenResult-String","82":"src/main/java/com/jsoniter/output/CodegenResult.java?append-CodegenResult-String","36":"src/main/java/com/jsoniter/spi/JsoniterSpi.java?getCurrentConfig-JsoniterSpi-","68":"src/main/java/com/jsoniter/output/CodegenResult.java?buffer-CodegenResult-char","85":"src/main/java/com/jsoniter/output/CodegenResult.java?append-CodegenResult-String","55":"src/main/java/com/jsoniter/output/CodegenResult.java?append-CodegenResult-String","72":"src/main/java/com/jsoniter/output/CodegenResult.java?append-CodegenResult-String","75":"src/main/java/com/jsoniter/output/CodegenResult.java?append-CodegenResult-String","79":"src/main/java/com/jsoniter/output/CodegenResult.java?buffer-CodegenResult-char"},"num":89,"succs":[[27,1],[40,2],[3,55],[64,4],[67,7,5],[28,6,7],[68,9],[8],[72,9],[10,75],[13,78,11],[28,12,5,13],[79,15],[14],[82,15],[85,16],[17,50,88],[20,21,19,22,18,23],[19],[],[21],[],[26,25],[3,0,4,15,2,16,9,10,1],[25],[],[],[30],[29],[],[28,32,31],[28],[35,33,34],[37,36],[],[39],[38,29],[],[],[],[51],[42],[],[42,41],[42,43],[44,42,43],[42,45],[46,42],[46,47,42],[42,48],[42,49],[53,52,42],[42],[54],[],[57,56,41],[],[61,59,60,58],[],[],[62],[63,24],[],[],[66,43,65],[],[62],[6],[69,44,70],[],[71],[],[73,74,45],[],[62],[46,77,76],[],[62],[12],[81,47,80],[],[71],[83,48,84],[],[62],[87,49,86],[],[62],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Method Declaration ","PUBLIC","STATIC","Class Or Interface Type CodegenResult ","Simple Name genEnum ","Parameter Class clazz ","Block Stmt ","Name Expr clazz ","Simple Name clazz ","Class Or Interface Type Class ","Variable Declaration Expr ","Simple Name noIndention ","Name Expr JsoniterSpi ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","EQUALS","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name indentionStep ","Simple Name getCurrentConfig ","Zero IntegerLiteralExpr","Variable Declaration Expr ","Name Expr ctx ","Simple Name ctx ","Name Expr ctx ","Simple Name ind ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Variable Declarator CodegenResult ctx = ","Return Stmt ","Object Creation Expr CodegenResult Optional.empty Optional.empty ","Class Or Interface Type CodegenResult ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","StringLiteralExpr","Simple Name getCanonicalName ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name buffer ","Name Expr Any ","'''","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name buffer ","Char Literal Expr ''' ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","ReturnStmt"]}
