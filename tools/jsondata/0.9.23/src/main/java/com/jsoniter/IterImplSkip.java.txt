{"fileName":"src/main/java/com/jsoniter/IterImplSkip.java","version":"0.9.23","hasMethodName":["skip-IterImplSkip-JsonIterator","findStringEnd-IterImplSkip-JsonIterator"]}
{"fileName":"src/main/java/com/jsoniter/IterImplSkip.java","version":"0.9.23","methodName":"skip-IterImplSkip-JsonIterator","callMethodNameReferTo":{"97":"src/main/java/com/jsoniter/IterImpl.java?skipUntilBreak-IterImpl-JsonIterator","113":"src/main/java/com/jsoniter/IterImpl.java?skipArray-IterImpl-JsonIterator","82":"src/main/java/com/jsoniter/IterImpl.java?skipString-IterImpl-JsonIterator","117":"src/main/java/com/jsoniter/IterImpl.java?skipObject-IterImpl-JsonIterator","102":"src/main/java/com/jsoniter/IterImpl.java?skipFixedBytes-IterImpl-JsonIterator-int","108":"src/main/java/com/jsoniter/IterImpl.java?skipFixedBytes-IterImpl-JsonIterator-int","78":"src/main/java/com/jsoniter/IterImpl.java?nextToken-IterImpl-JsonIterator"},"num":127,"succs":[[1,72],[3,21,17,9,7,11,2,23,13,41,33,15,37,19,25,49,27,45,31],[3,21,17,9,7,11,23,41,13,33,15,37,19,25,49,27,73,31,45],[5,6,80,4],[81],[6,82],[7,51,85],[9,80,8],[86],[10,80,11],[87],[13,80,12],[88],[15,14,80],[89],[16,17,80],[90],[19,80,18],[91],[21,80,20],[92],[23,80,22],[93],[24,80,25],[94],[80,27,26],[95],[28,29,80,30],[96],[97,30],[51,85,31],[32,33,80],[100],[36,35,80,34],[101],[36,102],[37,51,85],[40,80,38,39],[107],[40,108],[41,51,85],[44,43,80,42],[112],[44,113],[51,85,45],[47,80,48,46],[116],[117,48],[49,51,85],[80,50],[120],[54,61,55,57,53,59,56,58,52],[53],[54],[],[56],[],[63,71],[60],[],[],[1,0],[63],[],[62,63],[63,64],[65,63],[63,66],[63,67],[63,68],[63,69],[],[76],[62,74],[],[2,73],[77,73,78],[73],[62,74,79],[],[],[],[64,83,84],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[65,99,98],[],[],[],[],[66,103,105,104],[],[],[106],[],[],[110,111,67,109],[],[],[106],[],[115,68,114],[],[],[],[118,119,69],[],[],[122,123,70,121],[],[124],[126,75,125],[],[124],[]],"attribute":["Expression Stmt ","Switch Stmt ","Name Expr c ","Switch Entry Stmt ","Char Literal Expr ''' ","Expression Stmt ","Return Stmt ","Switch Entry Stmt ","Char Literal Expr '-' ","Marker Annotation Expr @Override ","Char Literal Expr '0' ","Switch Entry Stmt ","Char Literal Expr ',' ","Marker Annotation Expr @Override ","Char Literal Expr '2' ","Marker Annotation Expr @Override ","Char Literal Expr '3' ","Assign Expr XOR ","Char Literal Expr '[' ","Marker Annotation Expr @Override ","Char Literal Expr '5' ","Switch Entry Stmt ","Char Literal Expr '6' ","Switch Entry Stmt ","Char Literal Expr '}' ","Switch Entry Stmt ","Char Literal Expr '8' ","Switch Entry Stmt ","Char Literal Expr '9' ","Expression Stmt ","Name Expr current ","Switch Entry Stmt ","Char Literal Expr 't' ","Switch Entry Stmt ","Char Literal Expr ',' ","Expression Stmt ","Return Stmt ","Switch Entry Stmt ","Char Literal Expr 'f' ","Expression Stmt ","Return Stmt ","Switch Entry Stmt ","Char Literal Expr '[' ","Expression Stmt ","Return Stmt ","Switch Entry Stmt ","Char Literal Expr '{' ","Variable Declaration Expr ","Return Stmt ","Switch Entry Stmt ","Throw Stmt ","Method Declaration Throws ","PUBLIC","STATIC","FINAL","Void Type ","Simple Name skip ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type User ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Name Expr i ","Name Expr IterImpl ","Name Expr c ","Variable Declarator byte c = ","Name Expr user ","Method Call Expr ","Simple Name nextToken ","SwitchEntryStmt","'''","Method Call Expr ","Name Expr IterImpl ","Simple Name skipString ","ReturnStmt","'-'","'0'","'1'","'2'","'3'","'4'","'5'","'6'","'7'","'8'","'9'","Method Call Expr ","Name Expr notFirst ","Simple Name skipUntilBreak ","'t'","'n'","Method Call Expr ","Name Expr IterImpl ","Simple Name skipFixedBytes ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","'f'","Method Call Expr ","Name Expr IterImpl ","Simple Name skipFixedBytes ","Integer Literal Expr Note Zero  ","'['","Method Call Expr ","Name Expr IterImpl ","Simple Name skipArray ","'{'","Method Call Expr ","Name Expr IterImpl ","Simple Name skipObject ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Binary Expr PLUS ","StringLiteralExpr","String Literal Expr Not Empty  ","PLUS"]}
{"fileName":"src/main/java/com/jsoniter/IterImplSkip.java","version":"0.9.23","methodName":"findStringEnd-IterImplSkip-JsonIterator","callMethodNameReferTo":{},"num":136,"succs":[[42,1],[2,24,50,3],[3,58],[52,25,4,63,62],[5,66],[75,6,21],[7,77,68,21,76],[79,10,8],[9,80,10,43],[26,82,16,81],[12,11],[12,86],[13,99],[100,14],[15,103,101,102,16],[26,112,16,81],[17,114],[18,116],[118,102,19,20,117],[24,25,125],[126,24],[127,22],[24,128,23,76,69],[24,129],[53,65,3],[26,133,81],[30,28,27,32,29,31],[28],[],[30],[],[34,41],[0,25,1],[36,34],[],[33,34],[34,40,35],[36,34,40],[34,37],[34,38],[36,34,39],[],[46],[44,45],[],[44,43],[47,44,48],[44],[49],[],[5,4],[33],[51,54],[51,52],[51,53,57],[51,54],[51,54],[51,56,55],[51,59,60],[51],[33,61],[],[],[64,35],[],[],[70],[36,54],[67],[6,68,67],[67,72,71],[67],[54,73],[36,74],[],[7],[],[78],[],[9],[],[],[83,55,84],[],[85],[],[94],[56],[93,87],[87,88],[89,87],[90,87],[91,87],[92,87],[96,95,87],[87],[56,97,98],[],[85],[13,20,16,17],[15],[104,88,62],[],[108,106,107],[37,105],[],[89,109],[],[111],[110,38],[],[],[83,113,57],[85],[90,115],[],[19],[119,91,62],[122,121,107],[39,120],[],[123,92],[111],[40,124],[],[],[93,115],[23],[111],[130,45,131],[],[132],[],[135,134],[85],[]],"attribute":["Expression Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Return Stmt ","Block Stmt ","Expression Stmt ","For Stmt ","If Stmt ","Binary Expr OR ","Return Stmt ","Primitive Type long ","If Stmt ","Binary Expr OR ","Class Or Interface Type String ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Unary Expr ++ ","Return Stmt ","Method Declaration ","STATIC","FINAL","Primitive Type int ","Simple Name findStringEnd ","Parameter JsonIterator iter ","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Name Expr escaped ","Simple Name writeTo ","Name Expr escaped ","Variable Declarator boolean escaped = ","Name Expr factory ","Boolean Literal Expr false ","false","Block Stmt ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Field Access Expr ","Simple Name head ","LESS","Name Expr parameter ","Simple Name tail ","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name c ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Array Access Expr i ","Field Access Expr ","Simple Name buf ","Block Stmt ","EQUALS","Char Literal Expr ''' ","'''","Block Stmt ","LOGICAL_COMPLEMENT","ReturnStmt","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name j ","Name Expr j ","Name Expr j ","Name Expr x ","Name Expr j ","Name Expr j ","Name Expr j ","Field Access Expr ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","Block Stmt ","Block Stmt ","Binary Expr MINUS ","OR","Binary Expr NOT_EQUALS ","Field Access Expr ","Simple Name head ","Array Access Expr j ","NOT_EQUALS","Char Literal Expr '' ","Field Access Expr ","Simple Name buf ","''","Binary Expr PLUS ","Integer Literal Expr Note Zero  ","Unary Expr -- ","POSTFIX_DECREMENT","Block Stmt ","Binary Expr LESS ","Binary Expr NOT_EQUALS ","Field Access Expr ","Simple Name head ","Array Access Expr j ","Char Literal Expr '' ","Field Access Expr ","Simple Name buf ","break;","Unary Expr -- ","Block Stmt ","Char Literal Expr '' ","Assign Expr ASSIGN ","ASSIGN","Boolean Literal Expr true ","true","Unary Expr - ","Class Or Interface Type T ","MINUS"]}
