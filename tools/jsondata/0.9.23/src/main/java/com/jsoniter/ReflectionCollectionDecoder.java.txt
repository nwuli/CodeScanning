{"fileName":"src/main/java/com/jsoniter/ReflectionCollectionDecoder.java","version":"0.9.23","hasMethodName":["decode-ReflectionCollectionDecoder-JsonIterator","decode_-ReflectionCollectionDecoder-JsonIterator"]}
{"fileName":"src/main/java/com/jsoniter/ReflectionCollectionDecoder.java","version":"0.9.23","methodName":"decode-ReflectionCollectionDecoder-JsonIterator","callMethodNameReferTo":{},"num":102,"succs":[[2,21,4,20,19,1],[6,22,23],[3,28,29],[30],[5,33,32],[34],[10,7,15,8,9,11,12,13],[],[],[10],[],[17,18],[55,14],[],[],[0],[17,25],[],[],[1],[2,27],[31,4],[],[24,26,16],[],[],[56,53,51,54,50,52,12],[3],[],[],[],[5],[],[],[35,36],[],[],[62,38],[76,39],[58,40,41,77],[26,78,41,22],[42,80,44],[81,43,65,44,82],[46,83],[45],[46,93],[95,47],[48,59,49,96],[46,97],[26,69,22],[],[52],[],[61,25],[],[],[46,37,41,49,38],[25],[57,25],[58,25,60],[17,59,25],[],[70],[64,57],[],[63],[65,63,42],[65,66,63,42],[67,63],[63,68],[72,63,71],[63],[73,74],[],[64,57,75],[],[40],[],[79],[],[43],[],[79],[66,85,84],[],[86,87],[],[88,89],[90,91],[],[92],[],[],[67,94],[],[48],[],[99,98,68],[],[6,100,101,60],[],[]],"attribute":["Try Stmt ","Return Stmt ","Parameter JsonException e ","Binary Expr EQUALS ","Parameter Exception e ","Throw Stmt ","Method Declaration Throws ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type Object ","Simple Name decode ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Block Stmt ","Catch Clause ","Catch Clause ","ReturnStmt","Method Call Expr ","Name Expr encoder ","Name Expr iter ","Method Declaration Throws ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Name Expr e ","Block Stmt ","Class Or Interface Type Exception ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Expression Stmt ","If Stmt ","Method Call Expr ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Block Stmt ","Return Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Return Stmt ","PRIVATE","Name Expr stream ","Simple Name Integer ","Parameter JsonIterator iter ","Field Access Expr ","Exception","Block Stmt ","Name Expr iter ","Name Expr copy ","Simple Name size ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name arr ","Name Expr CodegenAccess ","Simple Name len ","Name Expr len ","Name Expr col ","Name Expr col ","Name Expr val ","Variable Declarator Collection col = ","Name Expr JsonStream ","Cast Expr ","Class Or Interface Type Collection ","Method Call Expr ","Simple Name resetExistingObject ","Block Stmt ","Simple Name readByte ","Array Creation Level Dimension NotEmpty ","NullLiteralExpr","Block Stmt ","EQUALS","Null Literal Expr ","Return Stmt ","ASSIGN","Cast Expr ","Simple Name writeEntry ","Method Call Expr ","Field Access Expr ","Simple Name newInstance ","This Expr ","Simple Name ctor ","ThisExpr","Method Call Expr ","Simple Name clear ","Block Stmt ","Simple Name readArray ","Method Call Expr ","Simple Name add ","Method Call Expr ","Name Expr compTypeDecoder ","Simple Name decode "]}
{"fileName":"src/main/java/com/jsoniter/ReflectionCollectionDecoder.java","version":"0.9.23","methodName":"decode_-ReflectionCollectionDecoder-JsonIterator","callMethodNameReferTo":{"66":"src/main/java/com/jsoniter/spi/Decoder.java?decode-Decoder-JsonIterator","40":"src/main/java/com/jsoniter/CodegenAccess.java?resetExistingObject-CodegenAccess-JsonIterator"},"num":102,"succs":[[28,1],[42,2],[24,3,4,43],[13,45,4,44],[5,47,7],[48,6,31,7,49],[9,50],[8],[9,60],[62,10],[11,25,12,63],[9,64],[13,35,44],[17,21,15,19,14,16,18],[],[16],[],[27,23],[20,83],[],[],[9,0,12,4,1],[23],[],[22,23],[24,23,26],[69,25,23],[],[36],[30,22],[],[29],[31,29,5],[31,5,32,29],[33,29],[29,34],[38,29,37],[29],[39,40],[],[30,22,41],[],[3],[],[],[46],[],[6],[],[46],[32,52,51],[],[53,54],[],[55,56],[57,58],[],[59],[],[],[33,61],[],[11],[],[66,65,34],[],[70,67,68,26],[],[],[],[80,84,77,78,79,81,18,82],[73,89,75,88,87,72],[70,44,90],[74,93,94],[95],[76,98,97],[99],[],[],[80],[],[69,86],[],[],[71],[69,23],[],[72],[73,92],[75,96],[91,13,85],[],[74],[],[],[],[76],[],[],[100,101],[],[]],"attribute":["Expression Stmt ","If Stmt ","Method Call Expr ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Block Stmt ","Return Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","PRIVATE","Name Expr stream ","Simple Name Integer ","Parameter JsonIterator iter ","Throws","Field Access Expr ","Exception","Block Stmt ","Name Expr iter ","Name Expr iter ","Name Expr copy ","Simple Name size ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name arr ","Name Expr CodegenAccess ","Simple Name len ","Name Expr len ","Name Expr col ","Name Expr col ","Name Expr val ","Variable Declarator Collection col = ","Name Expr JsonStream ","Cast Expr ","Class Or Interface Type Collection ","Method Call Expr ","Simple Name resetExistingObject ","Block Stmt ","Simple Name readByte ","ReturnStmt","Array Creation Level Dimension NotEmpty ","NullLiteralExpr","Block Stmt ","EQUALS","Null Literal Expr ","Return Stmt ","ASSIGN","Cast Expr ","Simple Name writeEntry ","Method Call Expr ","Field Access Expr ","Simple Name newInstance ","This Expr ","Simple Name ctor ","ThisExpr","Method Call Expr ","Simple Name clear ","Block Stmt ","Simple Name readArray ","Method Call Expr ","Simple Name add ","Method Call Expr ","Name Expr compTypeDecoder ","Simple Name decode ","Name Expr iter ","Method Declaration Throws ","Try Stmt ","Return Stmt ","Parameter JsonException e ","Binary Expr EQUALS ","Parameter Exception e ","Throw Stmt ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type Object ","Simple Name decode ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Class Or Interface Type JsonIterator ","Block Stmt ","Catch Clause ","Catch Clause ","Method Call Expr ","Name Expr encoder ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Name Expr e ","Block Stmt ","Class Or Interface Type Exception ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e "]}
