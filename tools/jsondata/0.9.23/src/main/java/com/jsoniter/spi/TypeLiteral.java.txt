{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","hasMethodName":["generateDecoderCacheKey-TypeLiteral-Type","generateEncoderCacheKey-TypeLiteral-Type","generateCacheKey-TypeLiteral-Type-String","formatTypeWithoutSpecialCharacter-TypeLiteral-Type","getSuperclassTypeParameter-TypeLiteral-Class<?>","create-TypeLiteral-Type","createNew-TypeLiteral-Type","getType-TypeLiteral-","getDecoderCacheKey-TypeLiteral-","getDecoderCacheKey-TypeLiteral-String","getEncoderCacheKey-TypeLiteral-","getEncoderCacheKey-TypeLiteral-String","getNativeType-TypeLiteral-","toString-TypeLiteral-"]}
{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","methodName":"generateDecoderCacheKey-TypeLiteral-Type","callMethodNameReferTo":{},"num":389,"succs":[[3,2,6,4,1,5],[2],[],[4],[],[9,10],[7],[0,12,11],[9,15],[],[],[],[8,13,17,14],[],[16,18],[],[],[63,61,2,1,62,60,64],[],[20,77],[21,31,92],[31,65,93,22,94],[23,96],[24,107],[26,98,108,25],[26,109],[27,29,114],[100,28,115,29],[116,59],[30],[124,59],[32,132,48],[67,133,33,48,93],[46,135,136,59,44,34,137],[138,35],[36,147],[156,37],[164,43,39,38],[39,169],[165,59,174,40,173],[179,41],[42,191],[195,43],[178,39,167],[198,45,199],[200,59],[202,203,47],[204,59],[54,209,49],[210,50,70,54,93],[51,212],[52,219],[53,226],[230,59],[55,233,57],[72,56,57,93,234],[236,59],[58],[242,59],[17,246,11],[61],[],[75,15],[16,76],[20,19,59],[15],[21,65,15],[21,65,15],[21,67,15,32],[21,15,32,68],[21,67,15,32],[21,70,15,32,49],[21,70,15,32,49],[72,21,71,15,32,49,69,55,66],[16],[],[],[88],[83,86,85,80,74],[78],[79,78],[78],[83,81,78],[78,82],[78],[78,84],[78],[78],[90,89,78],[78],[91,74],[],[26,23,22],[95,235,211,134],[],[],[103],[66],[97],[98,24,97],[99,97],[100,27,97],[100,27,101,97],[105,104,97],[97],[66,106],[],[25],[],[110,111],[],[113,99,112],[18],[],[28],[],[117,118,79],[],[122,121,119,120],[101,123],[],[18],[18],[],[126,80,125],[],[130,129,127,128],[102,131],[],[18],[18],[],[33],[],[],[36,35,37,34],[197,44],[46,201],[143],[68],[139],[140,139,142],[139,141],[144,139,145],[139],[146,68],[],[150],[140],[148],[148,152,151],[148],[153,154],[],[140,155],[],[158,81,157],[],[162,159,161,160],[149,163],[],[18],[18],[],[42,41,40],[168,166],[],[165,166],[167,166],[170,166,171],[166],[172],[],[],[175,176],[141,177],[],[],[],[182],[168,142],[180],[184,180,183],[180],[185,188,186],[],[168,189,187],[],[275,276,2,277,1,278],[190,142],[],[193,192,82],[],[194],[],[83,181,196],[],[45],[],[],[],[47],[],[],[205,207,206],[],[113,208,69],[],[18],[50,53,52,51],[],[],[215],[71],[213],[213,217,216],[213],[71,218],[],[222],[214],[220,187],[220,224,223],[220],[214,225],[],[228,84,227],[],[188,229,221],[],[232,85,231],[],[18],[56],[],[],[237,86,238],[],[240,239],[241],[],[],[244,243],[],[113,73,245],[18],[248,249,247,250],[251,87,252],[],[18],[18],[],[362,365,363,366,364],[254,289],[290,255,257,93,279],[256,291],[188,257,298,11],[258,300],[267,259,301,281,93],[302,260],[310,261],[322,262,263],[263,305,266,325],[323,264],[326,265],[262,329],[315,267,188,11],[332,268],[283,269,333,271,93],[270,334],[188,271,11,341],[347,272],[274,348,273,93,285],[349,274,188,11],[353],[276],[],[288,187],[274,267,257,253,271],[187],[254,279,187],[280,187],[258,281,187],[282,187],[283,268,187],[284,187],[285,187],[286,187],[],[256,255],[],[294],[280],[292],[292,296,295],[292],[280,297],[],[293,299],[],[259,260,261,266],[],[306],[282],[303],[303,304],[308,307,303],[303],[309,282],[],[316],[304],[311],[314,312],[323,187],[313],[311,318,317],[311],[319,320,188],[],[321,304,187],[],[265,264],[324],[323],[],[328,312,327],[],[18],[330,313,327],[314,331,188],[],[270,269],[],[337],[284],[335],[339,335,338],[335],[340,284],[],[113,343,342],[188,344,345],[18],[],[336,346,187],[],[273],[],[351,350],[352],[],[],[354,355],[],[357,113,356],[113,358,359],[361,287],[113,360,286],[18],[18],[],[],[],[365],[],[367],[368,252,11],[369,113,370],[371,113,372],[388],[113,374,373],[387],[376,113,375],[],[113,378,377],[18],[113,379,380],[387],[113,382,381],[],[113,384,383],[18],[113,386,385],[],[18],[18],[],[]],"attribute":["Method Declaration ","PRIVATE","STATIC","Class Or Interface Type String ","Simple Name generateDecoderCacheKey ","Parameter Type type ","Block Stmt ","Return Stmt ","Name Expr type ","Simple Name type ","Class Or Interface Type Type ","ReturnStmt","Method Call Expr ","Simple Name generateCacheKey ","String Literal Expr Not Empty  ","Name Expr iter ","Simple Name prefix ","Method Declaration ","StringLiteralExpr","Expression Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","If Stmt ","Method Call Expr ","Throw Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Instance Of Expr ","Try Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","For Stmt ","Array Access Expr idx ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","Parameter JsonException e ","Name Expr notFirst ","Parameter Exception e ","Throw Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Block Stmt ","Throw Stmt ","Return Stmt ","Class Or Interface Type String ","Simple Name generateCacheKey ","Parameter Type type ","Parameter String prefix ","Block Stmt ","Name Expr type ","Name Expr type ","Null Literal Expr ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Class Or Interface Type Type ","Name Expr type ","Name Expr prefix ","Class Or Interface Type Type ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name decoderClassName ","Name Expr decoderClassName ","Name Expr decoderClassName ","Expression Stmt ","Name Expr decoderClassName ","Name Expr decoderClassName ","Assign Expr ASSIGN ","Expression Stmt ","Name Expr decoderClassName ","Name Expr decoderClassName ","Variable Declarator StringBuilder decoderClassName = ","Variable Declaration Expr ","Object Creation Expr StringBuilder Optional.empty Optional.empty ","Class Or Interface Type StringBuilder ","Block Stmt ","InstanceOfExpr","Class Or Interface Type Class ","Class","Variable Declaration Expr ","Simple Name slice ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Variable Declarator Class clazz = ","Class Or Interface Type Slice ","Cast Expr ","Class Or Interface Type Class ","Block Stmt ","Simple Name isAnonymousClass ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","String Literal Expr Not Empty  ","PLUS","Block Stmt ","Simple Name isArray ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getCanonicalName ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getName ","Block Stmt ","Class Or Interface Type ParameterizedType ","ParameterizedType","Block Stmt ","Catch Clause ","Catch Clause ","Variable Declaration Expr ","Simple Name pType ","Name Expr pType ","Name Expr pType ","Name Expr pType ","Variable Declarator ParameterizedType pType = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name clazz ","Simple Name entry ","Variable Declarator Class clazz = ","Class Or Interface Type Class ","Cast Expr ","Name Expr cache ","Method Call Expr ","Simple Name getRawType ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getCanonicalName ","Block Stmt ","Name Expr i ","Simple Name i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Char Literal Expr ''' ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","LESS","Field Access Expr ","Method Call Expr ","Simple Name length ","Simple Name getActualTypeArguments ","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name typeName ","Name Expr typeName ","Variable Declarator String typeName = ","Name Expr mapped ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Array Access Expr i ","Simple Name type ","Method Declaration ","Method Call Expr ","Simple Name getActualTypeArguments ","Method Call Expr ","Simple Name getKey ","Char Literal Expr '_' ","'_'","Method Call Expr ","Simple Name append ","Block Stmt ","Method Call Expr ","Simple Name e ","Name Expr e ","Block Stmt ","Class Or Interface Type Exception ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Name Expr e ","String Literal Expr Not Empty  ","Block Stmt ","Class Or Interface Type GenericArrayType ","GenericArrayType","Variable Declaration Expr ","Simple Name gaType ","Name Expr gaType ","Variable Declarator GenericArrayType gaType = ","Class Or Interface Type GenericArrayType ","Cast Expr ","Class Or Interface Type GenericArrayType ","Variable Declaration Expr ","Simple Name compType ","Name Expr compType ","Variable Declarator Type compType = ","Name Expr dArr ","Method Call Expr ","Simple Name getGenericComponentType ","Method Call Expr ","Simple Name append ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Class Or Interface Type WildcardType ","WildcardType","Method Call Expr ","Simple Name format ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getName ","Class Or Interface Type Object ","Object Creation Expr UnsupportedOperationException Optional.empty Optional.empty ","Class Or Interface Type UnsupportedOperationException ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name toString ","Method Declaration ","If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Method Call Expr ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Expression Stmt ","Variable Declaration Expr ","Throw Stmt ","Class Or Interface Type Object ","Simple Name formatTypeWithoutSpecialCharacter ","Parameter Type type ","Block Stmt ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr code ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Class Or Interface Type Type ","Block Stmt ","Class Or Interface Type Class ","Variable Declaration Expr ","Simple Name clazz ","Name Expr cache ","Variable Declarator Class clazz = ","Name Expr cache ","Cast Expr ","Class Or Interface Type Event ","Method Call Expr ","Simple Name getCanonicalName ","Block Stmt ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name pType ","Name Expr pType ","Name Expr pType ","Variable Declarator ParameterizedType pType = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name typeName ","Name Expr typeName ","Name Expr compType ","Name Expr typeArg ","Name Expr typeName ","Variable Declarator String typeName = ","Class Or Interface Type String ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name getRawType ","Block Stmt ","Simple Name typeArg ","Class Or Interface Type Type ","Simple Name getActualTypeArguments ","Return Stmt ","PLUS","String Literal Expr Not Empty  ","Assign Expr PLUS ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Block Stmt ","Class Or Interface Type GenericArrayType ","Variable Declaration Expr ","Simple Name gaType ","Name Expr gaType ","Variable Declarator GenericArrayType gaType = ","Class Or Interface Type GenericArrayType ","Cast Expr ","Class Or Interface Type GenericArrayType ","Binary Expr PLUS ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name getGenericComponentType ","Block Stmt ","Class Or Interface Type WildcardType ","Method Call Expr ","Class Expr Object.class ","Simple Name getCanonicalName ","Method Call Expr ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","Method Call Expr ","Binary Expr PLUS ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getClass ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type String ","Simple Name toString ","Block Stmt ","Return Stmt ","Binary Expr PLUS ","Binary Expr PLUS ","Simple Name end ","Binary Expr PLUS ","Char Literal Expr ''' ","Binary Expr PLUS ","Name Expr encoderCacheKey ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Char Literal Expr ''' ","Binary Expr PLUS ","Name Expr decoderCacheKey ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr iter ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","'''","'}'"]}
{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","methodName":"generateEncoderCacheKey-TypeLiteral-Type","callMethodNameReferTo":{},"num":389,"succs":[[3,2,6,5,1,4],[2],[],[4],[],[9,10],[7],[12,0,11],[9,15],[],[],[],[13,14,17,8],[],[16,18],[],[],[63,61,2,1,62,60,64],[],[20,77],[21,31,92],[31,65,93,22,94],[23,96],[24,107],[26,98,108,25],[26,109],[27,29,114],[100,28,115,29],[116,59],[30],[124,59],[32,132,48],[67,133,33,48,93],[46,135,136,59,44,34,137],[138,35],[36,147],[156,37],[164,43,39,38],[39,169],[165,59,174,40,173],[179,41],[42,191],[195,43],[178,39,167],[198,45,199],[200,59],[202,203,47],[204,59],[54,209,49],[210,50,70,54,93],[51,212],[52,219],[53,226],[230,59],[55,233,57],[72,56,57,93,234],[236,59],[58],[242,59],[17,246,11],[61],[],[75,15],[16,76],[20,19,59],[15],[21,65,15],[21,65,15],[21,67,15,32],[21,15,32,68],[21,67,15,32],[21,70,15,32,49],[21,70,15,32,49],[72,21,71,15,32,49,69,55,66],[16],[],[],[88],[83,86,85,80,74],[78],[79,78],[78],[83,81,78],[78,82],[78],[78,84],[78],[78],[90,89,78],[78],[91,74],[],[26,23,22],[95,235,211,134],[],[],[103],[66],[97],[98,24,97],[99,97],[100,27,97],[100,27,101,97],[105,104,97],[97],[66,106],[],[25],[],[110,111],[],[113,99,112],[18],[],[28],[],[117,118,79],[],[122,121,119,120],[101,123],[],[18],[18],[],[126,80,125],[],[130,129,127,128],[102,131],[],[18],[18],[],[33],[],[],[36,35,37,34],[197,44],[46,201],[143],[68],[139],[140,139,142],[139,141],[144,139,145],[139],[146,68],[],[150],[140],[148],[148,152,151],[148],[153,154],[],[140,155],[],[158,81,157],[],[162,159,161,160],[149,163],[],[18],[18],[],[42,41,40],[168,166],[],[165,166],[167,166],[170,166,171],[166],[172],[],[],[175,176],[141,177],[],[],[],[182],[168,142],[180],[184,180,183],[180],[185,188,186],[],[168,189,187],[],[275,276,2,277,1,278],[190,142],[],[193,192,82],[],[194],[],[83,181,196],[],[45],[],[],[],[47],[],[],[205,207,206],[],[113,208,69],[],[18],[50,53,52,51],[],[],[215],[71],[213],[213,217,216],[213],[71,218],[],[222],[214],[220,187],[220,224,223],[220],[214,225],[],[228,84,227],[],[188,229,221],[],[232,85,231],[],[18],[56],[],[],[237,86,238],[],[240,239],[241],[],[],[244,243],[],[113,73,245],[18],[248,249,247,250],[251,87,252],[],[18],[18],[],[362,365,363,366,364],[254,289],[290,255,257,93,279],[256,291],[188,257,298,11],[258,300],[267,259,301,281,93],[302,260],[310,261],[322,262,263],[263,305,266,325],[323,264],[326,265],[262,329],[315,267,188,11],[332,268],[283,269,333,271,93],[270,334],[188,271,11,341],[347,272],[274,348,273,93,285],[349,274,188,11],[353],[276],[],[288,187],[274,267,257,253,271],[187],[254,279,187],[280,187],[258,281,187],[282,187],[283,268,187],[284,187],[285,187],[286,187],[],[256,255],[],[294],[280],[292],[292,296,295],[292],[280,297],[],[293,299],[],[259,260,261,266],[],[306],[282],[303],[303,304],[308,307,303],[303],[309,282],[],[316],[304],[311],[314,312],[323,187],[313],[311,318,317],[311],[319,320,188],[],[321,304,187],[],[265,264],[324],[323],[],[328,312,327],[],[18],[330,313,327],[314,331,188],[],[270,269],[],[337],[284],[335],[339,335,338],[335],[340,284],[],[113,343,342],[188,344,345],[18],[],[336,346,187],[],[273],[],[351,350],[352],[],[],[354,355],[],[357,113,356],[113,358,359],[361,287],[113,360,286],[18],[18],[],[],[],[365],[],[367],[368,252,11],[369,113,370],[371,113,372],[388],[113,374,373],[387],[376,113,375],[],[113,378,377],[18],[113,379,380],[387],[113,382,381],[],[113,384,383],[18],[113,386,385],[],[18],[18],[],[]],"attribute":["Method Declaration ","PRIVATE","STATIC","Class Or Interface Type String ","Simple Name generateEncoderCacheKey ","Parameter Type type ","Block Stmt ","Return Stmt ","Name Expr type ","Simple Name type ","Class Or Interface Type Type ","ReturnStmt","Method Call Expr ","Simple Name generateCacheKey ","String Literal Expr Not Empty  ","Name Expr iter ","Simple Name prefix ","Method Declaration ","StringLiteralExpr","Expression Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","If Stmt ","Method Call Expr ","Throw Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Instance Of Expr ","Try Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","For Stmt ","Array Access Expr idx ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","Parameter JsonException e ","Name Expr notFirst ","Parameter Exception e ","Throw Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Block Stmt ","Throw Stmt ","Return Stmt ","Class Or Interface Type String ","Simple Name generateCacheKey ","Parameter Type type ","Parameter String prefix ","Block Stmt ","Name Expr type ","Name Expr type ","Null Literal Expr ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Class Or Interface Type Type ","Name Expr type ","Name Expr prefix ","Class Or Interface Type Type ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name decoderClassName ","Name Expr decoderClassName ","Name Expr decoderClassName ","Expression Stmt ","Name Expr decoderClassName ","Name Expr decoderClassName ","Assign Expr ASSIGN ","Expression Stmt ","Name Expr decoderClassName ","Name Expr decoderClassName ","Variable Declarator StringBuilder decoderClassName = ","Variable Declaration Expr ","Object Creation Expr StringBuilder Optional.empty Optional.empty ","Class Or Interface Type StringBuilder ","Block Stmt ","InstanceOfExpr","Class Or Interface Type Class ","Class","Variable Declaration Expr ","Simple Name slice ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Variable Declarator Class clazz = ","Class Or Interface Type Slice ","Cast Expr ","Class Or Interface Type Class ","Block Stmt ","Simple Name isAnonymousClass ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","String Literal Expr Not Empty  ","PLUS","Block Stmt ","Simple Name isArray ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getCanonicalName ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getName ","Block Stmt ","Class Or Interface Type ParameterizedType ","ParameterizedType","Block Stmt ","Catch Clause ","Catch Clause ","Variable Declaration Expr ","Simple Name pType ","Name Expr pType ","Name Expr pType ","Name Expr pType ","Variable Declarator ParameterizedType pType = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name clazz ","Simple Name entry ","Variable Declarator Class clazz = ","Class Or Interface Type Class ","Cast Expr ","Name Expr cache ","Method Call Expr ","Simple Name getRawType ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getCanonicalName ","Block Stmt ","Name Expr i ","Simple Name i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Char Literal Expr ''' ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","LESS","Field Access Expr ","Method Call Expr ","Simple Name length ","Simple Name getActualTypeArguments ","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name typeName ","Name Expr typeName ","Variable Declarator String typeName = ","Name Expr mapped ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Array Access Expr i ","Simple Name type ","Method Declaration ","Method Call Expr ","Simple Name getActualTypeArguments ","Method Call Expr ","Simple Name getKey ","Char Literal Expr '_' ","'_'","Method Call Expr ","Simple Name append ","Block Stmt ","Method Call Expr ","Simple Name e ","Name Expr e ","Block Stmt ","Class Or Interface Type Exception ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Name Expr e ","String Literal Expr Not Empty  ","Block Stmt ","Class Or Interface Type GenericArrayType ","GenericArrayType","Variable Declaration Expr ","Simple Name gaType ","Name Expr gaType ","Variable Declarator GenericArrayType gaType = ","Class Or Interface Type GenericArrayType ","Cast Expr ","Class Or Interface Type GenericArrayType ","Variable Declaration Expr ","Simple Name compType ","Name Expr compType ","Variable Declarator Type compType = ","Name Expr dArr ","Method Call Expr ","Simple Name getGenericComponentType ","Method Call Expr ","Simple Name append ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Class Or Interface Type WildcardType ","WildcardType","Method Call Expr ","Simple Name format ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getName ","Class Or Interface Type Object ","Object Creation Expr UnsupportedOperationException Optional.empty Optional.empty ","Class Or Interface Type UnsupportedOperationException ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name toString ","Method Declaration ","If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Method Call Expr ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Expression Stmt ","Variable Declaration Expr ","Throw Stmt ","Class Or Interface Type Object ","Simple Name formatTypeWithoutSpecialCharacter ","Parameter Type type ","Block Stmt ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr code ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Class Or Interface Type Type ","Block Stmt ","Class Or Interface Type Class ","Variable Declaration Expr ","Simple Name clazz ","Name Expr cache ","Variable Declarator Class clazz = ","Name Expr cache ","Cast Expr ","Class Or Interface Type Event ","Method Call Expr ","Simple Name getCanonicalName ","Block Stmt ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name pType ","Name Expr pType ","Name Expr pType ","Variable Declarator ParameterizedType pType = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name typeName ","Name Expr typeName ","Name Expr compType ","Name Expr typeArg ","Name Expr typeName ","Variable Declarator String typeName = ","Class Or Interface Type String ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name getRawType ","Block Stmt ","Simple Name typeArg ","Class Or Interface Type Type ","Simple Name getActualTypeArguments ","Return Stmt ","PLUS","String Literal Expr Not Empty  ","Assign Expr PLUS ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Block Stmt ","Class Or Interface Type GenericArrayType ","Variable Declaration Expr ","Simple Name gaType ","Name Expr gaType ","Variable Declarator GenericArrayType gaType = ","Class Or Interface Type GenericArrayType ","Cast Expr ","Class Or Interface Type GenericArrayType ","Binary Expr PLUS ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name getGenericComponentType ","Block Stmt ","Class Or Interface Type WildcardType ","Method Call Expr ","Class Expr Object.class ","Simple Name getCanonicalName ","Method Call Expr ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","Method Call Expr ","Binary Expr PLUS ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getClass ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type String ","Simple Name toString ","Block Stmt ","Return Stmt ","Binary Expr PLUS ","Binary Expr PLUS ","Simple Name end ","Binary Expr PLUS ","Char Literal Expr ''' ","Binary Expr PLUS ","Name Expr encoderCacheKey ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Char Literal Expr ''' ","Binary Expr PLUS ","Name Expr decoderCacheKey ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr iter ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","'''","'}'"]}
{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","methodName":"generateCacheKey-TypeLiteral-Type-String","callMethodNameReferTo":{},"num":377,"succs":[[1,63],[2,12,78],[12,49,79,3,80],[4,82],[5,93],[7,84,94,6],[7,95],[8,10,101],[86,9,102,10],[103,40],[11],[111,40],[13,119,29],[120,52,14,79,29],[27,122,123,40,25,15,124],[125,16],[17,134],[143,18],[151,20,24,19],[156,20],[152,40,161,160,21],[166,22],[23,178],[182,24],[165,20,154],[185,26,186],[187,40],[189,190,28],[191,40],[35,196,30],[197,31,55,35,79],[32,199],[33,206],[34,213],[217,40],[36,220,38],[57,37,38,79,221],[223,40],[39],[229,40],[41,234,233],[47,45,43,42,46,44,48],[43],[],[45],[],[61,50],[60,62],[0,1,40],[50],[],[2,50,49],[2,49,50],[2,52,50,13],[2,50,13,53],[2,52,50,13],[2,55,50,13,30],[2,55,50,13,30],[57,2,56,50,13,30,54,36,51],[60],[],[],[],[74],[69,72,71,66,59],[64],[65,64],[64],[69,67,64],[64,68],[64],[64,70],[64],[64],[76,75,64],[64],[77,59],[],[7,4,3],[81,222,198,121],[],[],[89],[51],[83],[84,5,83],[85,83],[86,8,83],[86,8,87,83],[90,91,83],[83],[51,92],[],[6],[],[96,97],[],[99,85,98],[100],[],[],[9],[],[104,105,65],[],[109,108,107,106],[87,110],[],[100],[100],[],[113,66,112],[],[117,116,114,115],[88,118],[],[100],[100],[],[14],[],[],[17,16,15,18],[184,25],[27,188],[130],[53],[126],[127,126,129],[126,128],[131,126,132],[126],[133,53],[],[137],[127],[135],[135,139,138],[135],[140,141],[],[127,142],[],[145,67,144],[],[149,146,148,147],[136,150],[],[100],[100],[],[23,22,21],[155,153],[],[152,153],[154,153],[157,153,158],[153],[159],[],[],[162,163],[128,164],[],[],[],[169],[155,129],[167],[171,167,170],[167],[172,175,173],[],[155,176,174],[],[263,264,43,265,42,266],[129,177],[],[180,179,68],[],[181],[],[69,168,183],[],[26],[],[],[],[28],[],[],[192,194,193],[],[99,195,54],[],[100],[31,34,33,32],[],[],[202],[56],[200],[200,204,203],[200],[56,205],[],[209],[201],[207,174],[207,211,210],[207],[201,212],[],[215,70,214],[],[175,216,208],[],[219,71,218],[],[100],[37],[],[],[224,72,225],[],[227,226],[228],[],[],[231,230],[],[99,58,232],[100],[],[236,237,235,238],[239,73,240],[],[100],[100],[],[350,353,351,354,352],[242,277],[278,243,245,267,79],[244,279],[175,245,286,233],[246,288],[255,247,289,269,79],[290,248],[298,249],[310,250,251],[251,293,254,313],[311,252],[314,253],[250,317],[303,255,175,233],[320,256],[271,257,321,259,79],[258,322],[175,259,233,329],[335,260],[262,261,336,79,273],[337,262,175,233],[341],[264],[],[276,174],[255,262,245,241,259],[174],[242,267,174],[268,174],[246,269,174],[270,174],[271,256,174],[272,174],[273,174],[274,174],[],[244,243],[],[282],[268],[280],[280,284,283],[280],[268,285],[],[281,287],[],[247,248,249,254],[],[294],[270],[291],[291,292],[295,296,291],[291],[297,270],[],[304],[292],[299],[302,300],[311,174],[301],[299,306,305],[299],[307,308,175],[],[309,292,174],[],[253,252],[312],[311],[],[316,300,315],[],[100],[318,301,315],[302,319,175],[],[257,258],[],[325],[272],[323],[327,323,326],[323],[328,272],[],[99,331,330],[175,332,333],[100],[],[324,334,174],[],[261],[],[339,338],[340],[],[],[342,343],[],[345,99,344],[99,346,347],[349,275],[99,348,274],[100],[100],[],[],[],[353],[],[355],[356,240,233],[357,99,358],[359,99,360],[376],[99,362,361],[375],[364,99,363],[],[99,366,365],[100],[99,367,368],[375],[99,370,369],[],[99,372,371],[100],[99,374,373],[],[100],[100],[],[]],"attribute":["Expression Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","If Stmt ","Method Call Expr ","Throw Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Instance Of Expr ","Try Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","For Stmt ","Array Access Expr idx ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","Parameter JsonException e ","Name Expr notFirst ","Parameter Exception e ","Throw Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Block Stmt ","Throw Stmt ","Return Stmt ","Method Declaration ","PRIVATE","STATIC","Class Or Interface Type String ","Simple Name generateCacheKey ","Parameter Type type ","Parameter String prefix ","Block Stmt ","Name Expr type ","Name Expr iter ","Name Expr type ","Null Literal Expr ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Class Or Interface Type Type ","Name Expr type ","Name Expr prefix ","Simple Name prefix ","Class Or Interface Type Type ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name decoderClassName ","Name Expr decoderClassName ","Name Expr decoderClassName ","Expression Stmt ","Name Expr decoderClassName ","Name Expr decoderClassName ","Assign Expr ASSIGN ","Expression Stmt ","Name Expr decoderClassName ","Name Expr decoderClassName ","Variable Declarator StringBuilder decoderClassName = ","Variable Declaration Expr ","Object Creation Expr StringBuilder Optional.empty Optional.empty ","Class Or Interface Type StringBuilder ","Block Stmt ","InstanceOfExpr","Class Or Interface Type Class ","Class","Variable Declaration Expr ","Simple Name slice ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Variable Declarator Class clazz = ","Class Or Interface Type Slice ","Cast Expr ","Class Or Interface Type Class ","Block Stmt ","Simple Name isAnonymousClass ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","String Literal Expr Not Empty  ","PLUS","StringLiteralExpr","Block Stmt ","Simple Name isArray ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getCanonicalName ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getName ","Block Stmt ","Class Or Interface Type ParameterizedType ","ParameterizedType","Block Stmt ","Catch Clause ","Catch Clause ","Variable Declaration Expr ","Simple Name pType ","Name Expr pType ","Name Expr pType ","Name Expr pType ","Variable Declarator ParameterizedType pType = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name clazz ","Simple Name entry ","Variable Declarator Class clazz = ","Class Or Interface Type Class ","Cast Expr ","Name Expr cache ","Method Call Expr ","Simple Name getRawType ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getCanonicalName ","Block Stmt ","Name Expr i ","Simple Name i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Char Literal Expr ''' ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","LESS","Field Access Expr ","Method Call Expr ","Simple Name length ","Simple Name getActualTypeArguments ","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name typeName ","Name Expr typeName ","Variable Declarator String typeName = ","Name Expr mapped ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Array Access Expr i ","Simple Name type ","Method Declaration ","Method Call Expr ","Simple Name getActualTypeArguments ","Method Call Expr ","Simple Name getKey ","Char Literal Expr '_' ","'_'","Method Call Expr ","Simple Name append ","Block Stmt ","Method Call Expr ","Simple Name e ","Name Expr e ","Block Stmt ","Class Or Interface Type Exception ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Name Expr e ","String Literal Expr Not Empty  ","Block Stmt ","Class Or Interface Type GenericArrayType ","GenericArrayType","Variable Declaration Expr ","Simple Name gaType ","Name Expr gaType ","Variable Declarator GenericArrayType gaType = ","Class Or Interface Type GenericArrayType ","Cast Expr ","Class Or Interface Type GenericArrayType ","Variable Declaration Expr ","Simple Name compType ","Name Expr compType ","Variable Declarator Type compType = ","Name Expr dArr ","Method Call Expr ","Simple Name getGenericComponentType ","Method Call Expr ","Simple Name append ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Class Or Interface Type WildcardType ","WildcardType","Method Call Expr ","Simple Name format ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getName ","Class Or Interface Type Object ","Object Creation Expr UnsupportedOperationException Optional.empty Optional.empty ","Class Or Interface Type UnsupportedOperationException ","Binary Expr PLUS ","String Literal Expr Not Empty  ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name toString ","Method Declaration ","If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Method Call Expr ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Expression Stmt ","Variable Declaration Expr ","Throw Stmt ","Class Or Interface Type Object ","Simple Name formatTypeWithoutSpecialCharacter ","Parameter Type type ","Block Stmt ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr code ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Class Or Interface Type Type ","Block Stmt ","Class Or Interface Type Class ","Variable Declaration Expr ","Simple Name clazz ","Name Expr cache ","Variable Declarator Class clazz = ","Name Expr cache ","Cast Expr ","Class Or Interface Type Event ","Method Call Expr ","Simple Name getCanonicalName ","Block Stmt ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name pType ","Name Expr pType ","Name Expr pType ","Variable Declarator ParameterizedType pType = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name typeName ","Name Expr typeName ","Name Expr compType ","Name Expr typeArg ","Name Expr typeName ","Variable Declarator String typeName = ","Class Or Interface Type String ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name getRawType ","Block Stmt ","Simple Name typeArg ","Class Or Interface Type Type ","Simple Name getActualTypeArguments ","Return Stmt ","PLUS","String Literal Expr Not Empty  ","Assign Expr PLUS ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Block Stmt ","Class Or Interface Type GenericArrayType ","Variable Declaration Expr ","Simple Name gaType ","Name Expr gaType ","Variable Declarator GenericArrayType gaType = ","Class Or Interface Type GenericArrayType ","Cast Expr ","Class Or Interface Type GenericArrayType ","Binary Expr PLUS ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name getGenericComponentType ","Block Stmt ","Class Or Interface Type WildcardType ","Method Call Expr ","Class Expr Object.class ","Simple Name getCanonicalName ","Method Call Expr ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","Method Call Expr ","Binary Expr PLUS ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getClass ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type String ","Simple Name toString ","Block Stmt ","Return Stmt ","Binary Expr PLUS ","Binary Expr PLUS ","Simple Name end ","Binary Expr PLUS ","Char Literal Expr ''' ","Binary Expr PLUS ","Name Expr encoderCacheKey ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Char Literal Expr ''' ","Binary Expr PLUS ","Name Expr decoderCacheKey ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr iter ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","'''","'}'"]}
{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","methodName":"formatTypeWithoutSpecialCharacter-TypeLiteral-Type","callMethodNameReferTo":{},"num":121,"succs":[[1,40],[42,2,4,29,41],[3,44],[22,4,52,51],[5,54],[6,14,55,32,41],[57,7],[65,8],[77,10,9],[10,60,13,80],[78,11],[81,12],[9,85],[70,14,22,51],[88,15],[34,16,89,18,41],[17,91],[22,51,18,98],[105,19],[21,20,106,41,36],[108,21,22,51],[112],[25,26,24,27,23,28],[24],[],[26],[],[39,30],[21,14,4,0,18],[30],[],[1,29,30],[31,30],[5,32,30],[33,30],[34,15,30],[35,30],[36,30],[37,30],[],[3,2],[43,107,90,56],[],[],[47],[31],[45],[45,49,48],[45],[31,50],[],[],[46,53],[],[6,7,8,13],[],[],[61],[33],[58],[58,59],[62,63,58],[58],[64,33],[],[71],[59],[66],[69,67],[78,30],[68],[66,73,72],[66],[74,75,22],[],[76,59,30],[],[12,11],[79],[78],[],[83,67,82],[],[84],[],[86,68,82],[69,87,22],[],[17,16],[],[],[94],[35],[92],[96,92,95],[92],[97,35],[],[100,101,99],[22,102,103],[],[84],[],[93,104,30],[],[20],[],[],[110,109],[111],[],[],[113,114],[],[116,100,115],[100,117,118],[120,38],[100,119,37],[84],[84],[]],"attribute":["If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Method Call Expr ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Expression Stmt ","Variable Declaration Expr ","Throw Stmt ","Method Declaration ","PRIVATE","STATIC","Class Or Interface Type Object ","Simple Name formatTypeWithoutSpecialCharacter ","Parameter Type type ","Block Stmt ","Name Expr type ","Simple Name type ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr code ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Class Or Interface Type Type ","Block Stmt ","InstanceOfExpr","Class Or Interface Type Class ","Class","Variable Declaration Expr ","Simple Name clazz ","Name Expr cache ","Variable Declarator Class clazz = ","Name Expr cache ","Cast Expr ","Class Or Interface Type Event ","ReturnStmt","Method Call Expr ","Simple Name getCanonicalName ","Block Stmt ","Class Or Interface Type ParameterizedType ","ParameterizedType","Variable Declaration Expr ","Simple Name pType ","Name Expr pType ","Name Expr pType ","Variable Declarator ParameterizedType pType = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name typeName ","Name Expr typeName ","Name Expr compType ","Name Expr typeArg ","Name Expr typeName ","Variable Declarator String typeName = ","Class Or Interface Type String ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name getRawType ","Block Stmt ","Simple Name typeArg ","Class Or Interface Type Type ","Simple Name getActualTypeArguments ","Return Stmt ","PLUS","String Literal Expr Not Empty  ","StringLiteralExpr","Assign Expr PLUS ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Block Stmt ","Class Or Interface Type GenericArrayType ","GenericArrayType","Variable Declaration Expr ","Simple Name gaType ","Name Expr gaType ","Variable Declarator GenericArrayType gaType = ","Class Or Interface Type GenericArrayType ","Cast Expr ","Class Or Interface Type GenericArrayType ","Binary Expr PLUS ","Method Call Expr ","PLUS","String Literal Expr Not Empty  ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name getGenericComponentType ","Block Stmt ","Class Or Interface Type WildcardType ","WildcardType","Method Call Expr ","Class Expr Object.class ","Simple Name getCanonicalName ","Method Call Expr ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","Method Call Expr ","Binary Expr PLUS ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getClass "]}
{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","methodName":"getSuperclassTypeParameter-TypeLiteral-Class<?>","callMethodNameReferTo":{},"num":46,"succs":[[1,17],[2,25],[4,3,26,19,27],[4,29],[5,33],[6,41,40],[8,7,9,10,11],[],[9],[],[14,13],[4,5,0,1],[13],[],[16,15],[],[],[21],[12],[18],[18,19],[18,22,23],[18],[12,24],[],[3],[28],[],[],[31,30],[],[32],[],[36],[20],[34],[34,37,38],[34],[20,39],[],[],[42,43],[35,44],[45],[],[]],"attribute":["Expression Stmt ","If Stmt ","Variable Declaration Expr ","Throw Stmt ","Expression Stmt ","Return Stmt ","Method Declaration ","STATIC","Void Type ","Simple Name getSuperclassTypeParameter ","Parameter Class<?> subclass ","Block Stmt ","Name Expr subclass ","Simple Name subclass ","Class Or Interface Type Class ","Simple Name Class ","Wildcard Type ","Variable Declaration Expr ","Simple Name superclass ","Name Expr jacksonObj ","Name Expr superclass ","Variable Declarator Type superclass = ","Class Or Interface Type Type ","Method Call Expr ","Simple Name getGenericSuperclass ","Block Stmt ","InstanceOfExpr","Class Or Interface Type Class ","Class","Object Creation Expr JsonException Optional.empty Optional.empty ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Simple Name parameterized ","Name Expr parameterized ","Variable Declarator ParameterizedType parameterized = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Parameter String configName ","ReturnStmt","Array Access Expr 0 ","Method Call Expr ","Integer Literal Expr Zero  ","Simple Name getActualTypeArguments ","Zero IntegerLiteralExpr"]}
{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","methodName":"create-TypeLiteral-Type","callMethodNameReferTo":{},"num":487,"succs":[[16,1],[2,25],[27,3,26,4,19],[5,20,29,4],[5,30,29],[10,8,7,11,6,9],[7],[44],[9],[],[13,15],[0,1,4],[13],[],[32,13,12],[],[21],[12,18],[],[17],[2,17,19],[22,23,17],[17],[24,12,18],[],[3],[],[28],[],[],[14,33,31],[],[],[44,7,46,43,48,47,45],[35,55],[36,67],[58,37,38,26,68],[59,38,33,29],[39,69],[78,40],[41,90],[92,42],[62,33,29],[7],[],[46],[],[32,54],[35,34,39,41,42,38,40],[32],[32,49],[50,32,85],[88,32,51],[52,32],[],[63],[57,49],[],[56],[36,58,56],[50,52,56,59,51],[60],[61,60],[65,64,56],[56],[57,49,66],[],[37],[28],[74],[71],[],[70],[72,70],[76,75,70],[70],[71,77],[],[80,79,60],[],[50,83,81,82],[],[84,86,51],[52,87,89],[],[],[94,7,97,95,43,96],[],[],[108,7,111,110,43,109],[61,53,72,91],[],[73,79,93],[],[95],[],[85,100],[98],[86,101,29],[85,104],[],[99,102,106,103],[],[105,107],[],[],[162,160,7,43,159,161,163],[],[109],[],[88,114],[112],[115,89,29],[88,104],[],[117,116,106,113],[],[105,107],[119,176],[120,130,191],[130,164,192,121,193],[122,195],[123,206],[125,197,207,124],[125,208],[126,128,213],[199,127,214,128],[215,158],[129],[223,158],[131,231,147],[166,232,132,147,192],[145,234,235,158,143,133,236],[237,134],[135,246],[255,136],[263,142,138,137],[138,268],[264,158,273,139,272],[278,140],[141,290],[294,142],[277,138,266],[297,144,298],[299,158],[301,302,146],[303,158],[153,308,148],[309,149,169,153,192],[150,311],[151,318],[152,325],[329,158],[332,154,156],[171,155,156,192,333],[335,158],[157],[341,158],[106,345,29],[160],[],[174,104],[105,175],[119,118,158],[104],[120,164,104],[120,164,104],[120,166,104,131],[120,104,131,167],[120,166,104,131],[120,169,104,131,148],[120,169,104,131,148],[171,120,170,104,131,148,168,154,165],[105],[],[],[187],[182,185,184,179,173],[177],[178,177],[177],[182,180,177],[177,181],[177],[177,183],[177],[177],[189,188,177],[177],[190,173],[],[125,122,121],[194,334,310,233],[],[],[202],[165],[196],[197,123,196],[198,196],[199,126,196],[199,126,200,196],[204,203,196],[196],[165,205],[],[124],[],[209,210],[],[212,198,211],[107],[],[127],[],[216,217,178],[],[221,220,218,219],[200,222],[],[107],[107],[],[225,179,224],[],[229,228,226,227],[201,230],[],[107],[107],[],[132],[],[],[135,134,136,133],[296,143],[145,300],[242],[167],[238],[239,238,241],[238,240],[243,238,244],[238],[245,167],[],[249],[239],[247],[247,251,250],[247],[252,253],[],[239,254],[],[257,180,256],[],[261,258,260,259],[248,262],[],[107],[107],[],[141,140,139],[267,265],[],[264,265],[266,265],[269,265,270],[265],[271],[],[],[274,275],[240,276],[],[],[],[281],[267,241],[279],[283,279,282],[279],[284,287,285],[],[267,288,286],[],[374,375,7,376,43,377],[289,241],[],[292,291,181],[],[293],[],[182,280,295],[],[144],[],[],[],[146],[],[],[304,306,305],[],[212,307,168],[],[107],[149,152,151,150],[],[],[314],[170],[312],[312,316,315],[312],[170,317],[],[321],[313],[319,286],[319,323,322],[319],[313,324],[],[327,183,326],[],[287,328,320],[],[331,184,330],[],[107],[155],[],[],[336,185,337],[],[339,338],[340],[],[],[343,342],[],[212,172,344],[107],[347,348,346,349],[350,186,351],[],[107],[107],[],[461,463,6,464,462],[353,388],[389,354,356,192,378],[355,390],[287,356,397,29],[357,399],[358,366,400,380,192],[401,359],[409,360],[421,361,362],[362,404,365,424],[422,363],[425,364],[361,428],[414,366,287,29],[431,367],[382,368,432,370,192],[369,433],[287,370,29,440],[446,371],[373,372,447,192,384],[448,373,287,29],[452],[375],[],[387,286],[373,366,356,352,370],[286],[353,378,286],[379,286],[357,380,286],[381,286],[382,367,286],[383,286],[384,286],[385,286],[],[355,354],[],[393],[379],[391],[391,395,394],[391],[379,396],[],[392,398],[],[358,359,360,365],[],[405],[381],[402],[402,403],[406,407,402],[402],[408,381],[],[415],[403],[410],[413,411],[422,286],[412],[410,417,416],[410],[418,419,287],[],[420,403,286],[],[364,363],[423],[422],[],[427,411,426],[],[107],[429,412,426],[413,430,287],[],[368,369],[],[436],[383],[434],[438,434,437],[434],[439,383],[],[212,442,441],[287,443,444],[107],[],[435,445,286],[],[372],[],[450,449],[451],[],[],[453,454],[],[456,212,455],[212,457,458],[460,386],[212,459,385],[107],[107],[],[],[463],[],[465],[466,351,29],[467,212,468],[469,212,470],[486],[212,472,471],[485],[474,212,473],[],[212,476,475],[107],[212,477,478],[485],[212,480,479],[],[212,482,481],[107],[212,484,483],[],[107],[107],[],[]],"attribute":["Expression Stmt ","If Stmt ","Method Call Expr ","Return Stmt ","Return Stmt ","Method Declaration ","PUBLIC","STATIC","Class Or Interface Type TypeLiteral ","Simple Name create ","Parameter Type valueType ","Block Stmt ","Name Expr valueType ","Simple Name valueType ","Name Expr valueType ","Class Or Interface Type Type ","Variable Declaration Expr ","Simple Name typeLiteral ","Name Expr typeLiteralCache ","Name Expr noIndention ","Name Expr typeLiteral ","Variable Declarator TypeLiteral typeLiteral = ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Simple Name get ","Block Stmt ","NOT_EQUALS","Null Literal Expr ","NullLiteralExpr","ReturnStmt","Method Call Expr ","Simple Name createNew ","Simple Name valueType ","Method Declaration ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Return Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","PRIVATE","SYNCHRONIZED","Class Or Interface Type TypeLiteral ","Simple Name createNew ","Parameter Type valueType ","Block Stmt ","Name Expr valueType ","Name Expr valueType ","Field Access Expr ","Name Expr valueType ","Name Expr valueType ","Primitive Type byte ","Variable Declaration Expr ","Simple Name typeLiteral ","Name Expr typeLiteralCache ","Return Stmt ","Name Expr typeLiteral ","Name Expr typeLiteral ","Name Expr typeLiteral ","Name Expr typeLiteral ","Variable Declarator TypeLiteral typeLiteral = ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Simple Name get ","Block Stmt ","Null Literal Expr ","Variable Declaration Expr ","Simple Name copy ","Name Expr typeLiteralCache ","Name Expr copy ","Name Expr iter ","Variable Declarator HashMap<Type, TypeLiteral> copy = ","Class Or Interface Type HashMap ","Object Creation Expr HashMap<Type, TypeLiteral> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr TypeLiteral Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Assign Expr ASSIGN ","Simple Name generateDecoderCacheKey ","Simple Name type ","Method Declaration ","Simple Name generateEncoderCacheKey ","Simple Name type ","Method Declaration ","Method Call Expr ","Simple Name put ","Assign Expr ASSIGN ","Name Expr typeLiteralCache ","Class Or Interface Type String ","Simple Name generateDecoderCacheKey ","Parameter Type type ","Block Stmt ","Return Stmt ","Name Expr type ","Class Or Interface Type Type ","Method Call Expr ","Simple Name generateCacheKey ","String Literal Expr Not Empty  ","Name Expr iter ","Simple Name prefix ","Method Declaration ","StringLiteralExpr","Class Or Interface Type String ","Simple Name generateEncoderCacheKey ","Parameter Type type ","Block Stmt ","Return Stmt ","Name Expr type ","Class Or Interface Type Type ","Method Call Expr ","Simple Name generateCacheKey ","String Literal Expr Not Empty  ","Expression Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","If Stmt ","Method Call Expr ","Throw Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Instance Of Expr ","Try Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","For Stmt ","Array Access Expr idx ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","Parameter JsonException e ","Name Expr notFirst ","Parameter Exception e ","Throw Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Block Stmt ","Throw Stmt ","Return Stmt ","Class Or Interface Type String ","Simple Name generateCacheKey ","Parameter Type type ","Parameter String prefix ","Block Stmt ","Name Expr type ","Name Expr type ","Null Literal Expr ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Class Or Interface Type Type ","Name Expr type ","Name Expr prefix ","Class Or Interface Type Type ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name decoderClassName ","Name Expr decoderClassName ","Name Expr decoderClassName ","Expression Stmt ","Name Expr decoderClassName ","Name Expr decoderClassName ","Assign Expr ASSIGN ","Expression Stmt ","Name Expr decoderClassName ","Name Expr decoderClassName ","Variable Declarator StringBuilder decoderClassName = ","Variable Declaration Expr ","Object Creation Expr StringBuilder Optional.empty Optional.empty ","Class Or Interface Type StringBuilder ","Block Stmt ","InstanceOfExpr","Class Or Interface Type Class ","Class","Variable Declaration Expr ","Simple Name slice ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Variable Declarator Class clazz = ","Class Or Interface Type Slice ","Cast Expr ","Class Or Interface Type Class ","Block Stmt ","Simple Name isAnonymousClass ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","String Literal Expr Not Empty  ","PLUS","Block Stmt ","Simple Name isArray ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getCanonicalName ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getName ","Block Stmt ","Class Or Interface Type ParameterizedType ","ParameterizedType","Block Stmt ","Catch Clause ","Catch Clause ","Variable Declaration Expr ","Simple Name pType ","Name Expr pType ","Name Expr pType ","Name Expr pType ","Variable Declarator ParameterizedType pType = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name clazz ","Simple Name entry ","Variable Declarator Class clazz = ","Class Or Interface Type Class ","Cast Expr ","Name Expr cache ","Method Call Expr ","Simple Name getRawType ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getCanonicalName ","Block Stmt ","Name Expr i ","Simple Name i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Char Literal Expr ''' ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","LESS","Field Access Expr ","Method Call Expr ","Simple Name length ","Simple Name getActualTypeArguments ","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name typeName ","Name Expr typeName ","Variable Declarator String typeName = ","Name Expr mapped ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Array Access Expr i ","Simple Name type ","Method Declaration ","Method Call Expr ","Simple Name getActualTypeArguments ","Method Call Expr ","Simple Name getKey ","Char Literal Expr '_' ","'_'","Method Call Expr ","Simple Name append ","Block Stmt ","Method Call Expr ","Simple Name e ","Name Expr e ","Block Stmt ","Class Or Interface Type Exception ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Name Expr e ","String Literal Expr Not Empty  ","Block Stmt ","Class Or Interface Type GenericArrayType ","GenericArrayType","Variable Declaration Expr ","Simple Name gaType ","Name Expr gaType ","Variable Declarator GenericArrayType gaType = ","Class Or Interface Type GenericArrayType ","Cast Expr ","Class Or Interface Type GenericArrayType ","Variable Declaration Expr ","Simple Name compType ","Name Expr compType ","Variable Declarator Type compType = ","Name Expr dArr ","Method Call Expr ","Simple Name getGenericComponentType ","Method Call Expr ","Simple Name append ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Class Or Interface Type WildcardType ","WildcardType","Method Call Expr ","Simple Name format ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getName ","Class Or Interface Type Object ","Object Creation Expr UnsupportedOperationException Optional.empty Optional.empty ","Class Or Interface Type UnsupportedOperationException ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name toString ","Method Declaration ","If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Method Call Expr ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Expression Stmt ","Variable Declaration Expr ","Throw Stmt ","Class Or Interface Type Object ","Simple Name formatTypeWithoutSpecialCharacter ","Parameter Type type ","Block Stmt ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr code ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Class Or Interface Type Type ","Block Stmt ","Class Or Interface Type Class ","Variable Declaration Expr ","Simple Name clazz ","Name Expr cache ","Variable Declarator Class clazz = ","Name Expr cache ","Cast Expr ","Class Or Interface Type Event ","Method Call Expr ","Simple Name getCanonicalName ","Block Stmt ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name pType ","Name Expr pType ","Name Expr pType ","Variable Declarator ParameterizedType pType = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name typeName ","Name Expr typeName ","Name Expr compType ","Name Expr typeArg ","Name Expr typeName ","Variable Declarator String typeName = ","Class Or Interface Type String ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name getRawType ","Block Stmt ","Simple Name typeArg ","Class Or Interface Type Type ","Simple Name getActualTypeArguments ","Return Stmt ","PLUS","String Literal Expr Not Empty  ","Assign Expr PLUS ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Block Stmt ","Class Or Interface Type GenericArrayType ","Variable Declaration Expr ","Simple Name gaType ","Name Expr gaType ","Variable Declarator GenericArrayType gaType = ","Class Or Interface Type GenericArrayType ","Cast Expr ","Class Or Interface Type GenericArrayType ","Binary Expr PLUS ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name getGenericComponentType ","Block Stmt ","Class Or Interface Type WildcardType ","Method Call Expr ","Class Expr Object.class ","Simple Name getCanonicalName ","Method Call Expr ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","Method Call Expr ","Binary Expr PLUS ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getClass ","Marker Annotation Expr @Override ","Class Or Interface Type String ","Simple Name toString ","Block Stmt ","Return Stmt ","Binary Expr PLUS ","Binary Expr PLUS ","Simple Name end ","Binary Expr PLUS ","Char Literal Expr ''' ","Binary Expr PLUS ","Name Expr encoderCacheKey ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Char Literal Expr ''' ","Binary Expr PLUS ","Name Expr decoderCacheKey ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr iter ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","'''","'}'"]}
{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","methodName":"createNew-TypeLiteral-Type","callMethodNameReferTo":{},"num":460,"succs":[[1,24],[2,36],[3,27,4,37,38],[28,9,40,4],[5,41],[50,6],[7,62],[64,8],[31,9,40],[12,11,14,10,16,15,13],[11],[12],[],[14],[],[18,23],[1,5,0,7,8,4,6],[18],[],[18,17],[19,18,57],[18,60,20],[21,18],[],[32],[26,17],[],[25],[2,27,25],[21,19,28,25,20],[29],[30,29],[34,33,25],[25],[26,17,35],[],[3],[],[39],[],[],[46],[43],[],[42],[44,42],[48,47,42],[42],[43,49],[],[52,51,29],[],[19,55,53,54],[],[56,58,20],[21,59,61],[],[],[66,69,11,67,10,68],[],[],[80,83,11,82,10,81],[30,22,44,63],[],[45,51,65],[],[67],[],[57,72],[70],[58,73,40],[57,76],[],[71,74,78,75],[],[77,79],[],[],[134,132,11,10,131,133,135],[],[81],[],[60,86],[84],[87,61,40],[60,76],[],[89,88,78,85],[],[77,79],[91,148],[92,102,163],[102,136,164,165,93],[94,167],[95,178],[97,169,179,96],[97,180],[98,100,185],[171,99,186,100],[187,130],[101],[195,130],[103,203,119],[138,204,104,119,164],[117,206,207,130,115,105,208],[209,106],[107,218],[227,108],[235,114,110,109],[240,110],[236,130,245,111,244],[250,112],[113,262],[266,114],[249,110,238],[269,270,116],[271,130],[273,274,118],[275,130],[125,280,120],[281,121,141,125,164],[283,122],[123,290],[124,297],[301,130],[126,304,128],[143,127,128,164,305],[307,130],[129],[313,130],[78,317,40],[132],[],[146,76],[77,147],[90,91,130],[76],[92,76,136],[92,136,76],[92,138,76,103],[92,76,103,139],[92,138,76,103],[92,141,76,103,120],[92,141,76,103,120],[143,92,142,76,103,120,140,126,137],[77],[],[],[159],[154,157,151,156,145],[149],[150,149],[149],[154,152,149],[149,153],[149],[149,155],[149],[149],[161,160,149],[149],[162,145],[],[97,94,93],[166,306,282,205],[],[],[174],[137],[168],[169,95,168],[170,168],[171,98,168],[171,98,172,168],[176,175,168],[168],[137,177],[],[96],[],[181,182],[],[184,170,183],[79],[],[99],[],[189,188,150],[],[193,192,190,191],[172,194],[],[79],[79],[],[197,151,196],[],[201,200,198,199],[173,202],[],[79],[79],[],[104],[],[],[107,106,105,108],[268,115],[117,272],[214],[139],[210],[211,210,213],[210,212],[215,210,216],[210],[217,139],[],[221],[211],[219],[219,223,222],[219],[224,225],[],[211,226],[],[229,152,228],[],[233,230,232,231],[220,234],[],[79],[79],[],[113,112,111],[239,237],[],[236,237],[238,237],[241,237,242],[237],[243],[],[],[246,247],[212,248],[],[],[],[253],[239,213],[251],[255,251,254],[251],[256,259,257],[],[239,260,258],[],[346,347,11,348,10,349],[213,261],[],[264,263,153],[],[265],[],[154,252,267],[],[116],[],[],[],[118],[],[],[276,278,277],[],[184,279,140],[],[79],[121,124,123,122],[],[],[286],[142],[284],[284,288,287],[284],[142,289],[],[293],[285],[291,258],[291,295,294],[291],[285,296],[],[299,155,298],[],[259,300,292],[],[303,156,302],[],[79],[127],[],[],[308,157,309],[],[311,310],[312],[],[],[315,314],[],[184,144,316],[79],[319,320,318,321],[322,158,323],[],[79],[79],[],[433,436,434,437,435],[325,360],[361,326,328,164,350],[327,362],[259,328,369,40],[329,371],[330,338,372,352,164],[373,331],[381,332],[393,333,334],[334,376,337,396],[394,335],[397,336],[333,400],[386,338,259,40],[403,339],[354,340,404,164,342],[341,405],[259,342,40,412],[418,343],[345,344,419,164,356],[420,345,259,40],[424],[347],[],[359,258],[345,338,328,324,342],[258],[325,350,258],[351,258],[329,352,258],[353,258],[354,339,258],[355,258],[356,258],[357,258],[],[327,326],[],[365],[351],[363],[363,367,366],[363],[351,368],[],[364,370],[],[330,331,332,337],[],[377],[353],[374],[374,375],[378,379,374],[374],[380,353],[],[387],[375],[382],[385,383],[394,258],[384],[382,389,388],[382],[390,391,259],[],[392,375,258],[],[336,335],[395],[394],[],[399,383,398],[],[79],[401,384,398],[385,402,259],[],[340,341],[],[408],[355],[406],[410,406,409],[406],[411,355],[],[184,414,413],[259,415,416],[79],[],[407,417,258],[],[344],[],[422,421],[423],[],[],[425,426],[],[428,184,427],[184,429,430],[432,358],[184,431,357],[79],[79],[],[],[],[436],[],[438],[439,323,40],[440,184,441],[442,184,443],[459],[184,445,444],[458],[447,184,446],[],[184,449,448],[79],[184,450,451],[458],[184,453,452],[],[184,455,454],[79],[184,457,456],[],[79],[79],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Return Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Method Declaration ","PRIVATE","STATIC","SYNCHRONIZED","Class Or Interface Type TypeLiteral ","Simple Name createNew ","Parameter Type valueType ","Block Stmt ","Name Expr valueType ","Simple Name valueType ","Name Expr valueType ","Field Access Expr ","Name Expr valueType ","Name Expr valueType ","Primitive Type byte ","Variable Declaration Expr ","Simple Name typeLiteral ","Name Expr typeLiteralCache ","Return Stmt ","Name Expr typeLiteral ","Name Expr typeLiteral ","Name Expr typeLiteral ","Name Expr typeLiteral ","Variable Declarator TypeLiteral typeLiteral = ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Simple Name get ","Block Stmt ","NOT_EQUALS","Null Literal Expr ","NullLiteralExpr","ReturnStmt","Variable Declaration Expr ","Simple Name copy ","Name Expr typeLiteralCache ","Name Expr copy ","Name Expr iter ","Variable Declarator HashMap<Type, TypeLiteral> copy = ","Class Or Interface Type HashMap ","Object Creation Expr HashMap<Type, TypeLiteral> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr TypeLiteral Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Assign Expr ASSIGN ","Simple Name generateDecoderCacheKey ","Simple Name type ","Method Declaration ","Simple Name generateEncoderCacheKey ","Simple Name type ","Method Declaration ","Method Call Expr ","Simple Name put ","Assign Expr ASSIGN ","Name Expr typeLiteralCache ","Class Or Interface Type String ","Simple Name generateDecoderCacheKey ","Parameter Type type ","Block Stmt ","Return Stmt ","Name Expr type ","Class Or Interface Type Type ","Method Call Expr ","Simple Name generateCacheKey ","String Literal Expr Not Empty  ","Name Expr iter ","Simple Name prefix ","Method Declaration ","StringLiteralExpr","Class Or Interface Type String ","Simple Name generateEncoderCacheKey ","Parameter Type type ","Block Stmt ","Return Stmt ","Name Expr type ","Class Or Interface Type Type ","Method Call Expr ","Simple Name generateCacheKey ","String Literal Expr Not Empty  ","Expression Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","If Stmt ","Method Call Expr ","Throw Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Instance Of Expr ","Try Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","For Stmt ","Array Access Expr idx ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","Parameter JsonException e ","Name Expr notFirst ","Parameter Exception e ","Throw Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Block Stmt ","Throw Stmt ","Return Stmt ","Class Or Interface Type String ","Simple Name generateCacheKey ","Parameter Type type ","Parameter String prefix ","Block Stmt ","Name Expr type ","Name Expr type ","Null Literal Expr ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Class Or Interface Type Type ","Name Expr type ","Name Expr prefix ","Class Or Interface Type Type ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name decoderClassName ","Name Expr decoderClassName ","Name Expr decoderClassName ","Expression Stmt ","Name Expr decoderClassName ","Name Expr decoderClassName ","Assign Expr ASSIGN ","Expression Stmt ","Name Expr decoderClassName ","Name Expr decoderClassName ","Variable Declarator StringBuilder decoderClassName = ","Variable Declaration Expr ","Object Creation Expr StringBuilder Optional.empty Optional.empty ","Class Or Interface Type StringBuilder ","Block Stmt ","InstanceOfExpr","Class Or Interface Type Class ","Class","Variable Declaration Expr ","Simple Name slice ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Variable Declarator Class clazz = ","Class Or Interface Type Slice ","Cast Expr ","Class Or Interface Type Class ","Block Stmt ","Simple Name isAnonymousClass ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","String Literal Expr Not Empty  ","PLUS","Block Stmt ","Simple Name isArray ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getCanonicalName ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getName ","Block Stmt ","Class Or Interface Type ParameterizedType ","ParameterizedType","Block Stmt ","Catch Clause ","Catch Clause ","Variable Declaration Expr ","Simple Name pType ","Name Expr pType ","Name Expr pType ","Name Expr pType ","Variable Declarator ParameterizedType pType = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name clazz ","Simple Name entry ","Variable Declarator Class clazz = ","Class Or Interface Type Class ","Cast Expr ","Name Expr cache ","Method Call Expr ","Simple Name getRawType ","Method Call Expr ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getCanonicalName ","Block Stmt ","Name Expr i ","Simple Name i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Char Literal Expr ''' ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","LESS","Field Access Expr ","Method Call Expr ","Simple Name length ","Simple Name getActualTypeArguments ","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name typeName ","Name Expr typeName ","Variable Declarator String typeName = ","Name Expr mapped ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Array Access Expr i ","Simple Name type ","Method Declaration ","Method Call Expr ","Simple Name getActualTypeArguments ","Method Call Expr ","Simple Name getKey ","Char Literal Expr '_' ","'_'","Method Call Expr ","Simple Name append ","Block Stmt ","Method Call Expr ","Simple Name e ","Name Expr e ","Block Stmt ","Class Or Interface Type Exception ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Name Expr e ","String Literal Expr Not Empty  ","Block Stmt ","Class Or Interface Type GenericArrayType ","GenericArrayType","Variable Declaration Expr ","Simple Name gaType ","Name Expr gaType ","Variable Declarator GenericArrayType gaType = ","Class Or Interface Type GenericArrayType ","Cast Expr ","Class Or Interface Type GenericArrayType ","Variable Declaration Expr ","Simple Name compType ","Name Expr compType ","Variable Declarator Type compType = ","Name Expr dArr ","Method Call Expr ","Simple Name getGenericComponentType ","Method Call Expr ","Simple Name append ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Class Or Interface Type WildcardType ","WildcardType","Method Call Expr ","Simple Name format ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getName ","Class Or Interface Type Object ","Object Creation Expr UnsupportedOperationException Optional.empty Optional.empty ","Class Or Interface Type UnsupportedOperationException ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name toString ","Method Declaration ","If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Method Call Expr ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Return Stmt ","If Stmt ","Instance Of Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Expression Stmt ","Variable Declaration Expr ","Throw Stmt ","Class Or Interface Type Object ","Simple Name formatTypeWithoutSpecialCharacter ","Parameter Type type ","Block Stmt ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr code ","Name Expr type ","Name Expr type ","Name Expr type ","Name Expr type ","Class Or Interface Type Type ","Block Stmt ","Class Or Interface Type Class ","Variable Declaration Expr ","Simple Name clazz ","Name Expr cache ","Variable Declarator Class clazz = ","Name Expr cache ","Cast Expr ","Class Or Interface Type Event ","Method Call Expr ","Simple Name getCanonicalName ","Block Stmt ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name pType ","Name Expr pType ","Name Expr pType ","Variable Declarator ParameterizedType pType = ","Class Or Interface Type ParameterizedType ","Cast Expr ","Class Or Interface Type ParameterizedType ","Variable Declaration Expr ","Simple Name typeName ","Name Expr typeName ","Name Expr compType ","Name Expr typeArg ","Name Expr typeName ","Variable Declarator String typeName = ","Class Or Interface Type String ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name getRawType ","Block Stmt ","Simple Name typeArg ","Class Or Interface Type Type ","Simple Name getActualTypeArguments ","Return Stmt ","PLUS","String Literal Expr Not Empty  ","Assign Expr PLUS ","Method Call Expr ","Simple Name formatTypeWithoutSpecialCharacter ","Block Stmt ","Class Or Interface Type GenericArrayType ","Variable Declaration Expr ","Simple Name gaType ","Name Expr gaType ","Variable Declarator GenericArrayType gaType = ","Class Or Interface Type GenericArrayType ","Cast Expr ","Class Or Interface Type GenericArrayType ","Binary Expr PLUS ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name formatTypeWithoutSpecialCharacter ","Method Call Expr ","Simple Name getGenericComponentType ","Block Stmt ","Class Or Interface Type WildcardType ","Method Call Expr ","Class Expr Object.class ","Simple Name getCanonicalName ","Method Call Expr ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","Method Call Expr ","Binary Expr PLUS ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name getClass ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type String ","Simple Name toString ","Block Stmt ","Return Stmt ","Binary Expr PLUS ","Binary Expr PLUS ","Simple Name end ","Binary Expr PLUS ","Char Literal Expr ''' ","Binary Expr PLUS ","Name Expr encoderCacheKey ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Char Literal Expr ''' ","Binary Expr PLUS ","Name Expr decoderCacheKey ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr iter ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","'''","'}'"]}
{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","methodName":"getType-TypeLiteral-","callMethodNameReferTo":{},"num":8,"succs":[[4,2,1,3],[],[3],[],[5],[7,0,6],[],[]],"attribute":["Method Declaration ","PUBLIC","Class Or Interface Type Type ","Simple Name getType ","Block Stmt ","Return Stmt ","ReturnStmt","Name Expr type "]}
{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","methodName":"getDecoderCacheKey-TypeLiteral-","callMethodNameReferTo":{"12":"src/main/java/com/jsoniter/spi/JsoniterSpi.java?getCurrentConfig-JsoniterSpi-"},"num":26,"succs":[[3,2,4,1],[],[3],[],[5],[7,6,0],[],[9,11,8],[],[13,12,10],[],[19,17,1,18,16],[15,14],[],[],[],[17],[],[10,22],[20],[11,23,6],[10],[],[24,21,25],[],[]],"attribute":["Method Declaration ","PUBLIC","Class Or Interface Type String ","Simple Name getDecoderCacheKey ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Simple Name getDecoderCacheKey ","Method Call Expr ","Simple Name configName ","Method Declaration ","Method Call Expr ","Simple Name configName ","Parameter Class clazz ","Simple Name getCurrentConfig ","Class Or Interface Type String ","Simple Name getDecoderCacheKey ","Parameter String configName ","Block Stmt ","Return Stmt ","Name Expr configName ","Simple Name length ","Binary Expr PLUS ","PLUS","Name Expr decoderCacheKey "]}
{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","methodName":"getDecoderCacheKey-TypeLiteral-String","callMethodNameReferTo":{},"num":14,"succs":[[3,5,1,2,4],[],[3],[],[8,9],[6],[0,11,10],[8],[],[],[],[12,7,13],[],[]],"attribute":["Method Declaration ","PUBLIC","Class Or Interface Type String ","Simple Name getDecoderCacheKey ","Parameter String configName ","Block Stmt ","Return Stmt ","Name Expr configName ","Simple Name configName ","Simple Name length ","ReturnStmt","Binary Expr PLUS ","PLUS","Name Expr decoderCacheKey "]}
{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","methodName":"getEncoderCacheKey-TypeLiteral-","callMethodNameReferTo":{"12":"src/main/java/com/jsoniter/spi/JsoniterSpi.java?getCurrentConfig-JsoniterSpi-"},"num":26,"succs":[[4,2,1,3],[],[3],[],[5],[7,0,6],[],[8,9,11],[],[12,13,10],[],[17,19,18,16,1],[15,14],[],[],[],[17],[],[10,22],[20],[23,11,6],[10],[],[25,24,21],[],[]],"attribute":["Method Declaration ","PUBLIC","Class Or Interface Type String ","Simple Name getEncoderCacheKey ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Simple Name getEncoderCacheKey ","Method Call Expr ","Simple Name configName ","Method Declaration ","Method Call Expr ","Simple Name configName ","Name Expr JsoniterSpi ","Simple Name getCurrentConfig ","Array Type 1 ","Simple Name getEncoderCacheKey ","Parameter String configName ","Block Stmt ","Return Stmt ","Name Expr configName ","Class Or Interface Type String ","Binary Expr PLUS ","PLUS","Name Expr encoderCacheKey "]}
{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","methodName":"getEncoderCacheKey-TypeLiteral-String","callMethodNameReferTo":{},"num":14,"succs":[[3,5,2,4,1],[],[3],[],[8,9],[6],[11,10,0],[8],[],[],[],[13,12,7],[],[]],"attribute":["Method Declaration ","PUBLIC","Array Type 1 ","Simple Name getEncoderCacheKey ","Parameter String configName ","Block Stmt ","Return Stmt ","Name Expr configName ","Simple Name configName ","Class Or Interface Type String ","ReturnStmt","Binary Expr PLUS ","PLUS","Name Expr encoderCacheKey "]}
{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","methodName":"getNativeType-TypeLiteral-","callMethodNameReferTo":{},"num":8,"succs":[[2,1,3,4],[],[3],[],[5],[0,7,6],[],[]],"attribute":["Method Declaration ","PUBLIC","Class Or Interface Type NativeType ","Simple Name getNativeType ","Block Stmt ","Return Stmt ","ReturnStmt","Name Expr nativeType "]}
{"fileName":"src/main/java/com/jsoniter/spi/TypeLiteral.java","version":"0.9.23","methodName":"toString-TypeLiteral-","callMethodNameReferTo":{},"num":31,"succs":[[1,4,2,5,3],[],[],[4],[],[6],[8,0,7],[],[9,10,11],[12,10,13],[],[30],[10,15,14],[29],[17,10,16],[],[10,19,18],[28],[10,20,21],[29],[10,23,22],[],[10,25,24],[28],[10,27,26],[],[28],[28],[],[],[]],"attribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type String ","Simple Name toString ","Block Stmt ","Return Stmt ","ReturnStmt","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Simple Name end ","Binary Expr PLUS ","Char Literal Expr ''' ","Binary Expr PLUS ","Name Expr encoderCacheKey ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Char Literal Expr ''' ","Binary Expr PLUS ","Name Expr decoderCacheKey ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr iter ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","'''","'}'"]}
