{"fileName":"src/main/java/com/jsoniter/extra/Base64Support.java","version":"0.9.23","hasMethodName":["enable-Base64Support-"]}
{"fileName":"src/main/java/com/jsoniter/extra/Base64Support.java","version":"0.9.23","methodName":"enable-Base64Support-","callMethodNameReferTo":{"54":"src/main/java/com/jsoniter/extra/Base64.java?decodeFast-Base64-byte[]-int-int","102":"src/main/java/com/jsoniter/extra/Base64.java?encodeToBytes-Base64-byte[]-JsonStream","57":"src/main/java/com/jsoniter/spi/Slice.java?data-Slice-","58":"src/main/java/com/jsoniter/spi/Slice.java?head-Slice-","59":"src/main/java/com/jsoniter/spi/Slice.java?tail-Slice-"},"num":108,"succs":[[14,1],[3,2],[3,15],[19,4],[24,5],[63],[7,11,10,9,8,12],[8],[9],[],[11],[],[3,4,0,5],[54,31,6,53],[2],[16,17],[],[18],[],[20,22,21],[],[],[23],[],[28,25,27,26],[],[],[29],[30],[],[],[34,33,39,32,7,37,36,35],[],[34],[],[41,42],[38],[],[],[13,43],[41],[],[],[44],[49],[40],[45],[46,45],[45,47],[51,45,50],[45],[52,40],[],[],[57,59,58,56,55],[],[],[46,60],[61,47],[48,62],[],[],[],[66,67,64,65],[],[],[68],[69],[],[],[72,76,74,7,77,75,71,36,73],[],[73],[],[84,79],[85,81],[],[89,88,86,87],[79],[],[81],[],[80,81],[82,81],[],[],[90],[98],[102],[105],[93],[78],[91],[91,95,94],[91],[78,96],[97],[],[99,100,80],[],[101],[],[104,92,103,82],[],[],[83,107,106],[],[101]],"attribute":["If Stmt ","Name Expr enabled ","Throw Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","STATIC","SYNCHRONIZED","Void Type ","Simple Name enable ","Block Stmt ","Return Stmt ","Block Stmt ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","String Literal Expr Not Empty  ","StringLiteralExpr","Assign Expr ASSIGN ","Class Or Interface Type Context ","ASSIGN","Boolean Literal Expr true ","true","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerTypeDecoder ","Class Or Interface Type JsonIterator ","Object Creation Expr Decoder Optional.empty Optional.empty ","Array Type 1 ","Class Or Interface Type Decoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name decode ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Class Or Interface Type JsonIterator ","Expression Stmt ","Variable Declaration Expr ","Simple Name slice ","Name Expr slice ","Name Expr slice ","Name Expr slice ","Variable Declarator Slice slice = ","Class Or Interface Type Slice ","Method Call Expr ","Simple Name readStringAsSlice ","ReturnStmt","Method Call Expr ","Name Expr Base64 ","Simple Name decodeFast ","Method Call Expr ","Method Call Expr ","Method Call Expr ","Simple Name data ","Simple Name head ","Simple Name tail ","Method Call Expr ","Method Call Expr ","Simple Name registerTypeEncoder ","Class Expr byte[].class ","Object Creation Expr Encoder Optional.empty Optional.empty ","Array Type 1 ","Class Or Interface Type Encoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Void Type ","Simple Name encode ","Parameter Object obj ","Parameter JsonStream stream ","Class Or Interface Type IOException ","Block Stmt ","Name Expr obj ","Simple Name obj ","Name Expr stream ","Simple Name stream ","Name Expr stream ","Name Expr stream ","Class Or Interface Type Object ","Class Or Interface Type JsonStream ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Array Initializer Expr ","Variable Declaration Expr ","Simple Name bytes ","Name Expr bytes ","Variable Declarator byte[] bytes = ","Array Type 1 ","Cast Expr ","Array Type 1 ","Primitive Type byte ","Method Call Expr ","Simple Name write ","Name Expr val ","'''","Method Call Expr ","Simple Name toLong ","Simple Name encodeToBytes ","Method Call Expr ","Simple Name write ","Char Literal Expr ''' "]}
