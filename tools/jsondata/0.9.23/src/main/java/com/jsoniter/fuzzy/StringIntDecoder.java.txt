{"fileName":"src/main/java/com/jsoniter/fuzzy/StringIntDecoder.java","version":"0.9.23","hasMethodName":["decodeInt-StringIntDecoder-JsonIterator"]}
{"fileName":"src/main/java/com/jsoniter/fuzzy/StringIntDecoder.java","version":"0.9.23","methodName":"decodeInt-StringIntDecoder-JsonIterator","callMethodNameReferTo":{"38":"src/main/java/com/jsoniter/CodegenAccess.java?nextToken-CodegenAccess-JsonIterator","62":"src/main/java/com/jsoniter/CodegenAccess.java?nextToken-CodegenAccess-JsonIterator"},"num":74,"succs":[[1,27],[2,40],[42,41,30,3,4],[44,4],[5,53],[6,60],[64,7],[8,41,9,65,34],[66,9],[73,55,10],[15,12,13,14,19,11,16,17],[],[],[14],[],[21,26],[18],[],[],[1,5,9,0,4,6],[21],[],[21,20],[22,21],[23,21],[24,21],[],[36],[29,20],[],[28],[30,28,2],[24,31,33,28],[],[32],[32,7,34],[37,28,38],[28],[29,39,20],[],[3],[],[43],[],[22,45,46,47],[],[48],[49,51,50],[],[48],[],[52,31],[],[56],[23],[54],[58,54,57],[54],[59,23],[],[32,62,61],[],[24,63,33],[],[8],[43],[69,25,67,68],[],[48],[70,71,50],[48],[72,35],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Return Stmt ","Method Declaration Throws ","Name Expr nextToken ","PUBLIC","Primitive Type int ","Simple Name decodeInt ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Void Type ","Boolean Literal Expr true ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name c ","Name Expr CodegenAccess ","Name Expr c ","Name Expr c ","Name Expr c ","Name Expr CodegenAccess ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Block Stmt ","NOT_EQUALS","Char Literal Expr ''' ","'''","Object Creation Expr JsonException Optional.empty Optional.empty ","Simple Name reportError ","String Literal Expr Not Empty  ","Binary Expr PLUS ","StringLiteralExpr","String Literal Expr Not Empty  ","PLUS","Cast Expr ","Primitive Type char ","Variable Declaration Expr ","Name Expr com ","Name Expr val ","Variable Declarator int val = ","Primitive Type int ","Method Call Expr ","Simple Name readInt ","Method Call Expr ","ASSIGN","Method Call Expr ","Simple Name nextToken ","Block Stmt ","Char Literal Expr '}' ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Cast Expr ","Primitive Type char ","ReturnStmt"]}
